module statsem/part/language

imports

  statsem/part
  statsem/expr
  
  signatures/part/language-sig

rules // Sdf3 section and options

  partOk(s, Sdf3Section(options)) :- sdf3OptionsOk(s, options).
  
  sdf3OptionOk : scope * Sdf3Option
  sdf3OptionsOk maps sdf3OptionOk(*, list(*))
  
  sdf3OptionOk(s, Sdf3Source(source)) :-
    sdf3SourceOk(s, source).
    
  sdf3SourceOk : scope * Sdf3Source
  sdf3SourceOk(s, Sdf3Files(options)) :- sdf3FilesOptionsOk(s, options).
  sdf3SourceOk(s, Sdf3Prebuilt(options)) :- sdf3PrebuiltOptionsOk(s, options).
  
  sdf3FilesOptionOk : scope * Sdf3FilesOption
  sdf3FilesOptionsOk maps sdf3FilesOptionOk(*, list(*))
  sdf3FilesOptionOk(s, Sdf3FilesMainSourceDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  sdf3FilesOptionOk(s, Sdf3FilesMainFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.

  sdf3PrebuiltOptionOk : scope * Sdf3PrebuiltOption
  sdf3PrebuiltOptionsOk maps sdf3PrebuiltOptionOk(*, list(*))
  sdf3PrebuiltOptionOk(s, Sdf3PrebuiltParseTableAtermFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  sdf3PrebuiltOptionOk(s, Sdf3PrebuiltParseTablePersistedFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.

  sdf3OptionOk(s, Sdf3ParseTableGeneratorSection(options)) :-
    sdf3ParseTableGeneratorOptionsOk(s, options).
  
  sdf3ParseTableGeneratorOptionOk : scope * Sdf3ParseTableGeneratorOption
  sdf3ParseTableGeneratorOptionsOk maps sdf3ParseTableGeneratorOptionOk(*, list(*))
  
  sdf3ParseTableGeneratorOptionOk(s, Sdf3ParseTableGeneratorDynamic(e)) :- 
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.
  sdf3ParseTableGeneratorOptionOk(s, Sdf3ParseTableGeneratorDataDependent(e)) :- 
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.
  sdf3ParseTableGeneratorOptionOk(s, Sdf3ParseTableGeneratorLayoutSensitive(e)) :- 
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.
  sdf3ParseTableGeneratorOptionOk(s, Sdf3ParseTableGeneratorSolveDeepConflicts(e)) :- 
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.
  sdf3ParseTableGeneratorOptionOk(s, Sdf3ParseTableGeneratorCheckOverlap(e)) :- 
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.
  sdf3ParseTableGeneratorOptionOk(s, Sdf3ParseTableGeneratorCheckPriorities(e)) :- 
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.

rules // Esv section and options

  partOk(s, EsvSection(options)) :- esvOptionsOk(s, options).
  
  esvOptionOk : scope * EsvOption
  esvOptionsOk maps esvOptionOk(*, list(*))

  esvOptionOk(s, EsvSource(source)) :-
    esvSourceOk(s, source).
    
  esvSourceOk : scope * EsvSource
  esvSourceOk(s, EsvFiles(options)) :- esvFilesOptionsOk(s, options).
  esvSourceOk(s, EsvPrebuilt(options)) :- esvPrebuiltOptionsOk(s, options).
  
  esvFilesOptionOk : scope * EsvFilesOption
  esvFilesOptionsOk maps esvFilesOptionOk(*, list(*))
  esvFilesOptionOk(s, EsvFilesMainSourceDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  esvFilesOptionOk(s, EsvFilesMainFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  esvFilesOptionOk(s, EsvFilesIncludeDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  esvFilesOptionOk(s, EsvFilesIncludeLibspoofax2Exports(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.

  esvPrebuiltOptionOk : scope * EsvPrebuiltOption
  esvPrebuiltOptionsOk maps esvPrebuiltOptionOk(*, list(*))
  esvPrebuiltOptionOk(s, EsvPrebuiltFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.

rules // Statix section and options

  partOk(s, StatixSection(options)) :- statixOptionsOk(s, options).
  
  statixOptionOk : scope * StatixOption
  statixOptionsOk maps statixOptionOk(*, list(*))
  
  statixOptionOk(s, StatixSource(source)) :-
    statixSourceOk(s, source).
    
  statixSourceOk : scope * StatixSource
  statixSourceOk(s, StatixFiles(options)) :- statixFilesOptionsOk(s, options).
  statixSourceOk(s, StatixPrebuilt(options)) :- statixPrebuiltOptionsOk(s, options).
  
  statixFilesOptionOk : scope * StatixFilesOption
  statixFilesOptionsOk maps statixFilesOptionOk(*, list(*))
  statixFilesOptionOk(s, StatixFilesMainSourceDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  statixFilesOptionOk(s, StatixFilesMainFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  statixFilesOptionOk(s, StatixFilesIncludeDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.

  statixPrebuiltOptionOk : scope * StatixPrebuiltOption
  statixPrebuiltOptionsOk maps statixPrebuiltOptionOk(*, list(*))
  statixPrebuiltOptionOk(s, StatixPrebuiltSpecAtermDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.

  statixOptionOk(s, StatixSdf3SignatureGen(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e. 
      
rules // Stratego section and options

  partOk(s, StrategoSection(options)) :- strategoOptionsOk(s, options).
  
  strategoOptionOk : scope * StrategoOption
  strategoOptionsOk maps strategoOptionOk(*, list(*))

  strategoOptionOk(s, StrategoSource(source)) :-
    strategoSourceOk(s, source).
    
  strategoSourceOk : scope * StrategoSource
  strategoSourceOk(s, StrategoFiles(options)) :- strategoFilesOptionsOk(s, options).
  
  strategoFilesOptionOk : scope * StrategoFilesOption
  strategoFilesOptionsOk maps strategoFilesOptionOk(*, list(*))
  strategoFilesOptionOk(s, StrategoFilesMainSourceDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  strategoFilesOptionOk(s, StrategoFilesMainFile(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.
  strategoFilesOptionOk(s, StrategoFilesIncludeDirectory(e)) :-
    typeOfExpr(s, e) == PATH() | error $[Expected path]@e.

  strategoOptionOk(s, StrategoSdf3StatixExplicationGen(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean]@e.
  strategoOptionOk(s, StrategoLanguageStrategyAffix(e)) :-
    typeOfExpr(s, e) == STRATEGY() | error $[Expected Stratego strategy identifier]@e.
  strategoOptionOk(s, StrategoOutputJavaPackageId(e)) :-
    typeOfExpr(s, e) == STRING() | error $[Expected string]@e.
