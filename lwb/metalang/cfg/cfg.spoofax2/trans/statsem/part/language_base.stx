module statsem/part/language_base

imports

  statsem/part
  statsem/expr
  statsem/util

  signatures/part/language_base-sig

rules // Parser section and options

  partOk(s, t@ParserSection(options)) :-
    parserOptionsOk(s, options),
    hasDefaultStartSymbol(options) == TRUE() | error $['default-start-symbol' option has not been set]@t.


  parserOptionOk : scope * ParserOption
  parserOptionsOk maps parserOptionOk(*, list(*))

  parserOptionOk(s, DefaultStartSymbol(e)) :-
    typeOfExpr(s, e) == SORT() | error $[Expected sort].
  parserOptionOk(s, ParserVariant(variant)) :-
    parserVariantOk(s, variant).


  parserVariantOk : scope * ParserVariant

  parserVariantOk(s, Jsglr1()).
  parserVariantOk(s, Jsglr2(options)) :-
    jsglr2OptionsOk(s, options).


  jsglr2OptionOk : scope * Jsglr2Option
  jsglr2OptionsOk maps jsglr2OptionOk(*, list(*))

  jsglr2OptionOk(s, Jsglr2Preset(_)).


  hasDefaultStartSymbol: list(ParserOption) -> BOOL
  hasDefaultStartSymbol([DefaultStartSymbol(_)|_]) = TRUE().
  hasDefaultStartSymbol([_|s]) = hasDefaultStartSymbol(s).
  hasDefaultStartSymbol([]) = FALSE().

rules // Styler section and options

  partOk(s, StylerSection(options)) :-
    stylerOptionsOk(s, options).

  stylerOptionOk : scope * StylerOption
  stylerOptionsOk maps stylerOptionOk(*, list(*))

rules // Constraint analyzer section and options

  partOk(s, ConstraintAnalyzerSection(options)) :-
    constraintAnalyzerOptionsOk(s, options).

  constraintAnalyzerOptionOk : scope * ConstraintAnalyzerOption
  constraintAnalyzerOptionsOk maps constraintAnalyzerOptionOk(*, list(*))

  constraintAnalyzerOptionOk(s, ConstraintAnalyzerEnableNaBL2(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].
  constraintAnalyzerOptionOk(s, ConstraintAnalyzerEnableStatix(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].
  constraintAnalyzerOptionOk(s, ConstraintAnalyzerMultiFile(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].
  constraintAnalyzerOptionOk(s, ConstraintAnalyzerStrategoStrategy(e)) :-
    typeOfExpr(s, e) == STRATEGY() | error $[Expected Stratego strategy identifier].

  constraintAnalyzerOptionOk(s, ConstraintAnalyzerDefaultStatixMessageStacktraceLength(e)) :-
    typeOfExpr(s, e) == UINT() | error $[Expected unsigned integer].
  constraintAnalyzerOptionOk(s, ConstraintAnalyzerDefaultStatixMessageTermDepth(e)) :-
    typeOfExpr(s, e) == UINT() | error $[Expected unsigned integer].
  constraintAnalyzerOptionOk(s, ConstraintAnalyzerDefaultStatixTestLogLevel(e)) :-
    typeOfExpr(s, e) == STRING() | error $[Expected string].
  constraintAnalyzerOptionOk(s, ConstraintAnalyzerDefaultStatixSuppressCascadingErrors(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].

rules // Multilang analyzer section and options

  partOk(s, MultilangAnalyzerSection(options)) :-
    multilangAnalyzerOptionsOk(s, options).

  multilangAnalyzerOptionOk : scope * MultilangAnalyzerOption
  multilangAnalyzerOptionsOk maps multilangAnalyzerOptionOk(*, list(*))

rules // Stratego runtime section and options

  partOk(s, StrategoRuntimeSection(options)) :-
    strategoRuntimeOptionsOk(s, options).

  strategoRuntimeOptionOk : scope * StrategoRuntimeOption
  strategoRuntimeOptionsOk maps strategoRuntimeOptionOk(*, list(*))

  strategoRuntimeOptionOk(s, StrategoRuntimeStrategyPackageId(e)) :-
    typeOfExpr(s, e) == JAVA_ID() | error $[Expected Java package identifier].
  strategoRuntimeOptionOk(s, StrategoRuntimeInteropRegistererByReflection(e)) :-
    typeOfExpr(s, e) == JAVA_ID() | error $[Expected Java type identifier].
  strategoRuntimeOptionOk(s, StrategoRuntimeAddSpoofax2Primitives(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].
  strategoRuntimeOptionOk(s, StrategoRuntimeAddNaBL2Primitives(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].
  strategoRuntimeOptionOk(s, StrategoRuntimeAddStatixPrimitives(e)) :-
    typeOfExpr(s, e) == BOOL() | error $[Expected boolean].

rules // Tego runtime section and options

  partOk(s, TegoRuntimeSection(options)) :-
    tegoRuntimeOptionsOk(s, options).

  tegoRuntimeOptionOk : scope * TegoRuntimeOption
  tegoRuntimeOptionsOk maps tegoRuntimeOptionOk(*, list(*))

rules // Completer section and options

  partOk(s, CompleterSection(options)) :-
    completerOptionsOk(s, options).

  completerOptionOk : scope * CompleterOption
  completerOptionsOk maps completerOptionOk(*, list(*))

rules // Exports section and options

  partOk(s, ExportsSection(options)) :-
    exportsOptionsOk(s, options).

  exportsOptionOk : scope * ExportsOption
  exportsOptionsOk maps exportsOptionOk(*, list(*))
