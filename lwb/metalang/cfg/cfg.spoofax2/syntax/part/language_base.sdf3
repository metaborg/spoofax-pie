module part/language_base

imports

  part
  expr

context-free sorts

  ParserOption
  ParserVariant
  Jsglr2Option
  Jsglr2Preset
  CommentSymbolOption
  BracketSymbolOption
  StylerOption
  ConstraintAnalyzerOption
  MultilangAnalyzerOption
  StrategoRuntimeOption
  TegoRuntimeOption
  CodeCompletionOption
  ExportsOption

context-free syntax

  Part.ParserSection = <parser {
  <{ParserOption "\n"}*>
}>

  ParserOption.DefaultStartSymbol = <default-start-symbol = <Expr>>
  ParserOption.ParserVariant = <variant = <ParserVariant>>

  ParserVariant.Jsglr1 = <jsglr1>
  ParserVariant.Jsglr2 = <jsglr2 {
  <{Jsglr2Option "\n"}*>
}>

  Jsglr2Option.Jsglr2Preset = <preset = <Jsglr2Preset>>

  Jsglr2Preset.Jsglr2StandardPreset            = <Standard>
  Jsglr2Preset.Jsglr2ElkhoundPreset            = <Elkhound>
  Jsglr2Preset.Jsglr2RecoveryPreset            = <Recovery>
  Jsglr2Preset.Jsglr2RecoveryElkhoundPreset    = <RecoveryElkhound>
  Jsglr2Preset.Jsglr2DataDependentPreset       = <DataDependent>
  Jsglr2Preset.Jsglr2LayoutSensitivePreset     = <LayoutSensitive>
  Jsglr2Preset.Jsglr2CompositePreset           = <Composite>
  Jsglr2Preset.Jsglr2IncrementalPreset         = <Incremental>
  Jsglr2Preset.Jsglr2IncrementalRecoveryPreset = <IncrementalRecovery>

context-free syntax

  Part.CommentSymbolSection = <comment-symbols {
    <{CommentSymbolOption "\n"}*>
}>

  CommentSymbolOption.LineComment = <line = <Expr>>
  CommentSymbolOption.BlockComment = <block = <Expr> * <Expr>>

context-free syntax

  Part.BracketSymbolSection = <bracket-symbols {
    <{BracketSymbolOption "\n"}*>
}>

  BracketSymbolOption.Bracket = <bracket = <Expr> * <Expr>>

context-free syntax

  Part.StylerSection = <styler {
  <{StylerOption "\n"}*>
}>

context-free syntax

  Part.ConstraintAnalyzerSection = <constraint-analyzer {
  <{ConstraintAnalyzerOption "\n"}*>
}>

  ConstraintAnalyzerOption.ConstraintAnalyzerEnableNaBL2      = <enable-nabl2 = <Expr>>
  ConstraintAnalyzerOption.ConstraintAnalyzerEnableStatix     = <enable-statix = <Expr>>
  ConstraintAnalyzerOption.ConstraintAnalyzerMultiFile        = <multi-file = <Expr>>
  ConstraintAnalyzerOption.ConstraintAnalyzerStrategoStrategy = <stratego-strategy = <Expr>>

  ConstraintAnalyzerOption.ConstraintAnalyzerDefaultStatixMessageStacktraceLength = <default-statix-message-stacktrace-length = <Expr>>
  ConstraintAnalyzerOption.ConstraintAnalyzerDefaultStatixMessageTermDepth        = <default-statix-message-term-depth = <Expr>>
  ConstraintAnalyzerOption.ConstraintAnalyzerDefaultStatixTestLogLevel            = <default-statix-test-log-level = <Expr>>
  ConstraintAnalyzerOption.ConstraintAnalyzerDefaultStatixSuppressCascadingErrors = <default-statix-supress-cascading-errors = <Expr>>

context-free syntax

  Part.MultilangAnalyzerSection = <multilang-analyzer {
  <{MultilangAnalyzerOption "\n"}*>
}>

context-free syntax

  Part.StrategoRuntimeSection = <stratego-runtime {
  <{StrategoRuntimeOption "\n"}*>
}>

  StrategoRuntimeOption.StrategoRuntimeStrategyPackageId             = <strategy-package-id = <Expr>>
  StrategoRuntimeOption.StrategoRuntimeInteropRegistererByReflection = <interop-registerer-by-reflection = <Expr>>
  StrategoRuntimeOption.StrategoRuntimeAddSpoofax2Primitives         = <add-spoofax2-primitives = <Expr>>
  StrategoRuntimeOption.StrategoRuntimeAddNaBL2Primitives            = <add-nabl2-primitives = <Expr>>
  StrategoRuntimeOption.StrategoRuntimeAddStatixPrimitives           = <add-statix-primitives = <Expr>>

  StrategoRuntimeOption.StrategoRuntime_WithLibrary                  = <with-library = <Expr>> // IOperatorRegistry

  StrategoRuntimeOption.StrategoRuntime_ClassKind                            = <class-kind = <ClassKind>>
  StrategoRuntimeOption.StrategoRuntime_BaseStrategoRuntimeBuilderFactory    = <base-StrategoRuntimeBuilderFactory = <Expr>>
  StrategoRuntimeOption.StrategoRuntime_ExtendStrategoRuntimeBuilderFactory  = <extend-StrategoRuntimeBuilderFactory = <Expr>>

context-free syntax

  Part.TegoRuntimeSection = <tego-runtime {
  <{TegoRuntimeOption "\n"}*>
}>

context-free syntax

  Part.CodeCompletionSection = <code-completion {
  <{CodeCompletionOption "\n"}*>
}>
