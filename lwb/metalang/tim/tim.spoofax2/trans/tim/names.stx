module tim/names

imports
  signatures/tim/common-sig
  tim/types
  
signature
  relations
    type : TID -> TYPE
    
  name-resolution labels
    P
    
rules
  // lookup var in current scope or parent scopes
  lookupVar : scope * TID -> list((path * (TID * TYPE)))
  lookupVar(s, x) = ps :-
    query type filter P* and { x' :- x == x' } min $ < P and true in s |-> ps.
    
  // resolve var to the given ID
  resolveVar : scope * TID -> TYPE
  resolveVar(s, x) = T :- {x'}
    lookupVar(s, x) == [(_, (x', T))|_] | error $[Undefined variable [x].]@x,
    @x.ref := x'.
    
  // declare new var, assert it is not shadowed in the current scope
  declareVar : scope * TID * TYPE
  declareVar(s, x, T) :- {ps}
    !type[x, T] in s,
    query type filter e and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Duplicate declaration of [x] in the same scope.]@x.