module compile/util/type

imports

  compile/util/ast
  signatures/tim-sig
  signatures/tim/-
  signatures/llvm-sig
  signatures/llvm/-

signature
  sorts TYPE SCOPE
  constructors
    INT : TYPE
    STRING : TYPE
    FUNCTION : list(TYPE) -> TYPE
    REF : TYPE -> TYPE
    ARRAY : TYPE -> TYPE
    RECORD : TYPE -> TYPE
    CLOSURE : list(TYPE) -> TYPE
    ANONCLOSURE : TYPE
    ANY : TYPE
    STRUCT : list(TYPE) * list((TID, TYPE)) -> TYPE

rules

  get-source-type : TValueVar(_, t) -> t
  get-source-type : TValueGlobal(_, t) -> t
  get-source-type : TValueInt(_) -> INT()
  get-source-type : TValueString(_) -> STRING()
  get-source-type : TValueCast(_, t) -> t
  
  get-target-type : INT() -> Int64()
  get-target-type : FUNCTION(_) -> Pointer()
  get-target-type : v -> t
  where t := <get-source-type ; get-target-type> v
  get-target-type : _ -> PointerAddrSpace("1")
  
  get-target-elem-type : CLOSURE(types) -> Struct(<map(get-target-type)> types)
  get-target-elem-type : ANONCLOSURE() -> Array("1", Pointer())
  get-target-elem-type : STRUCT(super, members) -> Struct(<conc> (super', members'))
  with
    super' := <map(get-target-elem-type)> super
  ; members' := <map(?(_, <id>) ; get-target-type)> members
  get-target-elem-type : v -> t
  where t := <get-source-type ; get-target-elem-type> v

  get-member-type : (STRUCT(_, members), field) -> type
  where type := <getfirst(?(field, <id>))> members
  get-member-type : (STRUCT(supers, members), field) -> type
  where type := <getfirst(\super -> <get-member-type> (super, field)\)> supers
  
  get-member-indices : (STRUCT(supers, members), field) -> [idx']
  where
    idx := <get-index0(?(field, _))> members
  ; idx' := <addi> (idx, <length> supers)  // If there's a superstruct, fields begin after it
  get-member-indices : (STRUCT([super], members), field) -> [0|idx]
  where idx := <get-member-indices> (super, field)
  
  flatten-struct : STRUCT([], members) -> members
  flatten-struct : STRUCT(supers, members) -> <conc> (supermembers, members)
  with supermembers := <map(flatten-struct); concat> supers
