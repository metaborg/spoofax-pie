module compile/debug

imports

  signatures/tim-sig
  signatures/tim/-
  compile/ast

rules

  fix-invalid-ast = bottomup(try(fix-invalid-elem))

  fix-invalid-elem : TValueGlobal(x, t) -> TValueVar($[glb_[x]])
  
  fix-invalid-elem : TValueVar(x, t) -> TValueVar(x)
  
  fix-invalid-elem : TExpLet([], b) -> b
  fix-invalid-elem : TExpFix([], b) -> b
  
  fix-invalid-elem : TBind(name, str) -> TBind($[glb_[name]], str)
  
  fix-invalid-elem : TFun(name, FUNCTION(types), args, body) -> TTypedFun($[glb_[name]], types', args, body)
  with
    types' := <map(type-to-ast)> types
  fix-invalid-elem : TFunOffset(name, i, FUNCTION(types), args, body) -> TTypedFun($[glb_[name]], types', args, body)
  with
    types' := <map(type-to-ast)> types
  
  fix-invalid-elem : TExpPrimOp(op, type, args, result, next) -> TExpTypedPrimOp(op, type', args, $[[result]], next)
  with
    type' := <type-to-ast> type
  
  type-to-ast : INT() -> TIntT()
  type-to-ast : STRING() -> TStringT()
  type-to-ast : FUNCTION(ts) -> TFunctionT(<map(type-to-ast)> ts)
  type-to-ast : REF(t) -> TRefT(<type-to-ast> t)
  type-to-ast : ARRAY(t) -> TArrayT(<type-to-ast> t)
  type-to-ast : RECORD(t) -> TRecordT(<type-to-ast> t)
  type-to-ast : ANONCLOSURE() -> TAnonClosureT()
  type-to-ast : CLOSURE(ts) -> TClosureT(<map(type-to-ast)> ts)
  type-to-ast : STRUCT(mems) -> TStructT(<map(\(name, t) -> TStructMember(name, <type-to-ast> t)\)> mems)
  type-to-ast : ANY() -> TAnyT()