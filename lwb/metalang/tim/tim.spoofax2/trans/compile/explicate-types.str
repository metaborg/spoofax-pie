module compile/explicate-types

imports

  statix/api
  signatures/tim/-
  signatures/tim-sig
  compile/util/ast
  compile/util/type

rules

  explicate-types : program -> program'
  with
    analysis := <stx-get-ast-analysis> program
  ; <with(not(stx-analysis-has-errors)|"Analysis has errors")> analysis
  ; program' := <bottomup(try(preserve-annos(explicate-type(|analysis))))> program
  
  explicate-type(|analysis) : t@TValueVar(x) -> TValueVar(x, type)
  with
    type := <stx-get-ast-type(|analysis)> t

  explicate-type(|analysis) : f@TFun(x, args, body) -> TFun(x, type, args, body)
  with
    type := <stx-get-ast-type(|analysis)> f

  explicate-type(|analysis) : f@TFun(x, args, body) -> TFun(x, type, args, body)
  with
    type := <stx-get-ast-type(|analysis)> f

  explicate-type(|analysis) : f@TTypedFun(x, _, args, body) -> TFun(x, type, args, body)
  with
    type := <stx-get-ast-type(|analysis)> f

  explicate-type(|analysis) : TExpPrimOp(name, args, result, body) -> TExpPrimOp(name, type, args, result, body)
  with
    type := <stx-get-ast-type(|analysis)> result

  explicate-type(|analysis) : TExpTypedPrimOp(name, _, args, result, body) -> TExpPrimOp(name, type, args, result, body)
  with
    type := <stx-get-ast-type(|analysis)> result

  explicate-type(|analysis) : TExpTypes(_, e) -> e  // All type definitions should already be resolved by statix

  print-for-type : INT() -> "print-int"
  print-for-type : STRING() -> "print-string"