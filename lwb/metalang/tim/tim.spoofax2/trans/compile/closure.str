module compile/closure

imports

  signatures/tim-sig
  signatures/tim/-
  compile/uniquify
  compile/ast
  compile/debug
  pp

rules

  debug-convert-closures :
    (node, _, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path
    ; filename := <guarantee-extension(|$[cc.[ext]])> path
    ; result   := <strip-annos; uniquify; convert-closures; fix-invalid-ast; pp-debug> ast

  convert-closures =
    topdown(try(mark-non-escaping))
  ; topdown(try(convert-non-escaping))
  ; bottomup(try(convert-closure))
  ; replace-all-funtypes
  ; bottomup(try(convert-closure-call))
  ; bottomup(try(annotate-offsets))
  ; extract-funs

  mark-non-escaping : t@TExpFix(funs, body) -> t'
  where <fix-is-non-escaping> t
  with
    {| Remap
    : <map({name : ?TFun(name, _, _, _) ; rules(Remap : TValueVar(name, type) -> TValueGlobal(name, type))})> funs
    ; t' := <topdown(try(Remap))> t
    |}

//  convert-fix : t@TExpFix(_, _) -> t'
//  with
//    if <fix-is-non-escaping> t then
//      t' := <convert-non-escaping> t
//    else
//      t' := <convert-closure> t
//    end

  fix-is-non-escaping : t@TExpFix(funs, e) -> ()
  where <map(\TFun(name, _, _, _) -> (name, t)\ ; fun-is-non-escaping)> funs

  fun-is-non-escaping : (name, body) -> ()
  where not(oncetd(not(?TExpApp(TValueVar(name, type), _)) ; one(?TValueVar(name, type))))

  convert-non-escaping : t@TExpFix(funs, exp) -> t'
  where <fix-is-non-escaping> t
  with
    {| ConvertCall
    : funs' := <map(convert-non-escaping-fun)> funs
    ; t' := <topdown(try(ConvertCall))> TExpFix(funs', exp)
    |}

  convert-non-escaping-fun : TFun(name, FUNCTION(types), args, body) -> TFun(name, FUNCTION(types'), args', body)
  with
    freevars := <find-free-vars(|[name|args])> body
  ; (freenames, freetypes) := <map(\TValueVar(n, t) -> (n, t)\); unzip> freevars
  ; args' := <conc> (args, freenames)
  ; types' := <conc; map(try(replace-funtype-by-closure))> (types, freetypes)
  ; nonescaping-call(|name, FUNCTION(types'), freevars)

  convert-closure : t@TExpFix(funs, exp) -> t'
    where <not(fix-is-non-escaping)> t
    with
      {| ConvertCall
      : funnames@[firstname|restnames] := <map(\TFun(name, _, _, _) -> name\)> funs
      ; freevars := <foldr(![], union, \TFun(name, _, args, body) -> <find-free-vars(|<conc> (funnames, args))> body\)> funs
      ; (freenames, freetypes) := <map(\TValueVar(n, t) -> (n, t)\); unzip> freevars
      ; closure := <newname> "closure"
      ; let var-to-read-exp = var-to-read-op(|funnames, freevars) in
          (funvars, funs') := <map(convert-fun(var-to-read-exp)) ; unzip> funs
        ; exp' := <foldr(!exp, \(name, c)-> <var-to-read-exp> (firstname, name, c)\)> restnames
        end
      ; exp'' := TExpPrimOp("closure-new", CLOSURE(), <conc> (funvars, freevars), firstname, exp')
      ; t' := <topdown(try(ConvertCall))> TExpFix(funs', exp'')
      |}

  nonescaping-call(|x, t', freevars) = rules(
    ConvertCall : TExpApp(TValueGlobal(x, t), vals) -> TExpApp(TValueGlobal(x, t'), <conc> (vals, freevars))
  )

  convert-closure-call : TExpApp(TValueVar(x, FUNCTION(t)), vals) ->
    TExpPrimOp("closure-read", funtype, [TValueVar(x, CLOSURE()), TValueInt("0")], x', TExpApp(TValueVar(x', funtype), vals'))
  with
    x' := <newname> x
  ; funtype := FUNCTION(<map(try(replace-funtype-by-closure))> [CLOSURE()|t])
  ; vals' := [TValueVar(x, CLOSURE())|vals]

  convert-fun(var-to-read-exp|) : TFun(name, t, args, body) -> (TValueGlobal(name', t'), TFun(name', t', args', body'))
  with
    name' := <newname> name
  ; args' := [name|args]
  ; freevars := <find-free-vars(|args')> body
  ; (freenames, freetypes) := <map(\TValueVar(n, t) -> (n, t)\); unzip> freevars
  ; body' := <foldr(!body, \(v, c) -> <var-to-read-exp> (name, v, c)\)> freenames
  ; t' := <\FUNCTION(x) -> FUNCTION(<map(try(replace-funtype-by-closure))> [CLOSURE()|x])\> t
  ; rules(
      ConvertCall : TExpApp(v@TValueVar(name, type), vals) -> TExpApp(TValueGlobal(name', t'), [v|vals])
    )

  var-to-read-op(|funs, vars) : (name, v, c) -> TExpPrimOp("closure-offset", CLOSURE(), [TValueVar(name, CLOSURE()), n], v, c)
  where idx := <fun-get-index(|funs)> v
  with
    offset := <fun-get-index(|funs)> name
  ; n := TValueInt(<subti ; int-to-string> (idx, offset))
  var-to-read-op(|funs, vars) : (name, v, c) -> TExpPrimOp("closure-read", type, [TValueVar(name, CLOSURE()), n], v, c)
  where (idx, type) := <var-get-index-type(|funs, vars)> v
  with
    offset := <fun-get-index(|funs)> name
  ; n := TValueInt(<subti ; int-to-string> (idx, offset))

  fun-get-index(|funs) : v -> n
  where n := <get-index0(?v)> funs
  var-get-index-type(|funs, vars) : v -> (n, <try(replace-funtype-by-closure)> type)
  where n := <addi> (<length> funs, <get-index0(?TValueVar(v, type))> vars)

  find-free-vars(|usedVars) : TValueInt(_) -> []
  find-free-vars(|usedVars) : TValueString(_) -> []
  find-free-vars(|usedVars) : TValueGlobal(_, _) -> []
  find-free-vars(|usedVars) : TValueVar(x, _) -> []
    where <elem> (x, usedVars)
  find-free-vars(|usedVars) : t@TValueVar(x, _) -> [t]
  find-free-vars(|usedVars) : THole() -> []
  find-free-vars(|usedVars) : TExpApp(v, vs) ->
    <foldr(![], union, find-free-vars(|usedVars))> [v|vs]
  find-free-vars(|usedVars) : TExpFix(funs, exp) -> freeVars
    with
      newVars := <map(\TFun(x, _, _, _) -> x\)> funs
    ; usedVars' := <conc> (usedVars, newVars)
    ; freeVars := <foldr(![], union, find-free-vars(|usedVars'))> [exp|funs]
  find-free-vars(|usedVars) : TFun(name, _, args, body) -> freeVars
    with
      usedVars' := <conc> ([name|args], usedVars)
    ; freeVars := <find-free-vars(|usedVars')> body
  find-free-vars(|usedVars) : TExpPrimOp(_, _, vals, newVar, exp) -> <union> (a, b)
    with
      a := <foldr(![], union, find-free-vars(|usedVars))> vals
    ; b := <find-free-vars(|[newVar|usedVars])> exp
  find-free-vars(|usedVars) : TExpTerminatingPrimOp(_, vals) ->
    <foldr(![], union, find-free-vars(|usedVars))> vals
  find-free-vars(|usedVars) : TExpConditionalPrimOp(_, vals, exp1, exp2) ->
    <foldr(![], union, find-free-vars(|usedVars))> [exp1, exp2|vals]
  find-free-vars(|usedVars) : TExpLet(binds, exp) -> <find-free-vars(|newVars)> exp
    with
      extraVars := <map(\TBind(x, _) -> x\)> binds
    ; newVars := <conc> (usedVars, extraVars)

  extract-funs : TProgram(exp) -> TProgram(TExpFix(funs, exp'))
    with {| Functions
    : exp' := <bottomup(try(collect-funs))> exp
    ; funs := <(bagof-Functions <+ ![])> ()
    |}

  collect-funs : fix@TExpFix(funs, exp) -> exp
    with <map(\x -> x with rules(Functions :+ _ -> x)\)> funs

  replace-funtype-by-closure : FUNCTION(_) -> CLOSURE()
  replace-all-funtypes = rec x(try(sometd(
     \TExpApp(fun, args) -> TExpApp(fun, <x> args)\
  <+ \TValueVar(v, FUNCTION(_)) -> TValueVar(v, CLOSURE())\
  <+ \TExpPrimOp(name, FUNCTION(_), args, result, body) -> TExpPrimOp(name, CLOSURE(), <x> args, result, <x> body)\
  )))

  annotate-offsets : TExpFix(funs, body) -> TExpFix(funs', body)
  with
    let annotate-offset(|i) = \TFun(x, type, args, body) -> TFunOffset(x, <int-to-string> i, type, args, body)\ in
      funs' := <nmap(annotate-offset|0)> funs
    end

