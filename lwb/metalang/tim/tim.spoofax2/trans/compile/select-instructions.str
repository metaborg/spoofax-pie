module compile/select-instructions

imports

  signatures/tim/-
  signatures/tim-sig
  signatures/llvm/-
  signatures/llvm-sig
  compile/ast
  compile/string

rules

  select-instructions : TProgram(TExpLet(globals, TExpFix(funs, body))) ->
    LLVMProgram(<concat> [
      <map(select-constant)> globals
    , <map(select-function)> funs
    , [<select-function> TFun("start", FUNCTION([]), [], body)]
    ])
  select-instructions : TProgram(body) -> 
    <select-function> TFun("start", FUNCTION([]), [], body)
  
  select-constant : TBind(var, TValueString(value)) ->
    GlobalDef(Constant(var), Private(), [UnnamedAddr(), AddrSpace("1"), Constant()], type, String(str))
  with
    (length, str) := <process-string> value
  ; type := Array(<int-to-string> length, Int8())
  
  select-function : TFun(name, FUNCTION(argTypes), args, body) ->
    FunDef(Private(), TailCConv(), Void(), Constant(name), args', [NoUnwind(), GCLeafFunction(), GC("\"statepoint-example\"")], blocks)
  with {| Blocks
  : args' := <select-args> (argTypes, args)
  ; (stmts, term) := <select-exp> body
  ; mainblock := Block(NoLabel(), stmts, term)
  ; otherblocks := <bagof-Blocks> ()
  ; blocks := [mainblock|otherblocks]
  |}

  select-args = zip ; map(\(type, arg) -> ParamNamed(<get-type> type, Variable(arg), [])\)

  select-call-args = map(\arg -> TypedAtom(<get-type> arg, <select-value> arg)\)

  create-block(|label) : body -> ()
  with
    (stmts, term) := <select-exp> body
  ; rules(Blocks :+ () -> Block(label, stmts, term))

  select-exp : TExpPrimOp(op, type, args, result, cont) ->
    (<conc> (stmts1, stmts2), term)
  with
    stmts1 := <select-primop(|Variable(result))> (op, type, args)
  ; (stmts2, term) := <select-exp> cont
  
  select-exp : TExpTerminatingPrimOp(op, args) ->
    <select-terminating-primop> (op, args)
  
  select-exp : TExpConditionalPrimOp(op, [a1, a2], b1, b2) ->
    ( [Assign(tmp, ICmp(cond, Int64(), <select-value> a1, <select-value> a2))]
    , BrCond(TypedAtom(Bool(), VarAtom(tmp)), VarAtom(Variable(l1)), VarAtom(Variable(l2)))
    )
  where cond := <select-int-condition> op
  with
    tmp := Variable(<newname> "result")
  ; l1 := <newname> "If"
  ; l2 := <newname> "Else"
  ; <create-block(|Label(l1))> b1
  ; <create-block(|Label(l2))> b2
  select-exp : TExpConditionalPrimOp(op, args, b1, b2) -> ()
  where with(fail|"String comparison not yet implemented")  // TODO
  
  select-exp : TExpApp(x, args) ->
    ( [ Expression(Call(DefaultTail(), TailCConv(), Void(), <select-value> x, <select-call-args> args, [], NoOperandBundles()))]
    , RetVoid()
    )
    // TODO: restore tail calling
  
  select-exp = with(fail|$[unsupported exp])

  select-int-condition : "int-eq" -> Equal()
  select-int-condition : "int-neq" -> NotEqual()
  select-int-condition : "int-leq" -> SignedLessEqual()
  select-int-condition : "int-geq" -> SignedGreaterEqual()
  select-int-condition : "int-lt" -> SignedLessThan()
  select-int-condition : "int-gt" -> SignedGreaterThan()

  // Integer primops
  select-primop(|result) : ("int-neg", _, [a]) ->
    [Assign(result, BinaryOp(Sub(), [NoSignedWrap()], Int64(), Literal(Int("0")), <select-value> a))]
  select-primop(|result) : ("int-add", _, [a, b]) ->
    [Assign(result, BinaryOp(Add(), [NoSignedWrap()], Int64(), <select-value> a, <select-value> b))]
  select-primop(|result) : ("int-sub", _, [a, b]) ->
    [Assign(result, BinaryOp(Sub(), [NoSignedWrap()], Int64(), <select-value> a, <select-value> b))]
  select-primop(|result) : ("int-mul", _, [a, b]) ->
    [Assign(result, BinaryOp(Mul(), [NoSignedWrap()], Int64(), <select-value> a, <select-value> b))]
  select-primop(|result) : ("int-div", _, [a, b]) ->
    [Assign(result, BinaryOp(SDiv(), [], Int64(), <select-value> a, <select-value> b))]

  // References
  select-primop(|result) : ("ref-new", t, [v]) ->
    [ Assign(result, Call(
        DefaultTail()
      , DefaultCConv()
      , <get-type> t
      , ConstAtom(Constant("gc_alloc"))
      , [TypedAtom(Int64(), Literal(Int("8")))]
      , [], NoOperandBundles())
      )
    , Expression(Store(<select-typed-value> v, TypedAtom(<get-type> t, VarAtom(result))))
    ]
  select-primop(|result) : ("ref-fetch", t, [ref]) ->
    [ Assign(result, Load(<get-type> t, <select-typed-value> ref)) ]
  select-primop(|result) : ("ref-store", t, [ref, v]) ->
    [ Expression(Store(<select-typed-value> v, <select-typed-value> ref)) ]

  // Records
  // TODO: restore functionality of arguments to record-new
  select-primop(|result) : ("record-new", t, []) ->
    [Assign(
       result
     , Call(
         DefaultTail()
       , DefaultCConv()
       , Function(<get-type> t, [ParamUnnamed(Int64(), [])])
       , ConstAtom(Constant("record_new"))
       , [TypedAtom(Int64(), Literal(Int("0")))]
       , []
       , NoOperandBundles()
       )
     )]
//  select-primop(|result) : ("record-new", t, args) ->
//    [Assign(
//       result
//     , Call(
//         DefaultTail()
//       , DefaultCConv()
//       , Function(<get-type> t, [ParamUnnamed(Int64(), []), Vararg()])
//       , ConstAtom(Constant("record_new"))
//       , [TypedAtom(Int64(), Literal(Int(count)))|<select-call-args> args]
//       , []
//       , NoOperandBundles()
//       )
//     )]
//  with count := <divi ; int-to-string> (<length> args, 2)

  select-funcall-primop : ("record-write", INT()) -> ("record_write", Void())
  select-funcall-primop : ("record-read", t@INT()) -> ("record_read", <get-type> t)
  
  select-funcall-primop : ("record-write", _) -> ("record_write_ptr", Void())
  select-funcall-primop : ("record-read", t) -> ("record_read_ptr", <get-type> t)
  
  // Arrays
  select-primop(|result) : ("array-new", t, args) ->
    <concat> [
      [ Assign(sizepvar, GetElementPtr(Int64(), [TypedAtom(Pointer(), Literal(Null())), allocLen]))
      , Assign(sizevar, PtrToInt(TypedAtom(Pointer(), VarAtom(sizepvar)), Int64()))
      , Assign(result, Call(
          DefaultTail()
        , DefaultCConv()
        , <get-type> t
        , ConstAtom(Constant("gc_alloc"))
        , [TypedAtom(Int64(), VarAtom(sizevar))]
        , []
        , NoOperandBundles()
        ))
      , Expression(Store(arrLen, TypedAtom(PointerAddrSpace("1"), VarAtom(result))))
      ]
    , stores
    ]
  with
    len := <length> args
  ; fulllen := <addi> (len, 1)
  ; allocLen := TypedAtom(Int64(), Literal(Int(<int-to-string> fulllen)))
  ; arrLen := TypedAtom(Int64(), Literal(Int(<int-to-string> len)))
  ; sizepvar := Variable(<newname> "sizep")
  ; sizevar := Variable(<newname> "size")
  ; let apply(|i) = array-new-store(|result, i) in
      stores := <nmap(apply|1) ; concat> args
    end

  array-new-store(|arr, i) : v ->
    [ Assign(offset, GetElementPtr(Int64(), [arr', i']))
    , Expression(Store(<select-typed-value> v, TypedAtom(PointerAddrSpace("1"), VarAtom(offset))))
    ]
  with
    offset := Variable(<newname> "offset")
  ; arr' := TypedAtom(PointerAddrSpace("1"), VarAtom(arr))
  ; i' := TypedAtom(Int64(), Literal(Int(<int-to-string> i)))
  
  select-primop(|result) : ("array-read", t, [arr, index]) ->
    [ Assign(offset, GetElementPtr(Struct([Int64(), Array("0", <get-type> t)]), [<select-typed-value> arr, TypedAtom(Int32(), Literal(Int("0"))), TypedAtom(Int32(), Literal(Int("1"))), <select-typed-value> index]))
    , Assign(result, Load(<get-type> t, TypedAtom(PointerAddrSpace("1"), VarAtom(offset))))
    ]
  with
    offset := Variable(<newname> "offset")
  
  select-primop(|result) : ("array-write", _, [arr, index, value]) ->
    [ Assign(offset, GetElementPtr(Struct([Int64(), Array("0", <get-type> value)]), [<select-typed-value> arr, TypedAtom(Int32(), Literal(Int("0"))), TypedAtom(Int32(), Literal(Int("1"))), <select-typed-value> index]))
    , Expression(Store(<select-typed-value> value, TypedAtom(PointerAddrSpace("1"), VarAtom(offset))))
    ]
  with
    offset := Variable(<newname> "offset")
  
  select-primop(|result) : ("array-length", _, [arr]) ->
    [ Assign(result, Load(Int64(), <select-typed-value> arr))
    ]

  select-funcall-primop : ("array-concat", t) -> ("array_concat", <get-type> t)
  select-funcall-primop : ("array-tail", t) -> ("array_tail", <get-type> t)

  // Closures
  select-primop(|result) : ("closure-new", _, args) ->
    <concat> [
      [ Assign(sizepvar, GetElementPtr(Int64(), [TypedAtom(Pointer(), Literal(Null())), n]))
      , Assign(sizevar, PtrToInt(TypedAtom(Pointer(), VarAtom(sizepvar)), Int64()))
      , Assign(result, Call(
          DefaultTail()
        , DefaultCConv()
        , PointerAddrSpace("1")
        , ConstAtom(Constant("gc_alloc"))
        , [TypedAtom(Int64(), VarAtom(sizevar))]
        , []
        , NoOperandBundles()
        ))
      ]
    , stores
    ]
  with
    n := TypedAtom(Int64(), Literal(Int(<length ; int-to-string> args)))
  ; sizepvar := Variable(<newname> "sizep")
  ; sizevar := Variable(<newname> "size")
  ; let apply(|i) = array-new-store(|result, i) in
      stores := <nmap(apply|0) ; concat> args
    end

  closure-new-store(|arr, i) : v ->
    [ Assign(offset, GetElementPtr(Int64(), [arr', i']))
    , Expression(Store(<select-typed-value> v, TypedAtom(PointerAddrSpace("1"), VarAtom(offset))))
    ]
  with
    offset := Variable(<newname> "offset")
  ; arr' := TypedAtom(PointerAddrSpace("1"), VarAtom(arr))
  ; i' := TypedAtom(Int64(), Literal(Int(<int-to-string> i)))
  
  select-primop(|result) : ("closure-read", t, [arr, index]) ->
    [ Assign(offset, GetElementPtr(Int64(), [<select-typed-value> arr, <select-typed-value> index]))
    , Assign(result, Load(<get-type> t, TypedAtom(PointerAddrSpace("1"), VarAtom(offset))))
    ]
  with
    offset := Variable(<newname> "offset")
  
  select-primop(|result) : ("closure-offset", _, [arr, index]) ->
    [Assign(result, GetElementPtr(Int64(), [<select-typed-value> arr, <select-typed-value> index]))]

  // Print
  select-primop(|result) : ("print", INT(), [a]) ->
    [ Expression(
        Call(
          DefaultTail()
        , DefaultCConv()
        , Function(Int32(), [ParamUnnamed(Pointer(), []), Vararg()])
        , ConstAtom(Constant("printf"))
        , [ TypedAtom(Pointer(), ConstAtom(Constant(".int_fmt")))
          , <select-typed-value> a
          ]
        , []
        , NoOperandBundles()
        )
      )
    ]
  select-primop(|result) : ("print", STRING(), [a]) ->
    [ Assign(tmp, AddrSpaceCast(<select-typed-value> a, Pointer()))
    , Expression(
        Call(
          DefaultTail()
        , DefaultCConv()
        , Function(Int32(), [ParamUnnamed(Pointer(), []), Vararg()])
        , ConstAtom(Constant("printf"))
        , [ TypedAtom(Pointer(), ConstAtom(Constant(".str_fmt")))
          , TypedAtom(Pointer(), VarAtom(tmp))
          ]
        , []
        , NoOperandBundles()
        )
      )
    ]
    with
      tmp := Variable(<newname> "str")
  select-primop(|result) : ("print", _, [a]) ->
    <with(fail|"Could not determine print type at compile time")>

  // Strings
  select-primop(|result) : ("str-length", _, [str]) ->
    [ Assign(result, Call(
        DefaultTail()
      , DefaultCConv()
      , Int64()
      , ConstAtom(Constant("strlen"))
      , [<select-typed-value> str]
      , []
      , NoOperandBundles()
      ))
    ]
  with
    tmp := Variable(<newname> "ptr")
  select-funcall-primop : ("str-add", t) -> ("string_concat", <get-type> t)
  select-funcall-primop : ("str-index", t) -> ("string_index", <get-type> t)
  select-funcall-primop : ("int-to-string", t) -> ("int_to_string", <get-type> t)

  // Generic function call primops
  select-primop(|result) : (func, t, args) -> 
    [Expression(
       Call(
         DefaultTail()
       , DefaultCConv()
       , t'
       , ConstAtom(Constant(func'))
       , <select-call-args> args
       , []
       , NoOperandBundles()
       )
     )]
  where (func', t'@Void()) := <select-funcall-primop> (func, t)
  select-primop(|result) : (func, t, args) -> 
    [Assign(
       result
     , Call(
         DefaultTail()
       , DefaultCConv()
       , t'
       , ConstAtom(Constant(func'))
       , <select-call-args> args
       , []
       , NoOperandBundles()
       )
     )]
  where (func', t') := <select-funcall-primop> (func, t)

  // Exit
  select-terminating-primop : ("exit", []) -> 
    ( [Expression(Call(DefaultTail(), DefaultCConv(), Void(), ConstAtom(Constant("exit")), [TypedAtom(Int32(), Literal(Int("0")))], [NoReturn()], NoOperandBundles()))]
    , Unreachable()
    )

  select-typed-value : x -> TypedAtom(type, atom)
  with
    type := <get-type> x
  ; atom := <select-value> x

  select-value : TValueVar(x, _) -> VarAtom(Variable(x))
  select-value : TValueGlobal(x, _) -> ConstAtom(Constant(x))
  select-value : TValueInt(x) -> Literal(Int(x))
  select-value : TValueString(x) -> Literal(String(x))

  get-type : TValueVar(_, t) -> <get-type> t
  get-type : TValueGlobal(_, t) -> <get-type> t
  get-type : TValueInt(_) -> Int64()
  get-type : TValueString(_) -> PointerAddrSpace("1")
  
  get-type : INT() -> Int64()
  get-type : FUNCTION(_) -> Pointer()
  get-type : _ -> PointerAddrSpace("1")
