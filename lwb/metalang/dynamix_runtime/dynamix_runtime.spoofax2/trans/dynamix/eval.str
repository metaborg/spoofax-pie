module dynamix/eval

imports
  // strategolib
  libstratego-lib

  signatures/dynamix-sig
  signatures/dynamix-ext-sig
  signatures/dynamix/common-sig
  signatures/dynamix/source-sig
  signatures/dynamix/meta-sig
  signatures/tim/common-sig
  signatures/tim/exp-sig

  tim/pp

  libspoofax/stratego/debug

  statix/api

  dynamix/scope

// Sort used to represent the value of some entry at runtime.
// Roughly equivalent to TValue, except that functions are first-class
// and that we do not support references to labels.
signature
  sorts MRuntimeValue
  constructors
    // a source term
    MRuntimeQuote : STerm -> MRuntimeValue

    // a delayed CPS instantiation of the given term
    // the first argument is a list of either a single argument
    // (in the cases that there exists some value), or an empty list
    // only valid runtime values here are MRuntimeValues and MRuntimeMetaLists
    MRuntimeHoly : List(MRuntimeValue) * TExp -> MRuntimeValue

    // a directly accessible CPS value. the value may not be legal
    // in all contexts (such as when the value represents a variable)
    MRuntimeValue : TValue -> MRuntimeValue

    // a CPS expression that has now been finalized, because we have
    // filled in the last hole with a tail call or some other expression
    // that causes control flow to continue at a separate place
    MRuntimeCPSFinalized : TExp -> MRuntimeValue

    // A list at the meta level of the language.
    MRuntimeMetaList : List(TValue) -> MRuntimeValue

// Program evaluation
rules
  // dx--eval-program-rule(|string) :: DynamixProgram * ? -> TExp
  dx--eval-program-rule(|ruleName): (inp, term) -> ret'
    where {| MRule, MStackTrace, MGlobal:
      <dx--init-trace> ();
      stripped := <strip-annos> inp;
      <dx--declare-mrules> stripped;
      runtimeTerm := <dx--quoted-to-runtime> term;
      ret := <dx--call-function> (ruleName, [runtimeTerm]);
      ret' := <dx--finalize> ret
    |}

  // dx--eval-program-examples :: DynamixProgram -> string
  dx--eval-program-examples: inp -> ret
    where {| MRule, MStackTrace:
      <dx--init-trace> ();
      stripped := <strip-annos> inp;
      <dx--declare-mrules> stripped;
      ret := <dx--eval-examples; concat-strings> stripped
    |}

  // dx--declare-mrules :: Start -> Start
  dx--declare-mrules: p@DynamixProgram(_, decls) -> p
    with <
      reverse;
      map(try(dx--declare-rules))
    > decls

  // dx--declare-rules :: MSection -> MSection
  dx--declare-rules: n@MSectionRules(r) -> n
    where <reverse; filter(dx--declare-rule)> r

  // dx--declare-rule :: MRuleDecl -> MRuleDecl
  dx--declare-rule: p@MRuleDecl(n, _, _) -> p
    where rules(MRule :+ n -> p)

  // dx--eval-examples :: Start -> List(string)
  dx--eval-examples = ?DynamixProgram(_, x); !x; filter(dx--eval-example)

  // dx--eval-example :: MSection -> string
  dx--eval-example: MSectionExample(expr) -> <strcat> (<pp-partial-tim-string> exp, "\n\n")
    with ret := <dx--eval-expr(|<dx--scope-new>)> expr
    with exp := <dx--finalize> ret

// Finalizing example
rules
  // dx--finalize :: MRuntimeValue -> TExp
  dx--finalize: MRuntimeHoly(_, ctx) -> <dx--plug(|TExpTerminatingPrimOp("exit", []))> ctx
  dx--finalize: MRuntimeCPSFinalized(ctx) -> ctx
  // dx--finalize: MRuntimeValue(v) -> TExpPrimOp0(TPrimOpPrint(), [v])
  dx--finalize = dx--fail-msg(|"Unable to represent this value as a CPS term: ")

// Expression evaluation
rules
  // dx--eval-expr(|MScope) :: MExpr -> MRuntimeValue
  dx--eval-expr(|scope) = ppdebug(|"dx--eval-expr: "); dx--eval-expr-(|scope)

  // source language operations
  dx--eval-expr-(|scope): MExprQuote(term) -> MRuntimeQuote(term)

  // meta language operations
  dx--eval-expr-(|scope): MExprVar(x) -> <dx--scope-get(|x)> scope
  dx--eval-expr-(|scope): MExprGlobal(x) -> <MGlobal <+ dx--fail-msg(|$[Use of global [x] before assignment.])> x
  dx--eval-expr-(|scope): MExprBlock(exprs) -> <dx--eval-block-stmts(|scope')> exprs
    with scope' := <dx--scope-push> scope

  dx--eval-expr-(|scope): MExprCall(name, args) -> ret
    with
      args' := <map(dx--eval-expr(|scope))> args;
      ret := <dx--call-function> (name, args')

  dx--eval-expr-(|scope): MExprLabeled1(body, labelName) -> ret
    with
      continuationName := <newname> "k";
      argumentName := <newname> "a";

      // bind continuation label in body
      scope' := <dx--scope-push> scope;
      <dx--scope-set(|labelName, MRuntimeValue(TValueVar(continuationName)))> scope';
      bodye := <dx--eval-expr(|scope')> body;

      // check if we received a tail-calling expression
      if <?MRuntimeCPSFinalized(fin)> bodye then
        ret := MRuntimeHoly([MRuntimeValue(TValueVar(argumentName))], TExpFix([
          TFun(continuationName, [argumentName], THole())
        ], fin))
      else
        <dx--fail-msg(|"Expected the pre-body of a label to always tail-call, but got: ")> bodye
      end

  dx--eval-expr-(|scope): MExprLabeled0(body, labelName) -> ret
    with
      continuationName := <newname> "k";

      // bind continuation label in body
      scope' := <dx--scope-push> scope;
      <dx--scope-set(|labelName, MRuntimeValue(TValueVar(continuationName)))> scope';
      bodye := <dx--eval-expr(|scope')> body;

      // check if we received a tail-calling expression
      if <?MRuntimeCPSFinalized(fin)> bodye then
        ret := MRuntimeHoly([], TExpFix([
          TFun(continuationName, [], THole())
        ], fin))
      else
        <dx--fail-msg(|"Expected the pre-body of a label to always tail-call, but got: ")> bodye
      end

  dx--eval-expr-(|scope): MExprSourceIntToTargetInt(v) -> MRuntimeValue(tv')
    with MRuntimeQuote(tv) := <dx--eval-expr(|scope)> v
    with tv' := <dx--coerce-source-to-tint> tv
  dx--eval-expr-(|scope): MExprSourceVarToTargetVar(v) -> MRuntimeValue(TValueVar(tv'))
    with tv := <dx--eval-expr(|scope); dx--assert-source-string(|"var() argument must be a string")> v
    with tv' := <unquote(?'"')> tv // typed stratego bug, doesn't think UID and TID are the same
  dx--eval-expr-(|scope): MExprSourceStrToTargetStr(v) -> MRuntimeValue(TValueString(tv))
    with tv := <dx--eval-expr(|scope); dx--assert-source-string(|"str() argument must be a string"); unquote(?'"'); escape; double-quote> v
  dx--eval-expr-(|scope): MExprConcatenateStr(l, r) -> MRuntimeQuote(STermString(out))
    with l' := <dx--eval-expr(|scope); dx--assert-source-string(|"left-hand of string concatenation must be a string")> l
    with r' := <dx--eval-expr(|scope); dx--assert-source-string(|"right-hand of string concatenation must be a string")> r
    with out := $["[<unquote(?'"')> l'][<unquote(?'"')> r']"]
  dx--eval-expr-(|scope): MExprFreshNamedTargetVar(p) -> MRuntimeValue(TValueVar(<newname> p))

  dx--eval-expr-(|scope): MExprList(args) -> MRuntimeMetaList(args')
    with args' := <map(dx--eval-expr(|scope); dx--assert-runtime-value(|"Meta-list must be constructed from a value, not: "))> args
  dx--eval-expr-(|scope): MExprListCons(args, list) -> MRuntimeMetaList(<conc> (args', list'))
    with args' := <map(dx--eval-expr(|scope); dx--assert-runtime-value(|"Meta-list must be constructed from a value, not: "))> args
    with list' := <dx--eval-expr(|scope); dx--assert-target-metalist(|"Second argument to cons must be a meta-list, not: ")> list
  dx--eval-expr-(|scope): MExprConcatList(l, r) -> MRuntimeMetaList(<conc> (left', right'))
    with left' := <dx--eval-expr(|scope); dx--assert-target-metalist(|"Left argument to concat must be a meta-list, not: ")> l
    with right' := <dx--eval-expr(|scope); dx--assert-target-metalist(|"Right argument to concat must be a meta-list, not: ")> r

  // todo: continuation argument composition? currently force values
  dx--eval-expr-(|scope): MExprContinueAt(tgt, args) -> MRuntimeCPSFinalized(TExpApp(tgtf, argvs))
    with
      tgtf := <dx--eval-expr(|scope); dx--assert-runtime-value(|"Can only call named functions: ")> tgt;
      argvs := <dx--eval-expr(|scope); dx--assert-target-metalist(|"Arguments to a continuation invocation must be a meta-list: ")> args

  dx--eval-expr-(|scope): MExprScopedGlobals(bindings, body) -> ret
    with
      // eval all binding first to allow idiomatic swapping
      evald := <dx--eval-global-bindings(|scope)> bindings;
      {| MGlobal:
        <map({ n, v: ?(n, v); rules(MGlobal: n -> v) })> evald;
        ret := <dx--eval-expr(|scope)> body
      |}

  dx--eval-expr-(|scope): MExprConstraintAnalyzerProperty(prop, e) -> ret
    with
      source := <dx--eval-expr(|scope); dx--assert-quoted(|"Argument passed to constraint-analyzer property lookup is not a source term: ")> e;
      ret := <dx--get-constraint-property(|prop)> source

  // dx--get-constraint-property(|string) :: STerm -> ?
  // need to special-case for type and ref, due to Statix being annoying :(
  dx--get-constraint-property(|"type"): term -> val
    with
      a := <stx-get-ast-analysis <+ dx--fail-msg(|"Cannot get constraint-analyzer property on source term without analysis information.")> term;
      val := <(stx-get-ast-type(|a) <+ dx--fail-msg(|"Term does not have a `type` annotation attached to it.")); dx--quoted-to-runtime> term
  dx--get-constraint-property(|"ref"): term -> val
    with
      a := <stx-get-ast-analysis <+ dx--fail-msg(|"Cannot get constraint-analyzer property on source term without analysis information.")> term;
      val := <(stx-get-ast-ref(|a) <+ dx--fail-msg(|"Term does not have a `ref` annotation attached to it.")); dx--quoted-to-runtime> term
  dx--get-constraint-property(|prop): term -> val
    with
      a := <stx-get-ast-analysis <+ dx--fail-msg(|"Cannot get constraint-analyzer property on source term without analysis information.")> term;
      val := <(stx-get-ast-property(|a, prop) <+ dx--fail-msg(|$[Term does not have a `[prop]` annotation attached to it.])); dx--quoted-to-runtime> term

  // dx--eval-global-bindings(|MScope) :: List(MScopedGlobalBinding) -> List(string * MRuntimeValue)
  dx--eval-global-bindings(|scope) = map({ n, v:
    ?MScopedGlobalBinding(n, v);
    !(n, <dx--eval-expr(|scope)> v)
  })

  dx--eval-continuation-arg(s): a -> ret
    with
      v := <s> a;
      ret := <dx--assert-runtime-value(|"Expected continuation argument to be a value: ")> v

  // target language ops
  dx--eval-expr-(|scope): MExprCallPrimitive(op, args) -> MRuntimeHoly([MRuntimeValue(TValueVar(y))], TExpPrimOp(op, v, y, THole()))
    with v := <map(dx--eval-expr(|scope)); dx--assert-runtime-values-or-metalists> args
    with <newname> "y" => y
  dx--eval-expr-(|scope): MExprConditionalPrimitive(primop, args, then, else) -> MRuntimeCPSFinalized(
    TExpConditionalPrimOp(primop, args', then', else')
  )
    with
      args' := <map(dx--eval-expr(|scope)); dx--assert-runtime-values-or-metalists> args;
      then' := <dx--eval-expr(|scope); dx--assert-tail-call(|"If statement body must be a tail-call: ")> then;
      else' := <dx--eval-expr(|scope); dx--assert-tail-call(|"If statement body must be a tail-call: ")> else
  dx--eval-expr-(|scope): MExprTLet(name, val, body) -> <dx--compose-cps-values> (
    MRuntimeHoly([], TExpLet([TBind(x, val')], THole())),
    res
  )
    with
      x := <dx--eval-expr(|scope); dx--assert-target-var(|"Name of a let binding must be a target var, not: ")> name;
      val' := <dx--eval-expr(|scope); dx--assert-runtime-value(|"Value of let-stmt must be a value: ")> val;
      res := <dx--eval-expr(|scope)> body
  dx--eval-expr-(|scope): MExprHole() -> MRuntimeHoly([], THole())
  dx--eval-expr-(|scope): MExprTFix(funs) -> MRuntimeHoly([], TExpFix(tfuns, THole()))
    with
      tfuns := <map(dx--eval-tfun(|scope))> funs
  dx--eval-expr-(|scope): MExprQuoteTarget(lit) -> MRuntimeHoly([], lit)
    with <oncetd(?THole()) <+ dx--fail-msg(|"Must have a hole in a target language literal.")> lit

  // dx--eval-tfun(|MScope) :: MTFun -> TFun
  dx--eval-tfun(|scope): MTFun(name, args, body) -> TFun(name', args', body')
    with
      name' := <dx--eval-expr(|scope); dx--assert-target-var(|"Function name must be a value: ")> name;
      args' := <
        dx--eval-expr(|scope);
        dx--assert-target-metalist(|"Function args must be a meta-list: ");
        map(dx--assert-tvar(|"Argument must be a var name: "))
      > args;
      body' := <dx--eval-expr(|scope); dx--assert-tail-call(|"Body of a function must end with a tail call: ")> body

  // dx--call-function :: (string, List(TRuntimeValue)) -> TRuntimeValue
  dx--call-function: (name, args) -> ret
    with
      (scope, MRuleDecl(fnname, _, body)) := <dx--find-rule> (name, args);
      <dx--push-trace> fnname;
      ret := <dx--eval-expr(|scope)> body;
      <dx--pop-trace> ()

  // convert an arbitrary aterm input into a quoted form
  // this operation preserves annotations on the term to ensure that
  // operations that require the annotations (in particular: statix)
  // can access them when needed. Those annotations will be moved to
  // the outside of the term (e.g. "foo"{a} -> STermString("foo"){a})
  // dx--quoted-to-runtime :: ? -> TRuntimeValue
  dx--quoted-to-runtime = bottomup(dx--quoted-term-to-runtime); !MRuntimeQuote(<id>)
  dx--quoted-term-to-runtime: x{a*} -> STermInt(<int-to-string> x){a*} where <is-int> x
  dx--quoted-term-to-runtime: x{a*} -> STermString($["[x]"]){a*} where <is-string> x
  dx--quoted-term-to-runtime: x{a*} -> STermList(x){a*} where <is-list> x
  dx--quoted-term-to-runtime: c#(a){an*} -> STermApp(c, a){an*}

// Evaluation helpers
rules
  // evaluate a list of block statements in the given scope
  // and make sure to take care of output composition
  // dx--eval-block-stmts(|MScope) :: List(MStatement) -> MRuntimeValue
  dx--eval-block-stmts(|scope): [stmt] -> <dx--eval-block-stmt(|scope)> stmt
  dx--eval-block-stmts(|scope): [s | rest@[_ | _]] -> res
    with s' := <dx--eval-block-stmt(|scope)> s // eval first
    with rest' := <dx--eval-block-stmts(|scope)> rest
    with res := <dx--compose-cps-values> (s', rest')

  // dx--eval-block-stmt(|MScope) :: MStatement -> MRuntimeValue
  dx--eval-block-stmt(|scope): MStatementExpr(e) -> <dx--eval-expr(|scope)> e
  dx--eval-block-stmt(|scope): MStatementAssign(name, val) -> e
    with e := <dx--eval-expr(|scope)> val
    with <dx--assign-bind(|name, scope)> e

  // dx--assert-runtime-values-or-metalists :: List(MRuntimeValue) -> List(TValue)
  dx--assert-runtime-values-or-metalists = map({ x, y:
    (?MRuntimeValue(x); ![x])
      <+ (?MRuntimeMetaList(y); !y)
      <+ dx--fail-msg(|"Expected runtime values or meta-lists")
  }); flatten-list

  // dx--assert-runtime-value(|string) :: MRuntimeValue -> TValue
  dx--assert-runtime-value(|msg): MRuntimeValue(tval) -> tval
  dx--assert-runtime-value(|msg) = dx--fail-msg(|msg)

  // dx--assert-quoted(|string) :: MRuntimeValue -> STerm
  dx--assert-quoted(|msg): MRuntimeQuote(s) -> s
  dx--assert-quoted(|msg) = dx--fail-msg(|msg)

  // dx--assert-tail-call(|string) :: MRuntimeValue -> TExp
  dx--assert-tail-call(|_): MRuntimeCPSFinalized(e) -> e
  dx--assert-tail-call(|msg) = dx--fail-msg(|msg)

  // dx--assert-target-var(|string) :: MRuntimeValue -> TID
  dx--assert-target-var(|_): MRuntimeValue(TValueVar(tvar)) -> tvar
  dx--assert-target-var(|msg) = dx--fail-msg(|msg)

  // dx--assert-source-string(|string) :: MRuntimeValue -> string
  dx--assert-source-string(|_): MRuntimeQuote(STermString(tvar)) -> tvar
  dx--assert-source-string(|msg) = dx--fail-msg(|msg)

  // dx--assert-target-metalist(|string) :: MRuntimeValue -> List(TValue)
  dx--assert-target-metalist(|_): MRuntimeMetaList(vs) -> vs
  dx--assert-target-metalist(|msg) = dx--fail-msg(|msg)

  // dx--assert-tvar(|string) :: TValue -> TID
  dx--assert-tvar(|_): TValueVar(vs) -> vs
  dx--assert-tvar(|msg) = dx--fail-msg(|msg)

  // dx--coerce-source-to-tint :: STerm -> TValue
  dx--coerce-source-to-tint: STermString(s) -> TValueInt(<unquote(?'"')> s)
  dx--coerce-source-to-tint: STermInt(s) -> TValueInt(s)
  dx--coerce-source-to-tint = dx--fail-msg(|"Cannot convert this term to a CPS integer: ")

// CPS value composition
// TODO: Check if this is sound now that we've introduced
// meta-lists into the language.
rules
  // dx--compose-cps-values :: MRuntimeValue * MRuntimeValue -> MRuntimeValue

  // dx--plug(|TExp) :: TExp -> TExp
  dx--plug(|x) = oncetd(\THole() -> x\)

  // a partially done CSP combined with a done CSP results in a done CSP
  // no need to forward the values since we can no longer access them from
  // the body anyway
  dx--compose-cps-values: (
    MRuntimeHoly(vals, exp),
    MRuntimeCPSFinalized(rest)
  ) -> MRuntimeCPSFinalized(<dx--plug(|rest)> exp)

  // todo: verify
  dx--compose-cps-values: (
    a@MRuntimeCPSFinalized(_),
    _
  ) -> a

  // a partial term combined with a partial term yields a new partial term
  // with the second expression inserted in the hole of the first expression
  dx--compose-cps-values: (
    MRuntimeHoly(vals1, exp1),
    MRuntimeHoly(vals2, exp2)
  ) -> MRuntimeHoly(vals2, <dx--plug(|exp2)> exp1)

  // a partial term combined with an immediate value is simply still the
  // partial term, but now linked with the value
  dx--compose-cps-values: (
    MRuntimeHoly(vals, exp),
    v@MRuntimeValue(_)
  ) -> MRuntimeHoly([v], exp)
  dx--compose-cps-values: (
    MRuntimeHoly(vals, exp),
    v@MRuntimeMetaList(_)
  ) -> MRuntimeHoly([v], exp)

  // combining a runtime value with a holy value simply results in the holy
  // value
  dx--compose-cps-values: (
    MRuntimeValue(_),
    holy@MRuntimeHoly(_, _)
  ) -> holy
  dx--compose-cps-values: (
    MRuntimeMetaList(_),
    holy@MRuntimeHoly(_, _)
  ) -> holy

  // A finalized term has no holes to be filled, and since we
  // don't need to fill any, we're all good.
  dx--compose-cps-values: (
    MRuntimeValue(_),
    fin@MRuntimeCPSFinalized(_)
  ) -> fin
  dx--compose-cps-values: (
    MRuntimeMetaList(_),
    fin@MRuntimeCPSFinalized(_)
  ) -> fin

  // all of these are side-effect free
  dx--compose-cps-values: (
    MRuntimeValue(_),
    v@MRuntimeValue(_)
  ) -> v
  dx--compose-cps-values: (
    MRuntimeValue(_),
    v@MRuntimeMetaList(_)
  ) -> v
  dx--compose-cps-values: (
    MRuntimeMetaList(_),
    v@MRuntimeValue(_)
  ) -> v
  dx--compose-cps-values: (
    MRuntimeMetaList(_),
    v@MRuntimeMetaList(_)
  ) -> v

  // the rest of the combinations are illegal
  // TODO: check if this is correct if we also have source terms
  dx--compose-cps-values: (
    a,
    b
  ) -> <dx--fail-msg(|"Invalid composition of CPS values: ")> (a, b)

  // dx--assign-bind(|string, MScope) :: MRuntimeValue -> ?
  dx--assign-bind(|name, scope): MRuntimeHoly([x], _) -> ()
    with <dx--scope-set(|name, x)> scope
  dx--assign-bind(|name, scope): v@MRuntimeValue(_) -> ()
    with <dx--scope-set(|name, v)> scope
  dx--assign-bind(|name, scope): v@MRuntimeMetaList(_) -> ()
    with <dx--scope-set(|name, v)> scope
  dx--assign-bind(|name, scope): v@MRuntimeQuote(_) -> ()
    with <dx--scope-set(|name, v)> scope
  dx--assign-bind(|name, scope): v@MRuntimeCPSFinalized(_) -> ()
    with <dx--fail-msg(|"Cannot bind term that has already been finalized: ")> v
  dx--assign-bind(|name, scope): v -> ()
    with <dx--fail-msg(|"Do not know how to assign value of type: ")> v

// Rule selection
rules
  // same as find-rule but will exit if not found
  // dx--find-rule :: string * List(MRuntimeValue) -> MScope * MRuleDecl
  dx--find-rule = ?(x, _); (dx--try-find-rule <+ dx--fail-msg(|$[Unable to find a matching [x] rule declaration.]))

  // dx--try-find-rule :: string * List(MRuntimeValue) -> MScope * MRuleDecl
  dx--try-find-rule: (name, args) -> matched
    where
      options := <bagof-MRule> name;
      matched := <getfirst(dx--match-rule(|args))> options

  // dx--match-rule(|List(MRuntimeValue)) :: MRuleDecl -> MScope * MRuleDecl
  dx--match-rule(|args): r@MRuleDecl(_, argPats, _) -> (scope, r)
    where
      dx--scope-new => scope;
      <zip(dx--match-pattern(|scope))> (argPats, args)

  // dx--match-pattern(|MScope) :: MPattern * MRuntimeValue -> ?
  dx--match-pattern(|_): (MPatternWildcard(), _) -> ()
  dx--match-pattern(|scope): (MPatternVariable(x), v) -> ()
    where
      existing := <dx--scope-get(|x)> scope;
      <eq> (existing, v)
  dx--match-pattern(|scope): (MPatternVariable(x), v) -> ()
    where <not(dx--scope-get(|x))> scope
    with <dx--scope-set(|x, v)> scope
  dx--match-pattern(|scope): (MPatternString(s), MRuntimeQuote(STermString(sv))) -> ()
    where <eq> (s, sv)
  dx--match-pattern(|scope): (MPatternConstructor(name, args), MRuntimeQuote(STermApp(name', argvs))) -> ()
    where <eq> (name, name')
    where <zip(dx--match-pattern(|scope))> (args, <map(!MRuntimeQuote(<id>))> argvs)
  dx--match-pattern(|scope): (MPatternList(argpats), MRuntimeQuote(STermList(argvs))) -> ()
    where <zip(dx--match-pattern(|scope))> (argpats, <map(!MRuntimeQuote(<id>))> argvs)
  dx--match-pattern(|scope): (MPatternListCons(argpats, restpat), MRuntimeQuote(STermList(args))) -> ()
    where (argvs, restv) := <split-at(|<length> argpats)> args
    where <zip(dx--match-pattern(|scope))> (argpats, <map(!MRuntimeQuote(<id>))> argvs)
    where <dx--match-pattern(|scope)> (restpat, MRuntimeQuote(STermList(restv)))
  dx--match-pattern(|scope): (MPatternBound(x, p), v) -> ()
    where <dx--match-pattern(|scope)> (p, v)
    where <not(dx--scope-get(|x))> scope // ensure not already bound in sub-pattern or adjacent pattern
    with <dx--scope-set(|x, v)> scope
//  dx--match-pattern(|_): (a, b) -> ()
//    where <ppdebug(|"Cannot unify these two patterns: ")> (a, b)
//    where <fail> ()

// Utils
rules
  // Pretty print the input term and write out the given message, then exit.
  // dx--fail-msg(|string) :: ? -> ?
  dx--fail-msg(|msg) =
    // error message
    ?x; err-msg(|msg); !x;

    // term
    ppdebug(|"== On term: ==\n");

    // trace
    MStackTrace;
    dx--join-to-string(id|"\n");
    debug(!"== Stack trace: ==\n   ");

    // exit
    !1; exit

  // dx--init-trace :: a -> a
  dx--init-trace: a -> a
    with rules(MStackTrace := [])

  // dx--push-trace :: string -> string
  dx--push-trace: s -> s
    with x := <MStackTrace> ()
    with rules(MStackTrace := [s|x])

  // dx--pop-trace :: a -> a
  dx--pop-trace: a -> a
    with [_|x] := <MStackTrace> ()
    with rules(MStackTrace := x)

  // dx--join-to-string(a -> string|string) :: List(a) -> string
  dx--join-to-string(s|sep) = map(s); !(<id>, ""); foldl(dx--conc(|sep))

  // dx--conc(|string) :: Tuple(string, string) -> string
  dx--conc(|sep): (a, "") -> a
  dx--conc(|sep): (a, b) -> $[[b][sep][a]]
