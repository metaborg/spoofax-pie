module dynamix/meta

imports
  dynamix/common
  dynamix/source
  dynamix/type
  tim/exp

context-free sorts MSection
context-free syntax
  MSection.MSectionImports = <
    imports
      <{MID "\n"}*>
  >

  MSection.MSectionSignature = <
    signature
      <{MSignatureDecl "\n\n"}*>
  >

  MSection.MSectionConstraintAnalyzer = <
    constraint-analyzer
      <{MConstraintPropertyDecl "\n"}*>
  >

  MSection.MSectionRules = <
    rules
      <{MRuleDecl "\n\n"}*>
  >

  MSection.MSectionExample = <
    example
      <MExpr>
  >

  MSection.MSectionPrimitives = <
    primitives
      <{MPrimitiveDecl "\n\n"}*>
  >

context-free sorts MPrimitiveDecl
context-free syntax
  MPrimitiveDecl.MPrimitiveDeclExpression = <expression #<PID>(<{MType ", "}*>)>
  MPrimitiveDecl.MPrimitiveDeclStatement = <statement #<PID>(<{MType ", "}*>)>
  MPrimitiveDecl.MPrimitiveDeclConditional = <conditional #<PID>(<{MType ", "}*>)>

context-free sorts MConstraintPropertyDecl
context-free syntax
  MConstraintPropertyDecl.MConstraintPropertyDecl = <property <ID> :: <MType>>

context-free sorts MSignatureDecl
context-free syntax
  MSignatureDecl.MSignatureSortsDecl = <
    sorts
      <{UID "\n"}*>
  >

  MSignatureDecl.MSignatureConstructorsDecl = <
    constructors
      <{MConstructorDecl "\n\n"}*>
  >

context-free sorts MConstructorDecl
context-free syntax
  MConstructorDecl.MConstructorDeclSingleton = <
    <UID> : <UID>
  >

  MConstructorDecl.MConstructorDeclInjection = [
    : [MConstructorArgument] -> [UID]
  ]

  MConstructorDecl.MConstructorDecl = [
    [UID] : [{MConstructorArgument " * "}+] -> [UID]
  ]

context-free sorts MRuleDecl
context-free syntax
  MRuleDecl.MRuleDeclSignature = <<RID> :: <MRuleSignature>>
  MRuleDecl.MRuleDeclGlobal = <<GID> :: <MType>>
  MRuleDecl.MRuleDecl = <<RID>(<{MPattern ", "}*>) = <MExpr>>

context-free sorts MPattern
context-free syntax
  MPattern.MPatternWildcard = <_>
  MPattern.MPatternVariable = <<LID>>
  MPattern.MPatternConstructor = <<UID>(<{MPattern ", "}*>)>
  MPattern.MPatternList = <[<{MPattern ", "}*>]>
  MPattern.MPatternString = <<STRING>>
  MPattern.MPatternInt = <<INT>>
  MPattern.MPatternListCons = <[<{MPattern ", "}*>|<MPattern>]>
  MPattern.MPatternBound = <<LID>@<MPattern>>

context-free sorts MExpr MStatement MTFun MScopedGlobalBinding
context-free syntax
  // source language operations
  MExpr.MExprQuote = <'<STerm>>

  // meta language operations
  MExpr.MExprVar = <<LID>>
  MExpr.MExprGlobal = <<GID>>
  MExpr.MExprBlock = <
    {
      <{MStatement "\n"}+>
    }
  > // TODO: force newlines between statements?
  MExpr.MExprLabeled1 = <
    <MExpr>
    label <LID>/1:
  >
  MExpr.MExprLabeled0 = <
    <MExpr>
    label <LID>/0:
  > // todo: some kind of named argument binding here? currently only 0 or 1 is supported
  MExpr.MExprCall = <<RID>(<{MExpr ", "}*>)>
  MExpr.MExprSourceIntToTargetInt = <int(<MExpr>)>
  MExpr.MExprSourceStrToTargetStr = <str(<MExpr>)>
  MExpr.MExprSourceVarToTargetVar = <var(<MExpr>)>
  MExpr.MExprConcatenateStr = <<MExpr> + <MExpr>>
  MExpr.MExprFreshNamedTargetVar = <fresh-var(<ID>)>
  MExpr.MExprContinueAt = <<MExpr>@(<MExpr>)>
  MExpr.MExprScopedGlobals = <
    with <{MScopedGlobalBinding ", "}+> do
      <MExpr>
  >

  MExpr.MExprList = <[<{MExpr ", "}*>]>
  MExpr.MExprListCons = <[<{MExpr ", "}*>|<MExpr>]>
  MExpr.MExprConcatList = <<MExpr> ++ <MExpr>> {left}
  // TODO:
  // MExpr.MExprWith = ...
  // MExpr.MExprSplice/Code?

  MStatement.MStatementAssign = [[LID] <- [MExpr]]
  MStatement.MStatementExpr = [[MExpr]]

  MScopedGlobalBinding.MScopedGlobalBinding = <<GID> = <MExpr>>

  // target language operations
  MExpr.MExprCallPrimitive = <#<PID>(<{MExpr ", "}*>)>
  MExpr.MExprQuoteTarget = <@<TExp>>

  MExpr.MExprTLet = [
    let [MExpr] = [MExpr] in
      [MExpr]
  ]

  MExpr.MExprHole = [hole]

  MTFun.MTFun = <
    fun <MExpr>(<MExpr>) =
      <MExpr>
  >
  MExpr.MExprTFix = [
    fix {
      [{MTFun "\n"}+]
    }
  ]
  MExpr.MExprConditionalPrimitive = [
    if #[PID]([{MExpr ", "}*]) then
      [MExpr]
    else
      [MExpr]
  ]

template options
  LID = keyword {reject}
  UID = keyword {reject}
  ID = keyword {reject}
  PID = keyword {reject}

context-free priorities
  MExpr.MExprContinueAt > MExpr.MExprTLet
