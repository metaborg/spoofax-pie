module evaluation/eval

imports
  signatures/common-sig
  signatures/dynamix-sig
  signatures/source-sig
  signatures/meta-sig
  signatures/tim/common-sig
  signatures/tim/exp-sig
  
  libspoofax/stratego/debug
  libstratego-gpp
  
  pp
  
  evaluation/scope
  
// Sort used to represent the value of some entry at runtime.
// Roughly equivalent to TValue, except that functions are first-class
// and that we do not support references to labels.
signature
  sorts MRuntimeValue
  constructors
    // a source term
    MRuntimeQuote : STerm -> MRuntimeValue
    
    // a delayed CPS instantiation of the given term
    // the first argument is a list of either a single argument
    // (in the cases that there exists some value), or an empty list
    // only valid runtime values here are MRuntimeValues and MRuntimeMetaLists
    MRuntimeHoly : List(MRuntimeValue) * TExp -> MRuntimeValue
    
    // a directly accessible CPS value. the value may not be legal
    // in all contexts (such as when the value represents a variable)
    MRuntimeValue : TValue -> MRuntimeValue
    
    // a CPS expression that has now been finalized, because we have
    // filled in the last hole with a tail call or some other expression
    // that causes control flow to continue at a separate place
    MRuntimeCPSFinalized : TExp -> MRuntimeValue
    
    // A list at the meta level of the language.
    MRuntimeMetaList : List(TValue) -> MRuntimeValue
    
// pp bugfix, need to insert an injection
// as the default typings are wrong
signature
  sorts BoxLiteral
  constructors
    : string -> BoxLiteral
  
// Program evaluation
rules
  dx--eval-program = eval-program
  dx--eval-input-term = eval-input-term
  
  // evaluate the given term as the sole input to the 
  // rule with the given (qualified) name
  // eval-input-term: Start * string * ? -> string
  eval-input-term: (program, rule, term) -> ret
    where {| MRule, MStackTrace:
      <init-trace> ();
      stripped := <strip-annos> program;
      <declare-mrules> stripped;
      evaluated := <eval-expr(|<scope-new>)> MExprCall(rule, [term]);
      ret := <finalize> evaluated
    |}

  // evaluate the examples inside the input file
  // eval-program :: Start -> string
  eval-program: term -> ret
    where {| MRule, MStackTrace:
      <init-trace> ();
      stripped := <strip-annos> term;
      <declare-mrules> stripped;
      ret := <eval-examples; concat-strings; debug> stripped
    |}
  
  // declare-mrules :: Start -> Start
  declare-mrules: p@Program(_, decls) -> p
    with <
      reverse;
      map(try(declare-rules))
    > decls
    
  // declare-rules :: MSection -> MSection
  declare-rules: n@MSectionRules(r) -> n
    where <reverse; filter(declare-rule)> r
    
  // declare-rule :: MRuleDecl -> MRuleDecl
  declare-rule: p@MRuleDecl(n, _, _) -> p
    where rules(MRule :+ n -> p)

  // eval-examples :: Start -> List(string)
  eval-examples = ?Program(_, x); !x; filter(eval-example)
  
  // eval-example :: MSection -> string
  eval-example: MSectionExample(expr) -> <strcat> (<pp-partial-dynamix-string> exp, "\n\n")
    with ret := <eval-expr(|<scope-new>)> expr
    with exp := <finalize> ret
    
// Finalizing example
rules
  // finalize :: MRuntimeValue -> TExp
  finalize: MRuntimeHoly(_, ctx) -> <plug(|TExpTerminatingPrimOp("exit", []))> ctx
  finalize: MRuntimeCPSFinalized(ctx) -> ctx
  // finalize: MRuntimeValue(v) -> TExpPrimOp0(TPrimOpPrint(), [v])
  finalize = fail-msg(|"Unable to represent this value as a CPS term: ")
  
// Expression evaluation
rules
  // eval-expr(|MScope) :: MExpr -> MRuntimeValue
  
  // source language operations
  eval-expr(|scope): MExprQuote(term) -> MRuntimeQuote(term)
  
  // meta language operations
  eval-expr(|scope): MExprVar(x) -> <scope-get(|x)> scope
  eval-expr(|scope): MExprBlock(exprs) -> <eval-block-stmts(|scope')> exprs
    with scope' := <scope-push> scope
      
  // todo: do arguments to a function call need to be composed
  // or be values in order for the call to be valid?
  eval-expr(|scope): MExprCall(name, args) -> ret
    with
      args' := <map(eval-expr(|scope))> args;
      (scope', MRuleDecl(fnname, _, body)) := <find-rule> (name, args');
      <push-trace> fnname;
      ret := <eval-expr(|scope')> body;
      <pop-trace> ()
      
  // todo: arity for label?
  eval-expr(|scope): MExprLabeled1(body, labelName) -> ret
    with
      continuationName := <newname> "k";
      argumentName := <newname> "a";
      
      // bind continuation label in body
      scope' := <scope-push> scope;
      <scope-set(|labelName, MRuntimeValue(TValueVar(continuationName)))> scope';
      bodye := <eval-expr(|scope')> body;
      
      // check if we received a tail-calling expression
      if <?MRuntimeCPSFinalized(fin)> bodye then
        ret := MRuntimeHoly([MRuntimeValue(TValueVar(argumentName))], TExpFix([
          TFun(continuationName, [argumentName], THole())
        ], fin))
      else
        <fail-msg(|"Expected the pre-body of a label to always tail-call, but got: ")> bodye
      end
      
  eval-expr(|scope): MExprLabeled0(body, labelName) -> ret
    with
      continuationName := <newname> "k";
      
      // bind continuation label in body
      scope' := <scope-push> scope;
      <scope-set(|labelName, MRuntimeValue(TValueVar(continuationName)))> scope';
      bodye := <eval-expr(|scope')> body;
      
      // check if we received a tail-calling expression
      if <?MRuntimeCPSFinalized(fin)> bodye then
        ret := MRuntimeHoly([], TExpFix([
          TFun(continuationName, [], THole())
        ], fin))
      else
        <fail-msg(|"Expected the pre-body of a label to always tail-call, but got: ")> bodye
      end
      
  eval-expr(|scope): MExprSourceIntToTargetInt(v) -> MRuntimeValue(tv')
    with MRuntimeQuote(tv) := <eval-expr(|scope)> v
    with tv' := <coerce-source-to-tint> tv
  eval-expr(|scope): MExprSourceVarToTargetVar(v) -> MRuntimeValue(TValueVar(tv'))
    with tv := <eval-expr(|scope); assert-source-string(|"var() argument must be a string")> v
    with tv' := <unquote(?'"')> tv // typed stratego bug, doesn't think UID and TID are the same
  eval-expr(|scope): MExprSourceStrToTargetStr(v) -> MRuntimeValue(TValueString(tv))
    with tv := <eval-expr(|scope); assert-source-string(|"str() argument must be a string")> v
  eval-expr(|scope): MExprConcatenateStr(l, r) -> MRuntimeQuote(STermString(out))
    with l' := <eval-expr(|scope); assert-source-string(|"left-hand of string concatenation must be a string")> l
    with r' := <eval-expr(|scope); assert-source-string(|"right-hand of string concatenation must be a string")> r
    with out := $["[<unquote(?'"')> l'][<unquote(?'"')> r']"]
  eval-expr(|scope): MExprFreshNamedTargetVar(p) -> MRuntimeValue(TValueVar(<newname> p))
  
  eval-expr(|scope): MExprList(args) -> MRuntimeMetaList(args')
    with args' := <map(eval-expr(|scope); assert-runtime-value(|"Meta-list must be constructed from a value, not: "))> args
  eval-expr(|scope): MExprListCons(args, list) -> MRuntimeMetaList(<conc> (args', list'))
    with args' := <map(eval-expr(|scope); assert-runtime-value(|"Meta-list must be constructed from a value, not: "))> args
    with list' := <eval-expr(|scope); assert-target-metalist(|"Second argument to cons must be a meta-list, not: ")> list
  eval-expr(|scope): MExprConcatList(l, r) -> MRuntimeMetaList(<conc> (left', right'))
    with left' := <eval-expr(|scope); assert-target-metalist(|"Left argument to concat must be a meta-list, not: ")> l
    with right' := <eval-expr(|scope); assert-target-metalist(|"Right argument to concat must be a meta-list, not: ")> r
  
  // todo: continuation argument composition? currently force values
  eval-expr(|scope): MExprContinueAt(tgt, args) -> MRuntimeCPSFinalized(TExpApp(tgtf, argvs))
    with
      tgtf := <eval-expr(|scope); assert-runtime-value(|"Can only call named functions: ")> tgt;
      argvs := <eval-expr(|scope); assert-target-metalist(|"Arguments to a continuation invocation must be a meta-list: ")> args      
      
  eval-continuation-arg(s): a -> ret
    with
      v := <s> a;
      ret := <assert-runtime-value(|"Expected continuation argument to be a value: ")> v
  
  // target language ops
  eval-expr(|scope): MExprCallPrimitive(op, args) -> MRuntimeHoly([MRuntimeValue(TValueVar(y))], TExpPrimOp(op, v, y, THole()))
    with v := <map(eval-expr(|scope)); assert-runtime-values-or-metalists> args
    with <newname> "y" => y
  eval-expr(|scope): MExprConditionalPrimitive(primop, args, then, else) -> MRuntimeCPSFinalized(
    TExpConditionalPrimOp(primop, args', then', else')
  )
    with
      args' := <map(eval-expr(|scope)); assert-runtime-values-or-metalists> args;
      then' := <eval-expr(|scope); assert-tail-call(|"If statement body must be a tail-call: ")> then;
      else' := <eval-expr(|scope); assert-tail-call(|"If statement body must be a tail-call: ")> else
  eval-expr(|scope): MExprTLet(name, val, body) -> <compose-cps-values> (
    MRuntimeHoly([], TExpLet([TBind(x, val')], THole())), 
    res
  ) 
    with
      x := <eval-expr(|scope); assert-target-var(|"Name of a let binding must be a target var, not: ")> name;
      val' := <eval-expr(|scope); assert-runtime-value(|"Value of let-stmt must be a value: ")> val;
      res := <eval-expr(|scope)> body
  eval-expr(|scope): MExprHole() -> MRuntimeHoly([], THole())
  eval-expr(|scope): MExprTFix(funs) -> MRuntimeHoly([], TExpFix(tfuns, THole()))
    with
      tfuns := <map(eval-tfun(|scope))> funs
  eval-expr(|scope): MExprQuoteTarget(lit) -> MRuntimeHoly([], lit)
    with <oncetd(?THole()) <+ fail-msg(|"Must have a hole in a target language literal.")> lit
      
  // eval-tfun(|MScope) :: MTFun -> TFun
  eval-tfun(|scope): MTFun(name, args, body) -> TFun(name', args', body')
    with
      name' := <eval-expr(|scope); assert-target-var(|"Function name must be a value: ")> name;
      args' := <
        eval-expr(|scope);
        assert-target-metalist(|"Function args must be a meta-list: ");
        map(assert-tvar(|"Argument must be a var name: "))
      > args;
      body' := <eval-expr(|scope); assert-tail-call(|"Body of a function must end with a tail call: ")> body
  
  
  
  
// Evaluation helpers
rules 
  // evaluate a list of block statements in the given scope
  // and make sure to take care of output composition
  // eval-block-stmts(|MScope) :: List(MStatement) -> MRuntimeValue
  eval-block-stmts(|scope): [stmt] -> <eval-block-stmt(|scope)> stmt
  eval-block-stmts(|scope): [s | rest@[_ | _]] -> res
    with <debug(!"0: ")> s
    with s' := <eval-block-stmt(|scope)> s // eval first
    with <debug(!"0->: ")> s'
    with <debug(!"1: ")> rest
    with rest' := <eval-block-stmts(|scope)> rest
    with <debug(!"1->: ")> rest'
    with res := <compose-cps-values> (s', rest')
    
  // eval-block-stmt(|MScope) :: MStatement -> MRuntimeValue
  eval-block-stmt(|scope): MStatementExpr(e) -> <eval-expr(|scope)> e
  eval-block-stmt(|scope): MStatementAssign(name, val) -> e
    with e := <eval-expr(|scope)> val
    with <assign-bind(|name, scope)> e
    
  // assert-runtime-values-or-metalists :: List(MRuntimeValue) -> List(TValue)
  assert-runtime-values-or-metalists = map({ x, y:
    (?MRuntimeValue(x); ![x])
      <+ (?MRuntimeMetaList(y); !y)
      <+ fail-msg(|"Expected runtime values or meta-lists")
  }); flatten-list
    
  // assert-runtime-value(|string) :: MRuntimeValue -> TValue
  assert-runtime-value(|msg): MRuntimeValue(tval) -> tval
  assert-runtime-value(|msg) = fail-msg(|msg)
    
  // assert-tail-call(|string) :: MRuntimeValue -> TExp
  assert-tail-call(|_): MRuntimeCPSFinalized(e) -> e
  assert-tail-call(|msg) = fail-msg(|msg)
    
  // assert-target-var(|string) :: MRuntimeValue -> TID
  assert-target-var(|_): MRuntimeValue(TValueVar(tvar)) -> tvar
  assert-target-var(|msg) = fail-msg(|msg)
  
  // assert-source-string(|string) :: MRuntimeValue -> string
  assert-source-string(|_): MRuntimeQuote(STermString(tvar)) -> tvar
  assert-source-string(|msg) = fail-msg(|msg)
  
  // assert-target-metalist(|string) :: MRuntimeValue -> List(TValue)
  assert-target-metalist(|_): MRuntimeMetaList(vs) -> vs
  assert-target-metalist(|msg) = fail-msg(|msg)
  
  // assert-tvar(|string) :: TValue -> TID
  assert-tvar(|_): TValueVar(vs) -> vs
  assert-tvar(|msg) = fail-msg(|msg)
  
  // coerce-source-to-tint :: STerm -> TValue
  coerce-source-to-tint: STermString(s) -> TValueInt(<unquote(?'"')> s)
  coerce-source-to-tint: STermInt(s) -> TValueInt(s)
  coerce-source-to-tint = fail-msg(|"Cannot convert this term to a CPS integer: ")
      
// CPS value composition
// TODO: Check if this is sound now that we've introduced
// meta-lists into the language.
rules
  // compose-cps-values :: MRuntimeValue * MRuntimeValue -> MRuntimeValue
  
  // plug(|TExp) :: TExp -> TExp
  plug(|x) = oncetd(\THole() -> x\)
      
  // a partially done CSP combined with a done CSP results in a done CSP
  // no need to forward the values since we can no longer access them from
  // the body anyway
  compose-cps-values: (
    MRuntimeHoly(vals, exp),
    MRuntimeCPSFinalized(rest)
  ) -> MRuntimeCPSFinalized(<plug(|rest)> exp)
  
  // todo: verify
  compose-cps-values: (
    a@MRuntimeCPSFinalized(_),
    _
  ) -> a
  
  // a partial term combined with a partial term yields a new partial term
  // with the second expression inserted in the hole of the first expression
  compose-cps-values: (
    MRuntimeHoly(vals1, exp1),
    MRuntimeHoly(vals2, exp2)
  ) -> MRuntimeHoly(vals2, <plug(|exp2)> exp1)
  
  // a partial term combined with an immediate value is simply still the
  // partial term, but now linked with the value
  compose-cps-values: (
    MRuntimeHoly(vals, exp),
    v@MRuntimeValue(_)
  ) -> MRuntimeHoly([v], exp)
  compose-cps-values: (
    MRuntimeHoly(vals, exp),
    v@MRuntimeMetaList(_)
  ) -> MRuntimeHoly([v], exp)
  
  // combining a runtime value with a holy value simply results in the holy
  // value
  compose-cps-values: (
    MRuntimeValue(_),
    holy@MRuntimeHoly(_, _)
  ) -> holy
  compose-cps-values: (
    MRuntimeMetaList(_),
    holy@MRuntimeHoly(_, _)
  ) -> holy
  
  // A finalized term has no holes to be filled, and since we
  // don't need to fill any, we're all good.
  compose-cps-values: (
    MRuntimeValue(_),
    fin@MRuntimeCPSFinalized(_)
  ) -> fin
  compose-cps-values: (
    MRuntimeMetaList(_),
    fin@MRuntimeCPSFinalized(_)
  ) -> fin
  
  // all of these are side-effect free
  compose-cps-values: (
    MRuntimeValue(_),
    v@MRuntimeValue(_)
  ) -> v
  compose-cps-values: (
    MRuntimeValue(_),
    v@MRuntimeMetaList(_)
  ) -> v
  compose-cps-values: (
    MRuntimeMetaList(_),
    v@MRuntimeValue(_)
  ) -> v
  compose-cps-values: (
    MRuntimeMetaList(_),
    v@MRuntimeMetaList(_)
  ) -> v
  
  // the rest of the combinations are illegal
  // TODO: check if this is correct if we also have source terms
  compose-cps-values: (
    a,
    b
  ) -> <fail-msg(|"Invalid composition of CPS values: ")> (a, b)
      
  // assign-bind(|string, MScope) :: MRuntimeValue -> ?
  assign-bind(|name, scope): MRuntimeHoly([x], _) -> ()
    with <scope-set(|name, x)> scope
  assign-bind(|name, scope): v@MRuntimeValue(_) -> ()
    with <scope-set(|name, v)> scope
  assign-bind(|name, scope): v@MRuntimeMetaList(_) -> ()
    with <scope-set(|name, v)> scope
  assign-bind(|name, scope): v@MRuntimeQuote(_) -> ()
    with <scope-set(|name, v)> scope
  assign-bind(|name, scope): v@MRuntimeCPSFinalized(_) -> ()
    with <fail-msg(|"Cannot bind term that has already been finalized: ")> v
  assign-bind(|name, scope): v -> ()
    with <fail-msg(|"Do not know how to assign value of type: ")> v
      
// Rule selection
rules
  // same as find-rule but will exit if not found
  // find-rule :: string * List(MRuntimeValue) -> MScope * MRuleDecl
  find-rule = ?(x, _); (try-find-rule <+ fail-msg(|$[Unable to find a matching [x] rule declaration.]))

  // try-find-rule :: string * List(MRuntimeValue) -> MScope * MRuleDecl
  try-find-rule: (name, args) -> matched
    where
      options := <bagof-MRule> name;
      matched := <getfirst(match-rule(|args))> options
      
  // match-rule(|List(MRuntimeValue)) :: MRuleDecl -> MScope * MRuleDecl
  match-rule(|args): r@MRuleDecl(_, argPats, _) -> (scope, r)
    where
      scope-new => scope;
      <zip(match-pattern(|scope))> (argPats, args)
      
  // match-pattern(|MScope) :: MPattern * MRuntimeValue -> ?
  match-pattern(|_): (MPatternWildcard(), _) -> ()
  match-pattern(|scope): (MPatternVariable(x), v) -> ()
    where
      existing := <scope-get(|x)> scope;
      <eq> (existing, v)
  match-pattern(|scope): (MPatternVariable(x), v) -> ()
    where <not(scope-get(|x))> scope
    with <scope-set(|x, v)> scope
  match-pattern(|scope): (MPatternString(s), MRuntimeQuote(STermString(sv))) -> ()
    where <eq> (s, sv)
  match-pattern(|scope): (MPatternConstructor(name, args), MRuntimeQuote(STermApp(name', argvs))) -> ()
    where <eq> (name, name')
    where <zip(match-pattern(|scope))> (args, <map(!MRuntimeQuote(<id>))> argvs)
  match-pattern(|scope): (MPatternList(argpats), MRuntimeQuote(STermList(argvs))) -> ()
    where <zip(match-pattern(|scope))> (argpats, <map(!MRuntimeQuote(<id>))> argvs)
  match-pattern(|scope): (MPatternListCons(argpats, restpat), MRuntimeQuote(STermList(args))) -> ()
    where (argvs, restv) := <split-at(|<length> argpats)> args
    where <zip(match-pattern(|scope))> (argpats, <map(!MRuntimeQuote(<id>))> argvs)
    where <match-pattern(|scope)> (restpat, MRuntimeQuote(STermList(restv)))
  match-pattern(|scope): (MPatternBound(x, p), v) -> ()
    where <match-pattern(|scope)> (p, v)
    where <not(scope-get(|x))> scope // ensure not already bound in sub-pattern or adjacent pattern
    with <scope-set(|x, v)> scope
//  match-pattern(|_): (a, b) -> ()
//    where <ppdebug(|"Cannot unify these two patterns: ")> (a, b)
//    where <fail> ()
    
// Utils
rules
  // Pretty print the input term and write out the given message, then exit.
  // fail-msg(|string) :: ? -> ?
  fail-msg(|msg) =
    // error message
    ?x; err-msg(|msg); !x;
    
    // term
    ppdebug(|"== On term: ==\n");
    
    // trace
    MStackTrace;
    join-to-string(id|"\n");
    debug(!"== Stack trace: ==\n   ");
    
    // exit
    !1; exit
  
  // init-trace :: a -> a
  init-trace: a -> a
    with rules(MStackTrace := [])
    
  // push-trace :: string -> string
  push-trace: s -> s
    with x := <MStackTrace> ()
    with rules(MStackTrace := [s|x])
    
  // pop-trace :: a -> a
  pop-trace: a -> a
    with [_|x] := <MStackTrace> ()
    with rules(MStackTrace := x)
    
  // join-to-string(a -> string|string) :: List(a) -> string
  join-to-string(s|sep) = map(s); !(<id>, ""); foldl(conc(|sep))
  
  // conc(|string) :: Tuple(string, string) -> string
  conc(|sep): (a, "") -> a
  conc(|sep): (a, b) -> $[[b][sep][a]]
  