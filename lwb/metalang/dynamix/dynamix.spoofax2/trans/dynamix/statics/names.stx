module dynamix/statics/names

imports
  signatures/dynamix/common-sig
  dynamix/statics/type
  
signature
  name-resolution labels
    P // parent-child, only used in rules
    I // import
    
  relations
    rule : string -> MRULE
    primitive : string -> MPRIMITIVE
    var : string -> MTYPE
    global : string -> MTYPE
    mod : string -> scope // module
    curmod : -> string // name of current module
    
  sorts MRULE MPRIMITIVE
  constructors
    //      arguments     return type
    MRULE : list(MTYPE) * MTYPE -> MRULE
    
    MPRIMITIVEEXPR : list(MTYPE) -> MPRIMITIVE
    MPRIMITIVESTMT : list(MTYPE) -> MPRIMITIVE
    MPRIMITIVECOND : list(MTYPE) -> MPRIMITIVE
    
rules
  // lookup var in current scope or parent scopes
  lookupVar : scope * string -> list((path * (string * MTYPE)))
  lookupVar(s, x) = ps :-
    query var filter P* and { x' :- x == x' } min $ < P and true in s |-> ps.
    
  // resolve var to the given ID
  resolveVar : scope * string -> MTYPE
  resolveVar(s, x) = T :- {x'}
    lookupVar(s, x) == [(_, (x', T))|_] | error $[Undefined variable [x].]@x,
    @x.ref := x'.
    
  // declare new var, assert it is not shadowed in the current scope
  declareVar : scope * string * MTYPE
  declareVar(s, x, T) :- {ps}
    !var[x, T] in s,
    query var filter e and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Duplicate declaration of [x] in the same scope.]@x,
    @x.type := T.
    
rules
  // lookup global in current scope or parent scopes
  lookupGlobal : scope * string -> list((path * (string * MTYPE)))
  lookupGlobal(s, x) = ps :-
    query global filter P* and { x' :- x == x' } min $ < P and true in s |-> ps.
    
  // resolve global to the given ID
  resolveGlobal : scope * string -> MTYPE
  resolveGlobal(s, x) = T :- {x'}
    lookupGlobal(s, x) == [(_, (x', T))|_] | error $[Undefined global variable [x].]@x,
    @x.ref := x'.
    
  // declare new global, assert it is not shadowed in the current scope
  declareGlobal : scope * string * MTYPE
  declareGlobal(s, x, T) :- {ps}
    !global[x, T] in s,
    // allow shadowing by only checking current scope
    query global filter e and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Duplicate declaration of [x] in this module.]@x,
    @x.type := T.
    
rules
  // lookup module in scope, must be global scope
  lookupModule : scope * string -> list((path * (string * scope)))
  lookupModule(s, x) = ps :-
    query mod filter e and { x' :- x == x' } min $ < P and true in s |-> ps.
    
  // resolve module to its top-level scope
  resolveModule : scope * string -> scope
  resolveModule(s, x) = T :- {x'}
    lookupModule(s, x) == [(_, (x', T))|_] | error $[Undefined module [x].]@x,
    @x.ref := x'.
    
  // declare new module, assert it is unique
  declareModule : scope * string * scope
  declareModule(s, x, ms) :- {ps}
    !mod[x, ms] in s,
    query mod filter e and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Duplicate declaration of module [x].]@x.
    
rules
  // insert current module name in scope
  insertModuleName : scope * string
  insertModuleName(s, x) :-
    !curmod[x] in s.
  
  // lookup module in scope, must be global scope
  assignModuleName : scope * astId
  assignModuleName(s, node) :- {modname}
    query curmod filter P* and true min and true in s |-> [(_, modname)],
    @node.declaringModule := modname.
    
rules
  // lookup rule in current scope or parent scopes
  lookupRule : scope * string -> list((path * (string * MRULE)))
  lookupRule(s, x) = ps :-
    // go through any number of P/I, prefer closer declarations
    query rule filter (P | I)* and { x' :- x == x' } min $ < P, $ < I and true in s |-> ps.
    
  // resolve rule to the given ID
  resolveRule : scope * string -> MRULE
  resolveRule(s, x) = T :- {x'}
    lookupRule(s, x) == [(_, (x', T))|_] | error $[Undeclared rule [x].]@x,
    @x.ref := x'.
    
  // declare new rule, assert it is not shadowed in the current scope
  declareRule : scope * string * MRULE
  declareRule(s, x, T) :- {ps}
    !rule[x, T] in s,
    // allow shadowing by only checking for duplicate declarations in the current program scope
    query rule filter e and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Duplicate declaration of rule [x].]@x.
    
  // raises an error if a user attempts to declare a new rule for
  // something declared in an imported module. doing so ensures
  // that we always have a consistent order in which patterns 
  // should be attempted
  assertRuleDefinedInLocalModule : scope * string
  assertRuleDefinedInLocalModule(s, x) :- {ps}
    query rule filter P* and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[New implementations may not be added to the imported rule [x].].
    
rules
  // lookup primitive in current scope or parent scopes
  lookupPrimitive : scope * string -> list((path * (string * MPRIMITIVE)))
  lookupPrimitive(s, x) = ps :-
    query primitive filter (P | I)* and { x' :- x == x' } min $ < P and true in s |-> ps.
    
  // resolve primitive to the given ID
  resolvePrimitive : scope * string -> MPRIMITIVE
  resolvePrimitive(s, x) = T :- {x'}
    lookupPrimitive(s, x) == [(_, (x', T))|_] | error $[Undeclared primitive [x].]@x,
    @x.ref := x'.
    
  // declare new primitive, assert it is not shadowed in the current scope
  declarePrimitive : scope * string * MPRIMITIVE
  declarePrimitive(s, x, T) :- {ps}
    !primitive[x, T] in s,
    // do not allow primitive shadowing as there's no good use for doing so
    query primitive filter (P | I)* and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Duplicate declaration of primitive [x].]@x.