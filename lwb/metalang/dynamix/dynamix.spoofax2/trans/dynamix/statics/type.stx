module dynamix/statics/type

imports
  signatures/dynamix-sig
  dynamix/statics/names

// actual types
signature
  sorts
    STYPE // source type (' prefix)
    MTYPE // meta type (no prefix)
    TTYPE // target type (@ prefix)

  constructors
    // Source types
    SINT : STYPE // literal int
    SSTRING : STYPE // literal string
    SSORT : string * scope -> STYPE // reference to a sort, scope is the global scope (for injections)

    // Meta types
    MSTYPE : STYPE -> MTYPE // '<stype>
    MTTYPE : TTYPE -> MTYPE // @<ttype>
    MLIST : MTYPE -> MTYPE // List(...)
    MTUPLE : list(MTYPE) -> MTYPE // (mtype * mtype * ...)
    MPLUGGABLE0 : MTYPE // Pluggable
    MPLUGGABLE1 : MTYPE -> MTYPE // Pluggable(T)
    MAUTO : MTYPE -> MTYPE // automatic derivation of type, used for empty list literal
    MANYSOURCE : MTYPE // any source type, only used for properties

    // Target types
    TVALUE : TTYPE // value
    TSTATEMENT : TTYPE // statement
    TFUN : TTYPE // fun def (inside fix block)
    TTYPE : TTYPE // type
    TSTRUCTMEMBER : TTYPE // Member of a struct

// constructor management
signature
  sorts
    SCONS

  constructors
    // represents a defined constructor. note that we
    // use MTYPE instead of STYPE to prevent having to
    // have two concepts of lists (source and meta lists)
    //
    // A rule like
    //   Call : Exp * list(Exp) -> Exp
    // is represented as
    //   SCONS([MSTYPE(SSORTID("Exp")), MLIST(MSTYPE(SSORTID("Exp")))], SSORTID("Exp"))
    //
    // Note that the second argument is always an SSORT
    SCONS : list(MTYPE) * STYPE -> SCONS

// source types are represented as a list of sorts and
// constructors in the global scope. Each sort additionally
// has a list of injections defined on it
signature
  relations
    sort : string -> STYPE // SSORT only
    constructor : string -> SCONS
    injection : MTYPE * STYPE // can convert the type to other type

rules
  constructorArgumentToType : scope * MConstructorArgument -> MTYPE
  constructorArgumentsToTypes maps constructorArgumentToType(*, list(*)) = list(*)

  constructorArgumentToType(_, MConstructorArgumentString()) = MSTYPE(SSTRING()).
  constructorArgumentToType(_, MConstructorArgumentInt()) = MSTYPE(SINT()).
  constructorArgumentToType(s, MConstructorArgumentList(el)) = MLIST(constructorArgumentToType(s, el)).
  constructorArgumentToType(s, MConstructorArgumentSortID(sid)) = MSTYPE(resolveSort(s, sid)).

rules
  mTypeToMTYPE : scope * MType -> MTYPE
  mTypesToMTYPEs maps mTypeToMTYPE(*, list(*)) = list(*)

  sourceTypeToSTYPE : scope * MSourceType -> STYPE
  targetTypeToTTYPE : scope * MTargetType -> TTYPE

  mTypeToMTYPE(s, MTypeSourceType(st)) = MSTYPE(sourceTypeToSTYPE(s, st)).
  mTypeToMTYPE(s, MTypeTargetType(st)) = MTTYPE(targetTypeToTTYPE(s, st)).
  mTypeToMTYPE(s, MTypeList(el)) = MLIST(mTypeToMTYPE(s, el)).
  mTypeToMTYPE(s, MTypeTuple(types)) = MTUPLE(mTypesToMTYPEs(s, types)).
  mTypeToMTYPE(s, MTypePluggable1(el)) = MPLUGGABLE1(mTypeToMTYPE(s, el)).
  mTypeToMTYPE(s, MTypePluggable0()) = MPLUGGABLE0().

  sourceTypeToSTYPE(s, MSourceTypeSortID(x)) = resolveSort(s, x).
  sourceTypeToSTYPE(s, MSourceTypeString()) = SSTRING().
  sourceTypeToSTYPE(s, MSourceTypeInt()) = SINT().

  targetTypeToTTYPE(s, MTargetTypeValue()) = TVALUE().
  targetTypeToTTYPE(s, MTargetTypeCPSFinalized()) = TSTATEMENT().
  targetTypeToTTYPE(s, MTargetTypeFun()) = TFUN().
  targetTypeToTTYPE(s, MTargetTypeType()) = TTYPE().
  targetTypeToTTYPE(s, MTargetTypeStructMember()) = TSTRUCTMEMBER().

rules
  composeTypes : MTYPE * MTYPE -> MTYPE

  composeTypes(MSTYPE(_), a) = a. // any source type is thrown away
  composeTypes(MTTYPE(TSTATEMENT()), _) = _ :- false | error $[Values of type @statement must be the final expression and cannot be followed by anything else.].
  composeTypes(MTTYPE(_), a) = a. // any other target type (expr, tfun) is thrown away
  composeTypes(MLIST(_), a) = a. // any list is thrown away

  // pluggable + fin
  composeTypes(MPLUGGABLE1(_), MTTYPE(TSTATEMENT())) = MTTYPE(TSTATEMENT()).
  composeTypes(MPLUGGABLE0(), MTTYPE(TSTATEMENT())) = MTTYPE(TSTATEMENT()).

  // pluggable + pluggable
  composeTypes(MPLUGGABLE1(_), MPLUGGABLE1(x)) = MPLUGGABLE1(x).
  composeTypes(MPLUGGABLE1(_), MPLUGGABLE0()) = MPLUGGABLE0().
  composeTypes(MPLUGGABLE0(), MPLUGGABLE1(x)) = MPLUGGABLE1(x).
  composeTypes(MPLUGGABLE0(), MPLUGGABLE0()) = MPLUGGABLE0().

  // pluggable + value
  composeTypes(MPLUGGABLE1(_), t) = MPLUGGABLE1(t).
  composeTypes(MPLUGGABLE0(), t) = MPLUGGABLE1(t).

  composeTypes(A, B) = _ :-
    try { false } | error $[Cannot compose [A] and [B].],
    false.

rules
  // holds if we can convert the first type to the second
  typeCoercibleTo : MTYPE * MTYPE
  typesCoercibleTo maps typeCoercibleTo(list(*), list(*))

  typeCoercibleTo(T, T).
  typeCoercibleTo(MSTYPE(_), MANYSOURCE()).
  typeCoercibleTo(MAUTO(A), B) :- A == B.
  typeCoercibleTo(MPLUGGABLE1(_), MPLUGGABLE0()).
  typeCoercibleTo(MTTYPE(TSTATEMENT()), MPLUGGABLE0()).
  typeCoercibleTo(MTTYPE(TVALUE()), MPLUGGABLE1(MTTYPE(TVALUE()))).
  typeCoercibleTo(MLIST(MTTYPE(TVALUE())), MPLUGGABLE1(MLIST(MTTYPE(TVALUE())))).
  typeCoercibleTo(MLIST(MAUTO(_)), MPLUGGABLE1(MLIST(MTTYPE(TVALUE())))).
  typeCoercibleTo(MLIST(A), MLIST(B)) :-
    typeCoercibleTo(A, B).
  typeCoercibleTo(T, MSTYPE(TT@SSORT(_, s))) :-
    hasInjection(s, T, TT).
  typeCoercibleTo(MSTYPE(T@SSORT(_, s)), TT@MLIST(MSTYPE(_))) :-
    // : list(Exp) -> Parameters, allow parameters in a place where list(Exp) is expected
    hasInjection(s, TT, T).

  // specific helper for list coercions in patterns
  // unlike typeCoercibleTo, the target/expected type
  // is the first argument here
  listCoercibleTo : MTYPE * MTYPE
  listCoercibleTo(MLIST(A), MLIST(B)) :- A == B.
  listCoercibleTo(MSTYPE(TT@SSORT(_, s)), T@MLIST(_)) :-
    hasListInjection(s, T, TT).
  listCoercibleTo(MSTYPE(TT@SSORT(_, s)), T) :-
    hasInjection(s, T, TT).
  listCoercibleTo(A, B) :- typeCoercibleTo(B, A).

  // todo: better lub using injections?
  lub : list(MTYPE) -> MTYPE
  lub([T]) = T.
  lub([T, T|r]) = lub([T|r]).

rules
  lookupSort : scope * string -> list((path * (string * STYPE)))
  lookupSort(s, x) = ps :-
    query sort filter (P | I)* and { x' :- x == x' } min $ < P, $ < I and true in s |-> ps.

  resolveSort : scope * string -> STYPE
  resolveSort(s, x) = T :- {x'}
    lookupSort(s, x) == [(_, (x', T))|_] | error $[Undefined sort [x].],
    @x.ref := x'.

  declareSort : scope * string * STYPE
  declareSort(s, x, T) :- {ps}
    !sort[x, T] in s,
    // todo: does it make sense to make this e instead?
    query sort filter (I | P)* and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Sort [x] is already declared in this module or an imported module.].

  lookupConstructor : scope * string -> list((path * (string * SCONS)))
  lookupConstructor(s, x) = ps :-
    query constructor filter (P | I)* and { x' :- x == x' } min $ < P and true in s |-> ps.

  resolveConstructor : scope * string -> SCONS
  resolveConstructor(s, x) = T :- {x'}
    lookupConstructor(s, x) == [(_, (x', T))|_] | error $[Undefined constructor [x].],
    @x.ref := x'.

  declareConstructor : scope * string * SCONS
  declareConstructor(s, x, T) :- {ps}
    !constructor[x, T] in s,
    query constructor filter (I | P)* and { x' :- x' == x } min and false in s |-> ps,
    try { ps == [_] } | error $[Constructor [x] is already declared in this module or an imported module.].

  // declare that the given type can be injected in the given type
  declareInjection : scope * MTYPE * STYPE
  declareInjection(s, from, to) :-
    !injection[from, to] in s.

  hasInjection : scope * MTYPE * STYPE
  hasInjection(s, from, to) :- {ps}
    query injection filter (I | P)* and { (a, b) :- b == to } min and false in s |-> ps,
    checkValidInjectionCandidate(ps, from).

  hasListInjection : scope * MTYPE * STYPE
  hasListInjection(s, T, to) :- {ps}
    query injection filter (I | P)* and { (a, b) :- a == MLIST(_), b == to } min and false in s |-> ps,
    ps == [(_, (T, _))|_].

  checkValidInjectionCandidate : list((path * (MTYPE * STYPE))) * MTYPE
  checkValidInjectionCandidate([(_, (A, _))|_], A).
  checkValidInjectionCandidate([_|tl], A) :- checkValidInjectionCandidate(tl, A).
