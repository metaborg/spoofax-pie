module WebDSL-UI

imports
  WebDSL-Action
  WebDSL-Attributes
  WebDSL-Core
  WebDSL-Lexical
  WebDSL-XML

template options

  keyword -/- [a-zA-Z0-9\-\_]

context-free sorts

  TemplateDefinition Modifier TemplateElement OptFilter PageCall TemplateCall PropertyAssignment
  TemplateArgExp TemplateCaseAlt TemplateTypeCaseAlt OptTemplateArgs TemplateArg OptLocalRedefineArgs
  LocalRedefineArg

lexical sorts

  SubmitProp

context-free syntax

  Definition.TemplateDefinition = TemplateDefinition
  TemplateDefinition.Define = <
    define <Modifier*> <Id> <OptFormalArgs> <OptTemplateArgs> {
      <TemplateElement*>
    }
  >
  OptTemplateArgs.TemplateArgs = <requires <{TemplateArg ","}*>>
  OptTemplateArgs.OptTemplateArgsNone = <>
  TemplateArg.TemplateArg = <<TemplateId> ( <{Sort ","}*> )>
  TemplateDefinition.LocalRedefine = <
    define <Modifier*> <TemplateId> ( <{FormalArg ","}*> ) = <TemplateId> <OptLocalRedefineArgs>
  >
  OptLocalRedefineArgs.OptLocalRedefineArgsNone = <>
  OptLocalRedefineArgs.LocalRedefineArgs = <( * , <{LocalRedefineArg ","}+> )>
  LocalRedefineArg.LocalRedefineArg = Id
  TemplateDefinition.DefinePage = <
    <Modifier*> page <PageId> <OptFormalArgs> <OptTemplateArgs> {
      <TemplateElement*>
    }
  >
  TemplateDefinition.DefineTemplate = <
    <Modifier*> template <TemplateId> <OptFormalArgs> <OptTemplateArgs> {
      <TemplateElement*>
    }
  >
  TemplateDefinition.DefineEmail = <
    <Modifier*> email <Id> <OptFormalArgs> <OptTemplateArgs> {
      <TemplateElement*>
    }
  >
  Modifier.Page = <page>
  Modifier.Email = <email>
  Modifier.AjaxTemplate = <ajax>
  Modifier.Template = <template>
  Modifier.Feed = <feed>
  Modifier.Local = <local>
  Modifier.NoSpan = <no-span>
  Modifier.TemplateModSpan = <span>
  Modifier.TemplateModInline = <inline>
  Modifier.TempateModSecure = <secure>
  Modifier.TemplateModNotSecure = <not-secure>
  Modifier.TemplateModOverride = <override>
  Modifier.TemplateDeprecated = <deprecated>
  Modifier.ExpireCache = <expire-cache>
  Modifier.ReadOnlyPage = <read-only>
  Modifier.WebService = <service>
  TemplateElement.Init = <
    init <Block>
  >
  TemplateElement = Action

  TemplateCall = <<Modifier>> {reject}

lexical syntax

  TemplateId = "template" {reject}
  TemplateId = "define" {reject}

context-free sorts

  VarDecl

context-free syntax

  VarDecl.TemplateVarDecl = <
    var <VarId> : <Sort>
  >
  VarDecl.TemplateVarDeclDepr = <
    var <VarId> : <Sort> ;
  > {deprecated("remove ;")}
  VarDecl.TemplateVarDeclInit = <
    var <VarId> : <Sort> := <Exp>
  >
  VarDecl.TemplateVarDeclInitDepr = <
    var <VarId> : <Sort> := <Exp> ;
  > {deprecated("remove ;")}
  VarDecl.TemplateVarDeclInitInferred = <
    var <VarId> := <Exp>
  >
  VarDecl.TemplateVarDeclInitInferredDepr = <
    var <VarId> := <Exp> ;
  > {deprecated("remove ;")}
  TemplateElement.TEVarDecl = VarDecl
  TemplateElement.RequestScopeTemplate = <
    request <VarDecl>
  >
  TemplateElement.LocalScopeTemplate = <
    local <VarDecl>
  >
  TemplateElement = TemplateDefinition
  TemplateElement = TemplateCall

lexical syntax

  TemplateId = "request" {reject}
  TemplateId = "local" {reject}

context-free sorts

  Filter OrderExp Limit

context-free syntax

  Filter.FilterNoOrderByNoLimit = <where <Exp>>
  Filter.FilterNoWhereNoLimit = <order by <{OrderExp ","}+>>
  Filter.FilterNoLimit = <where <Exp> order by <{OrderExp ","}+>>
  Filter.FilterNoOrderBy = <where <Exp> <Limit>>
  Filter.FilterNoWhere = <order by <{OrderExp ","}+> <Limit>>
  Filter.FilterNoWhereNoOrderBy = Limit
  Filter.Filter = <where <Exp> order by <{OrderExp ","}+> <Limit>>
  OrderExp.OrderNonSpecific = Exp
  OrderExp.OrderAscending = <<Exp> asc>
  OrderExp.OrderDescending = <<Exp> desc>
  Limit.Limit = <limit <Exp> offset <Exp>>
  Limit.LimitNoOffset = <limit <Exp>>
  Limit.LimitNoLimit = <offset <Exp>>
  OptFilter.OptFilterSome = Filter
  OptFilter.OptFilterNone = <>

context-free sorts

  ForSeparator ElseIfTempl OptElseTempl

context-free syntax

  TemplateElement.For = <
    for ( <VarId> : <Sort> in <Exp> <OptFilter> ) {
      <TemplateElement*>
    } <ForSeparator>
  >
  TemplateElement.ForInferred = <
    for ( <VarId> in <Exp> <OptFilter> ) {
      <TemplateElement*>
    } <ForSeparator>
  >
  TemplateElement.ForAll = <
    for ( <VarId> : <Sort> <OptFilter> ) {
      <TemplateElement*>
    } <ForSeparator>
  >
  TemplateElement.ForCount = <
    for ( <VarId> : Int from <Exp> to <Exp> ) {
      <TemplateElement*>
    } <ForSeparator>
  >
  ForSeparator.ForSeparator = <separated-by { <TemplateElement*> }>
  ForSeparator.ForSeparatorNone = <>

  TemplateElement.IfTempl = <
    if ( <Exp> ) {
      <TemplateElement*>
    } else {
      <TemplateElement*>
    }
  >
  TemplateElement.IfNoElseTempl = <
    if ( <Exp> ) {
      <TemplateElement*>
    }
  >
  TemplateElement.IfElseIfTempl = <
    if ( <Exp> ) {
      <TemplateElement*>
    } <ElseIfTempl+> <OptElseTempl>
  >
  OptElseTempl.OptElseTemplNone = <>
  OptElseTempl.ElseTempl = <else {
    <TemplateElement*>
  }>

  ElseIfTempl.ElseIfTempl = <else if ( <Exp> ) {
    <TemplateElement*>
  }>

lexical syntax

  TemplateId = "if" {reject}
  TemplateId = "else" {reject}

context-free syntax

  TemplateElement.TemplateCase = <
    case ( <{Exp ","}+> ) {
      <TemplateCaseAlt*>
    }
  >
  TemplateCaseAlt.TemplateCaseAlt = <
    <TemplateCaseAltExps> { <TemplateElement*> }
  >
  TemplateCaseAlt.TemplateCaseAltDefault = <
    default { <TemplateElement*> }
  >
  TemplateElement.TemplateTypeCase = <
    typecase ( <Exp> <OptTypeAlias> ) {
      <TemplateTypeCaseAlt*>
    }
  >
  TemplateTypeCaseAlt.TemplateTypeCaseAlt = <
    <Sort> { <TemplateElement*> }
  >
  TemplateTypeCaseAlt.TemplateTypeCaseDefault = <
    default { <TemplateElement*> }
  >

lexical syntax

  TemplateId = "case" {reject}
  TemplateId = "typecase" {reject}

context-free sorts

  TemplateCaseAltExps

context-free syntax

  TemplateCaseAltExps.TemplateCaseExps = <<{Exp ","}+>>
  TemplateCaseAltExps = <default> {reject}

context-free priorities

  TemplateElement.TemplateTypeCase <2> .> Exp.Cast

context-free sorts

  OptTCallArgs OptTCallPropAssigns TemplateBody ArgDefine

context-free syntax

  TemplateCall.TemplateCall = <
    <TemplateCallId> <OptTCallArgs> <OptTCallPropAssigns> <TemplateBody>
  >
  OptTCallArgs.TCallArgs = <( <{TemplateArgExp ","}*> )>
  OptTCallArgs.OptTCallArgsNone = <>
  TemplateArgExp.Exp = Exp
  TemplateArgExp.TemplateElementsArgument = <{ <TemplateElement*> }>
  OptTCallPropAssigns.TCallPropAssigns = <[ <{PropertyAssignment ","}*> ]>
  OptTCallPropAssigns.OptTCallPropAssignsNone = <>
  TemplateBody.TemplateBody = <{
    <TemplateElement*>
  }>
  TemplateBody.TemplateBodyNone = <>
  TemplateBody.TemplateWith = <with {
    <ArgDefine*>
  }>
  ArgDefine.ArgDefine = <
    <TemplateCallId> ( <{FormalArg ","}*> ) {
      <TemplateElement*>
    }
  >
  TemplateCall = <with { <TemplateElement*> }> {reject}

context-free syntax

  TemplateElement.NavigateCallParenthesesNoProps = <
    navigate ( <PageCall> ) { <TemplateElement*> }
  >
  TemplateElement.NavigateCallParentheses = <
    navigate ( <PageCall> ) [ <{PropertyAssignment ","}*> ] { <TemplateElement*> }
  >
  TemplateElement.NavigateCallNoProps = <
    navigate <PageCall> { <TemplateElement*> }
  >
  TemplateElement.NavigateCall = <
    navigate <PageCall> [ <{PropertyAssignment ","}*> ] { <TemplateElement*> }
  >
  PageCall.PageCall = <
    <PageId> ( <{Exp ","}*> )
  >

context-free sorts

  ActionCallOrInline

context-free syntax

  TemplateElement.SubmitActionNoProps = <
    action ( <Exp> , <ActionCallOrInline> )
  >
  TemplateElement.SubmitAction = <
    action ( <Exp> , <ActionCallOrInline> ) [ <{PropertyAssignment ","}*> ]
  >
  TemplateElement.SubmitLinkActionNoProps = <
    actionLink ( <Exp> , <ActionCallOrInline> )
  >
  TemplateElement.SubmitLinkAction = <
    actionLink ( <Exp> , <ActionCallOrInline> ) [ <{PropertyAssignment ","}*> ]
  >
  TemplateElement.SubmitNoProps = <
    submit ( <Exp> , <ActionCallOrInline> )
  >
  TemplateElement.Submit = <
    submit ( <Exp> , <ActionCallOrInline> ) [ <{PropertyAssignment ","}*> ]
  >
  TemplateElement.SubmitLinkNoProps = <
    submitlink ( <Exp> , <ActionCallOrInline> )
  >
  TemplateElement.SubmitLink = <
    submitlink ( <Exp> , <ActionCallOrInline> ) [ <{PropertyAssignment ","}*> ]
  >
  TemplateElement.SubmitElemNoProps = <
    submit <ActionCallOrInline> { <TemplateElement*> }
  >
  TemplateElement.SubmitElem = <
    submit <ActionCallOrInline> [ <{PropertyAssignment ","}*> ] { <TemplateElement*> }
  >
  TemplateElement.SubmitLinkElemNoProps = <
    submitlink <ActionCallOrInline> { <TemplateElement*> }
  >
  TemplateElement.SubmitLinkElem = <
    submitlink <ActionCallOrInline> [ <{PropertyAssignment ","}*> ] { <TemplateElement*> }
  >
  TemplateElement.DownloadLinkNoProps = <
    downloadlink <ActionCallOrInline> { <TemplateElement*> }
  >
  TemplateElement.DownloadLink = <
    downloadlink <ActionCallOrInline> [ <{PropertyAssignment ","}*> ] { <TemplateElement*> }
  >
  TemplateElement.OutputImageNoProps = <
    outputimage <ActionCallOrInline> { <TemplateElement*> }
  >
  TemplateElement.OutputImage = <
    outputimage <ActionCallOrInline> [ <{PropertyAssignment ","}*> ] { <TemplateElement*> }
  >
  ActionCallOrInline.ActionCall = ThisCall
  ActionCallOrInline.InlineAction = <action <Block>>

lexical syntax

  TemplateId = "action" {reject}
  TemplateId = "actionLink" {reject}
  TemplateId = "submit" {reject}
  TemplateId = "submitlink" {reject}
  TemplateId = "downloadlink" {reject}
  TemplateId = "outputimage" {reject}

context-free sorts

  ActionCallOrInlineOrExp PropertySubmitMultiple PropertySubmitExp

context-free syntax

  PropertyAssignment.PropertySubmitColon = <<SubmitProp> : <ActionCallOrInlineOrExp>>
  PropertyAssignment.PropertySubmitAssign = <<SubmitProp> := <ActionCallOrInlineOrExp>>
  PropertyAssignment.PropertySubmit = <<SubmitProp> = <ActionCallOrInlineOrExp>>
  PropertyAssignment.PropertyAssignmentColon = <<PropertyAssignmentId> : <Exp>>
  PropertyAssignment.PropertyAssignmentAssign = <<PropertyAssignmentId> := <Exp>>
  PropertyAssignment.PropertyAssignment = <<PropertyAssignmentId> = <Exp>>
  PropertyAssignment.TemplateCallPropertyAjax = <ajax>
  PropertyAssignment.TemplateCallPropertyNoLoadingFeedback = <no loading feedback>
  PropertyAssignment.TemplateCallPropertySecure = <secure>
  PropertyAssignment.TemplateCallPropertyIgnoreValidation = <ignore-validation>
  PropertyAssignment.TemplateCallPropertyNotSecure = <not-secure>
  PropertyAssignment.TemplateCallPropertyNotNull = <not null>
  PropertyAssignment = CommonAttribute
  PropertyAssignment = PropertySubmitMultiple
  PropertySubmitMultiple.PropertySubmitMultiple = <<SubmitProp> = <{ActionCallOrInlineOrExp ";"}+>>
  ActionCallOrInlineOrExp.ActionCallOrInline = ActionCallOrInline
  ActionCallOrInlineOrExp.ActionCallOrInlineExp = PropertySubmitExp
  PropertySubmitExp.PropertySubmitExp = Exp
  TemplateElement = OutputShorthand

  // require at least two actions to get this constructor
  PropertySubmitMultiple = <<SubmitProp> = <ActionCallOrInlineOrExp>> {reject}

  PropertySubmitExp = ThisCall {reject}

lexical sorts

  PropertyAssignmentId

lexical syntax

  PropertyAssignmentId = ExtendedId
  PropertyAssignmentId = SubmitProp {reject}

syntax

  TemplateElement-CF.Text = "\"" StringPart-CF* "\""

lexical syntax

  SubmitProp = "onabort"
  SubmitProp = "onblur"
  SubmitProp = "onchange"
  SubmitProp = "onclick"
  SubmitProp = "ondblclick"
  SubmitProp = "onerror"
  SubmitProp = "onfocus"
  SubmitProp = "onkeydown"
  SubmitProp = "onkeypress"
  SubmitProp = "onkeyup"
  SubmitProp = "onload"
  SubmitProp = "onmousedown"
  SubmitProp = "onmousemove"
  SubmitProp = "onmouseout"
  SubmitProp = "onmouseover"
  SubmitProp = "onmouseup"
  SubmitProp = "onreset"
  SubmitProp = "onresize"
  SubmitProp = "onselect"
  SubmitProp = "onsubmit"
  SubmitProp = "onunload"
  SubmitProp = "oninput"

context-free sorts

  ActionModifier TemplateCallId

context-free syntax

  TemplateCall = <separated-by { <TemplateElement*> }> {reject}
  Definition.GlobalInit = <
    init <Block>
  >
  TemplateElement.DataBindAction = <databind <Block>>
  TemplateElement.RenderAction = <render <Block>>
  TemplateElement.AllPhasesAction = <allphases <Block>>
  TemplateElement.ValidateAction = <validate <Block>>
  Action.Action = <action <ActionModifier*> <Id> <OptFormalArgs> <Block>>
  ActionModifier.ActionModifierIgnoreValidation = <ignore-validation>
  TemplateCallId.QualifiedElementsCall = <<TemplateId> .elements>
  TemplateCallId.TemplateCallId = TemplateId

context-free syntax // reject rules

  TemplateCall = <init <Block>> {reject}
  TemplateCall = <databind <Block>> {reject}
  TemplateCall = <render <Block>> {reject}
  TemplateCall = <allphases <Block>> {reject}
  TemplateCall = <action> {reject}
  TemplateCall = <validate <Block>> {reject}

context-free sorts

  FormalVarArg ExpVarArg ExpOrTemplateArg

context-free syntax

  Sort.TemplateVarArgSort = <[ <{FormalVarArg ","}+> ]>
  FormalVarArg.FormalVarArg = <<Id> : <Sort>>
  TemplateCall.MemberTemplateCall = <
    <Id> . <TemplateCall>
  >
  Exp.TemplateVarArgExp = <[ <{ExpVarArg ","}+> ]>
  ExpVarArg.ExpVarArgFor = <for ( <Id> : <Sort> in <Exp> <OptFilter> ) { <{ExpVarArg ","}*> }>
  ExpVarArg.ExpVarArgForInferred = <for ( <Id> in <Exp> <OptFilter> ) { <{ExpVarArg ","}*> }>
  ExpVarArg.ExpVarArgForAll = <for ( <Id> : <Sort> <OptFilter> ) { <{ExpVarArg ","}*> }>
  ExpVarArg.ExpVarArgForCount = <for ( <Id> : Int from <Exp> to <Exp> ) { <{ExpVarArg ","}*> }>
  ExpVarArg.ExpVarArg = <( <{ExpOrTemplateArg ","}*> )>

  ExpOrTemplateArg.ExpVarArgExp = <<Exp>>
  ExpOrTemplateArg.ExpVarArgElements = <{ <TemplateElement*> }>

context-free sorts

  HTMLWrapper HTMLWrapperAssigns HTMLWrapperBody HTMLWrapperAssign

context-free syntax

  HTMLWrapper.HTMLWrapper = <
    htmlwrapper <HTMLWrapperBody>
  >
  HTMLWrapperAssigns.HTMLWrapperAssigns = <[<HTMLWrapperAssign*> ]>
  HTMLWrapperAssigns.HTMLWrapperAssignsNone = <>

  HTMLWrapperAssign.HTMLWrapperAssign = <<Attribute>>
  HTMLWrapperAssign.HTMLWrapperAssignComma = <<Attribute> ,>

  TemplateDefinition = HTMLWrapper
  TemplateDefinition.HTMLWrapperMultiple = <
    htmlwrapper {
      <HTMLWrapperBody*>
    }
  >
  HTMLWrapperBody.HTMLWrapperBody = <<Id> <Id> <HTMLWrapperAssigns>>

lexical syntax

  TemplateId = "htmlwrapper" {reject}

context-free sorts

  TemplateName

context-free syntax

  TemplateName.TemplateName = <id>
  Exp = TemplateName

lexical syntax

  VarId = "id" {reject}

context-free restrictions

  TemplateName -/- [a-zA-Z0-9\_]
