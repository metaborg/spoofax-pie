module WebDSL-Lexical

lexical sorts

  QId TemplateId VarId FAVarId FunId PropertyId Id PageId ExtendedId SectionName

lexical syntax

  QId = Id
  QId = QId "." Id
  TemplateId = Id %% hook for reject rules on templatecall names
  VarId = Id
  FAVarId = VarId
  FunId = Id
  PropertyId = Id
  Id = [a-zA-Z] [a-zA-Z0-9\_]*
  PageId = [a-zA-Z] [a-zA-Z0-9\_\-]*
  ExtendedId = [a-zA-Z0-9\_\.] [a-zA-Z0-9\-\_\.]*
  SectionName = ~[\n\r]*

context-free sorts

  ModuleName ModulePart ImportName OptWildcardImport

context-free syntax

  ModulePart.ModulePart = <<ExtendedId>>
  OptWildcardImport.WildcardImport = "/-"
  OptWildcardImport.NoWildcardImport = <>

syntax

  ModuleName-CF.ModuleName = { ModulePart-CF "/"}+
  ImportName-CF.ImportName = ModuleName-CF OptWildcardImport-CF

lexical restrictions

  Id -/- [a-zA-Z0-9\_]
  PageId -/- [a-zA-Z0-9\_\-]
  ModuleName -/- [a-zA-Z0-9\/]

lexical sorts

   Int Long Float FloatDigits ExponentPart SignedInteger

lexical syntax

  Int = "-"? [0-9]+
  Long = "-"? [0-9]+ "L"
  Float = "-"? FloatDigits ExponentPart? [fFdD]?
  FloatDigits = [0-9]* "." [0-9]+
  FloatDigits = [0-9]+
  ExponentPart = [eE] SignedInteger
  SignedInteger = [\+\-]? [0-9]+
  Float = "-"? [0-9]+ {reject}
  FloatDigits = "." {reject}

lexical restrictions

  Int -/- [0-9]
  Int -/- [L]             // to avoid longs getting parsed as an integer followed by a template call
  Int -/- [eEfFdD]        // to avoid floats getting parsed as an integer followed by a template call
  Float -/- [fFdD]
  FloatDigits -/- [0-9]
  SignedInteger -/- [0-9]

context-free sorts

  String StringPart StringInterpExp

%% Kernel syntax is required here since we do not want LAYOUT to be parsed between
%% the first QMLex and StringLex
syntax

  String-CF.String = "\"" StringPart-CF* "\""

  StringPart-CF.StringValue = StringLex-LEX
  StringPart-CF.InterpValue = "~" StringInterpExp-CF

  StringInterpExp-CF.InterpSimpleExp = SimpleExp-CF

context-free restrictions

  StringInterpExp -/- [\.\(]

context-free sorts

  OutputShorthand

context-free syntax
%% ~SimpleExp and ~(Exp) shorthand for output template call

  OutputShorthand.OutputShorthandSimpleExp = "~" SimpleExp

context-free sorts

  SimpleExp

context-free syntax
%% SimpleExp: specific commonly occuring expressions allowed directly after '~' inside string
%% allowing all expressions directly after '~' causes too many ambiguities
%% parentheses expression is used as delimiter for inserting any expression
%% allowed after '~': var/fieldaccess/thiscall/call/brackets a, a.b, a(), a.b(), (exp)
%% a '.' after a SimpleExp must be rejected as part of String to avoid amb, e.g. not allowed: "~a."
%% in these cases, use '()' if a '.' is needed as part of the string,       e.g.     allowed: "~(a)."

  SimpleExp.SimpleVar = Id
  SimpleExp.SimpleFieldAccess = <<SimpleExp> . <PropertyId>>

lexical sorts

  QMLex StringLex StringChar HexPart

lexical syntax

  QMLex = "\""
  StringLex = StringChar+
  StringChar = ~[\"\n\~\\]
  StringChar = "\\" [0-9btnfr\'\"\\\~]
  HexPart = [0-9a-fA-F]
  StringChar = "\\u" HexPart HexPart HexPart HexPart

lexical restrictions

  StringLex -/- ~[\"\n\~]

lexical sorts

  InsideComment CommentChar NewLineEOF EOF

lexical syntax
  LAYOUT     = [\ \t\n\r]
  LAYOUT     = "//" ~[\n\r]* NewLineEOF
  LAYOUT     = "/*" InsideComment* "*/"
  InsideComment  = ~[\*]
  InsideComment  = CommentChar
  CommentChar    = [\*]
  NewLineEOF = [\n\r]
  NewLineEOF = EOF
  EOF        =

lexical restrictions
  CommentChar -/- [\/]
  EOF         -/- ~[]

context-free restrictions

  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
  SectionName -/- ~[\n\r]

lexical sorts

  Word

lexical syntax

  Word = ~[\ \t\n\r\}]+

lexical restrictions

  Word -/- ~[\ \t\n\r\}]

lexical sorts

  SimpleSortLex GenericSortLex

lexical syntax

  SimpleSortLex = [A-Z] [a-zA-Z0-9\_]*
  GenericSortLex = Id
  GenericSortLex = "Ref" {reject}

lexical restrictions

  SimpleSortLex -/- [a-zA-Z0-9\_]
