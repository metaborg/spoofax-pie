module static-semantics/webdsl-native

imports
  static-semantics/actions/functions

  static-semantics/types/built-ins

  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // native class declaration and resolving

  declareNativeClass : scope * string * scope
  declareNativeClass(s, c, s_class) :-
    declareType(s, c, NATIVECLASS(s_class)).

rules // subtype compatiblity

  typeCompatibleB(NATIVECLASS(s_sub), NATIVECLASS(s_super)) = inherits(s_sub, s_super).

rules // declarations

  defOk(s, NativeClass(c, NCAlias(alias), NCSuperNone(), elems)) :- {s_super}
    object(s) == BUILTINTYPE(_, s_super),
    nativeClassOk(s, c, alias, s_super, elems).

  defOk(s, NativeClass(c, NCAlias(alias), NCSuper(super), elems)) :- {super' s_super}
    resolveType(s, super) == [(_, (super', NATIVECLASS(s_super)))] | error $[Native class [super] is not defined] @c,
    nativeClassOk(s, c, alias, s_super, elems),
    @super.ref := super'.

  nativeClassOk : scope * string * string * scope * list(NCElement)
  nativeClassOk(s, c, alias, s_super, elems) :- {s_class}
    new s_class, s_class -INHERIT-> s_super, s_class -DEF-> s,
    noCircularInheritance(s_class) | error $[Circular inhertitance detected] @c,
    declareNativeClass(s, alias, s_class),
    declareVar(s, alias, STATICNATIVECLASS(s_class)), // declare class name as global variable that refers to the static scope
    declareNativeClassConstructors(s, s_class, alias, elems),
    nativeClassElementsOk(s, s_class, elems).

rules // native class elements

  nativeClassElementsOk maps nativeClassElementOk(*, *, list(*))
  nativeClassElementOk : scope * scope * NCElement

  // constructors are declared in their own rule declareNativeClassConstructors
  nativeClassElementOk(_, _, NCConstructor(_)).
  nativeClassElementOk(_, _, NCConstructorFromStatic(_, _)).

  nativeClassElementOk(s, s_class, NCProperty(x, nt)) :- {t}
    t == typeOfNativeType(s, nt),
    declareVar(s_class, x, t),
    noDuplicateVarDefsInSuper(s_class, x) | error $[Cannot override existing property [x]] @x.

  nativeClassElementOk(s, s_class, NCFunctionElement(function)) :-
    nativeClassFunctionOk(s, s_class, function).

  nativeClassElementOk(s, s_class, NCFunctionFromStaticElement(NCFunctionFromStatic(_, function))) :-
    nativeClassFunctionOk(s, s_class, function).

rules // native class functions

  nativeClassFunctionOk : scope * scope * NCFunction
  nativeClassFunctionOk(s, s_class, NCFunction(NCFunctionStatic(), f, args, NCFunctionReturn(return))) :- {argTypes returnType}
    argTypes   == typesOfNativeTypes(s, args),
    returnType == typeOfNativeType(s, return),
    declareStaticFunction(s_class, f, argTypes, returnType).

  nativeClassFunctionOk(s, s_class, NCFunction(NCFunctionStaticNone(), f, args, NCFunctionReturn(return))) :- {argTypes returnType}
    argTypes   == typesOfNativeTypes(s, args),
    returnType == typeOfNativeType(s, return),
    declareFunction(s_class, f, argTypes, returnType).

rules // constructors

  declareNativeClassConstructors maps declareNativeClassConstructor(*, *, *, list(*))
  declareNativeClassConstructor : scope * scope * string * NCElement
  declareNativeClassConstructor(_, _, _, _).
  declareNativeClassConstructor(s, s_class, name, NCConstructor(args)) :- {argTypes}
    argTypes == typesOfNativeTypes(s, args),
    declFunctionGlobal(s, name, argTypes, NATIVECLASS(s_class)).

  declareNativeClassConstructor(s, s_class, name, NCConstructorFromStatic(_, args)) :- {argTypes}
    argTypes == typesOfNativeTypes(s, args),
    declFunctionGlobal(s, name, argTypes, NATIVECLASS(s_class)).

rules // typing of expressions

  typeOfCall(s, NATIVECLASS(s_class), f, args) = typeOfFunctionCallInternal(s, f, args, funSigs) :-
    funSigs == resolveEntityFunction(s_class, f).

  typeOfCall(s, STATICNATIVECLASS(s_class), f, args) = typeOfFunctionCallInternal(s, f, args, funSigs) :-
    funSigs == resolveStaticEntityFunction(s_class, f).

rules // typing of native types

  typesOfNativeTypes maps typeOfNativeType(*, list(*)) = list(*)
  typeOfNativeType : scope * NativeType -> TYPE
  typeOfNativeType(s, NativeSimpleType(t)) = typeOfSort(s, SimpleSort(t)).
  typeOfNativeType(s, NativeGenericType("List", [t])) =  LIST(typeOfNativeType(s, t)).
  typeOfNativeType(s, NativeGenericType("Set", [t])) = SET(typeOfNativeType(s, t)).
  typeOfNativeType(s, t@NativeGenericType(_, _)) = UNTYPED() :- false | error $[Only lists and sets with one type parameter are supported] @t.
