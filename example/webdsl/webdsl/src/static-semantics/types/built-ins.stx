module static-semantics/types/built-ins

imports
  static-semantics/actions/functions

  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-native
  static-semantics/webdsl-types
  static-semantics/webdsl

rules

  declareBuiltInType : scope * string
  declareBuiltInType(s, name) :- {s_type s_object}
    object(s) == BUILTINTYPE(_, s_object),
    new s_type, s_type -INHERIT-> s_object, s_type -DEF-> s,
    declareExtendEntity(s, name, s_type), // declare s_type to be linked to type name
    extendEntityScopes(resolveExtendEntity(s, name), s_type),
    declareType(s, name, BUILTINTYPE(name, s_type)),
    declareVar(s, name, STATICBUILTINTYPE(name, s_type)). // declare class name as global variable that refers to the static scope

  declareBuiltInSubType : scope * string * string
  declareBuiltInSubType(s, sub, super) :- {s_sub s_super}
    builtInType(s, super) == BUILTINTYPE(super, s_super),
    new s_sub, s_sub -INHERIT-> s_super, s_sub -DEF-> s,
    noCircularInheritance(s_sub) | error $[Circular inheritance detected in built-in type [sub]],
    declareExtendEntity(s, sub, s_sub), // declare s_type to be linked to type name
    extendEntityScopes(resolveExtendEntity(s, sub), s_sub),
    declareType(s, sub, BUILTINTYPE(sub, s_sub)),
    declareVar(s, sub, STATICBUILTINTYPE(sub, s_sub)).

  builtInType : scope * string -> TYPE
  builtInType(s, name) = t :- {ts}
    resolveType(s, name) == ts | error $[Built-in type [name] does not exist [ts]],
    ts == [(_, (_, t@BUILTINTYPE(name, _)))] | error $[Built-in type [name] does not exist [ts]].

rules

  int   : scope -> TYPE
  int(s)   = builtInType(s, "Int").
  float : scope -> TYPE
  float(s) = builtInType(s, "Float").
  long  : scope -> TYPE
  long(s)  = builtInType(s, "Long").

  string      : scope -> TYPE
  string(s)       = builtInType(s, "String").
  secret      : scope -> TYPE
  secret(s)       = builtInType(s, "Secret").
  email       : scope -> TYPE
  email(s)        = builtInType(s, "Email").
  url         : scope -> TYPE
  url(s)          = builtInType(s, "URL").
  wikitext    : scope -> TYPE
  wikitext(s)     = builtInType(s, "WikiText").
  text        : scope -> TYPE
  text(s)         = builtInType(s, "Text").
  patch       : scope -> TYPE
  patch(s)        = builtInType(s, "Patch").
  placeholder : scope -> TYPE
  placeholder(s)  = builtInType(s, "Placeholder").

  date     : scope -> TYPE
  date(s)     = builtInType(s, "Date").
  datetime : scope -> TYPE
  datetime(s) = builtInType(s, "DateTime").
  time     : scope -> TYPE
  time(s)     = builtInType(s, "Time").

  bool  : scope -> TYPE
  bool(s)  = builtInType(s, "Bool").
  uuid  : scope -> TYPE
  uuid(s)  = builtInType(s, "UUID").
  file  : scope -> TYPE
  file(s)  = builtInType(s, "File").
  image : scope -> TYPE
  image(s) = builtInType(s, "Image").

  entity : scope -> TYPE
  entity(s) = definedTypeNoRef(s, "Entity").

  object : scope -> TYPE
  object(s) = definedTypeNoRef(s, "Object").

  declareTypeBuiltIns : scope
  declareTypeBuiltIns(s) :-
    // numeric types
    declareBuiltInType(s, "Int"),
    declareBuiltInType(s, "Float"),
    declareBuiltInType(s, "Long"),

    // string types
    declareBuiltInType(s, "String"),
    declareBuiltInType(s, "Secret"),
    declareBuiltInSubType(s, "Email", "String"),
    declareBuiltInType(s, "URL"),
    declareBuiltInType(s, "WikiText"),
    declareBuiltInType(s, "Text"),
    declareBuiltInType(s, "Patch"),
    declareBuiltInType(s, "Placeholder"),

    // date types
    declareBuiltInType(s, "DateTime"),
    declareBuiltInSubType(s, "Date", "DateTime"),
    declareBuiltInSubType(s, "Time", "DateTime"),

    // misc
    declareBuiltInType(s, "Bool"),
    declareBuiltInType(s, "UUID"),
    declareBuiltInType(s, "File"),
    declareBuiltInType(s, "Image").

  declareTypeBuiltInFunctions : scope
  declareTypeBuiltInFunctions(s) :- {int string float s_int s_file s_image s_float}
    int == int(s),
    string == string(s),
    float == float(s),

    new s_int, declareExtendEntity(s, "Int", s_int),
    declFunctionEntity(s_int, "floatValue", [], float, FALSE()),

    new s_file, declareExtendEntity(s, "File", s_file),
    declFunctionEntity(s_file, "download"           , []      , VOID(), FALSE()),
    declFunctionEntity(s_file, "download"           , [string], VOID(), FALSE()),
    declFunctionEntity(s_file, "fileName"           , []      , string, FALSE()),
    declFunctionEntity(s_file, "fileNameForDownload", []      , string, FALSE()),

    declareExtendEntity(s, "Image", s_file), // also expose file functions to image
    new s_image, declareExtendEntity(s, "Image", s_image),
    declFunctionEntity(s_image, "resize"   , [int, int]          , VOID()  , FALSE()),
    declFunctionEntity(s_image, "crop"     , [int, int, int, int], VOID()  , FALSE()),
    declFunctionEntity(s_image, "getWidth" , []                  , int     , FALSE()),
    declFunctionEntity(s_image, "getHeight", []                  , int     , FALSE()),
    declFunctionEntity(s_image, "clone"    , []                  , image(s), FALSE()),

    new s_float, declareExtendEntity(s, "Float", s_float),
    declFunctionEntity(s_float, "round" , [], int, FALSE()),
    declFunctionEntity(s_float, "floor" , [], int, FALSE()),
    declFunctionEntity(s_float, "ceil"  , [], int, FALSE()),
    declFunctionEntity(s_float, "log"   , [], float, FALSE()),
    declFunctionEntity(s_float, "log2"  , [], float, FALSE()).

rules // built-in functions and properties for built-in generic type List

  typeOfProperty(s, LIST(t), "length") = int(s).
  typeOfProperty(s, LIST(t), "first") = t.
  typeOfProperty(s, LIST(t), "last") = t.

  typeOfCall(s, LIST(t), "add", [arg]) = VOID() :-
    typeCompatible(typeOfExp(s, arg), t).

  typeOfCall(s, LIST(t), "remove", [arg]) = VOID() :-
    typeCompatible(typeOfExp(s, arg), t).

  typeOfCall(s, LIST(_), "clear", []) = VOID().

  typeOfCall(s, rt@LIST(t), "addAll", [arg]) = rt :- {argType}
    argType == typeOfExp(s, arg),
    or(
      typeCompatibleB(argType, LIST(t)),
      typeCompatibleB(argType, SET(t))
    ).

  typeOfCall(s, LIST(t), "set", []) = SET(t).

  typeOfCall(s, LIST(t), "indexOf", [arg]) = int(s) :-
    typeCompatible(typeOfExp(s, arg), t).

  typeOfCall(s, LIST(t), "get", [arg]) = t :-
    typeCompatible(typeOfExp(s, arg), int(s)).

  typeOfCall(s, LIST(t), "set", [arg1, arg2]) = VOID() :-
    typeCompatible(typeOfExp(s, arg1), int(s)),
    typeCompatible(typeOfExp(s, arg2), t).

  typeOfCall(s, LIST(t), "insert", [arg1, arg2]) = VOID() :-
    typeCompatible(typeOfExp(s, arg1), int(s)),
    typeCompatible(typeOfExp(s, arg2), t).

  typeOfCall(s, LIST(t), "removeAt", [arg]) = VOID() :-
    typeCompatible(typeOfExp(s, arg), int(s)).

  typeOfCall(s, lt@LIST(_), "subList", [arg1, arg2]) = lt :-
    typeCompatible(typeOfExp(s, arg1), int(s)),
    typeCompatible(typeOfExp(s, arg2), int(s)).

  typeOfCall(s, LIST(t), "random", []) = t.

rules // built-in functions specifically for lists of strings

  typeOfCall(s, LIST(BUILTINTYPE("String", _)), "concat", []) = string(s).

  typeOfCall(s, LIST(BUILTINTYPE("String", _)), "concat", [arg]) = string :- { t }
    string == string(s),
    t == typeOfExp(s, arg),
    typeCompatible(t, string) | error $[Concatenation separator type must be compatible with String, [t] given] @arg.

rules // built-in functions and properties for built-in generic type Set

  typeOfProperty(s, SET(t), "length") = int(s).
  typeOfProperty(s, SET(t), "first") = t.
  typeOfProperty(s, SET(t), "last") = t.

  typeOfCall(s, SET(t), "get", [arg]) = t :-
    typeCompatible(typeOfExp(s, arg), int(s)).

  typeOfCall(s, SET(t), "add", [arg]) = VOID() :-
    typeCompatible(typeOfExp(s, arg), t).

  typeOfCall(s, SET(t), "remove", [arg]) = VOID() :-
    typeCompatible(typeOfExp(s, arg), t).

  typeOfCall(s, SET(_), "clear", []) = VOID().

  typeOfCall(s, rt@SET(t), "addAll", [arg]) = rt :- {argType}
    argType == typeOfExp(s, arg),
    or(
      typeCompatibleB(argType, LIST(t)),
      typeCompatibleB(argType, SET(t))
    ).

  typeOfCall(s, SET(t), "list", []) = LIST(t).

  typeOfCall(s, SET(t), "random", []) = t.

rules // built-in properties for built-in generic type Ref

  typeOfCall(s, REF(t), "getEntity", []) = entity(s).

  typeOfCall(s, REF(t), "getValidationErrors", []) = LIST(string(s)).

  typeOfCall(s, REF(LIST(t)), "getAllowed", []) = LIST(t).
  typeOfCall(s, REF(SET(t)) , "getAllowed", []) = LIST(t).
  typeOfCall(s, REF(t)      , "getAllowed", []) = LIST(t).

  typeOfCall(s, REF(t), "getReflectionProperty", []) = definedTypeIfExists(s, "ReflectionProperty").
