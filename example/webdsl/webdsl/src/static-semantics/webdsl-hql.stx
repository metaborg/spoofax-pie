module static-semantics/webdsl-hql

imports
  static-semantics/types/built-ins

  static-semantics/webdsl-types
  static-semantics/webdsl

rules

  typeOfExp(s, HqlExp(hqlExp)) = typeOfHqlExp(s, hqlExp).

  typeOfHqlExp : scope * HqlExp -> TYPE
  typeOfHqlExp(s, HqlQuery(queryRule)) = typeOfHqlQueryRule(s, queryRule).
  typeOfHqlExp(s, HqlQueryLimit(queryRule, _)) = typeOfHqlQueryRule(s, queryRule).
  typeOfHqlExp(s, HqlQueryLimitOffset(queryRule, _, _)) = typeOfHqlQueryRule(s, queryRule).

  typeOfHqlQueryRule : scope * HQLQueryRule -> TYPE
  typeOfHqlQueryRule(s, QueryRule(SelectFrom(select, from), where, groupBy, orderBy)) = typeOfHqlSelectFrom(s, select, from).

  typeOfHqlSelectFrom : scope * HQLSelectClauseOpt * HQLFromClause -> TYPE
  typeOfHqlSelectFrom(s, Select(_, selection), _)    = typeOfHqlSelect(s, selection).
  typeOfHqlSelectFrom(s, SelectNone()        , from) = typeOfHqlFrom(s, from).

  typeOfHqlSelect : scope * HQLSelection -> TYPE
  typeOfHqlSelect(s, SelectedProperties([aliasedExp])) = typeOfHqlAliasedExpression(s, aliasedExp).
  typeOfHqlSelect(_, ps@SelectedProperties([_ | [_]])) = t :-
    try { false } | warning $[Selection of multiple properties not yet implemented] @ps.

  typeOfHqlFrom : scope * HQLFromClause -> TYPE
  typeOfHqlFrom(s, FromClause([FromRangeJoin(fromRange, _) | _])) = typeOfHqlFromRange(s, fromRange).

  typeOfHqlFromRange : scope * HQLFromRange -> TYPE
  typeOfHqlFromRange(s, FromClassOrOuterQueryPath(Path([ent]), _, _)) = LIST(t) :-
    t == definedType(s, ent),
    t == ENTITY(_) | error $[[ent] is not an entity] @ent.

  typeOfHqlAliasedExpression : scope * HQLAliasedExpression -> TYPE
  typeOfHqlAliasedExpression(s, AliasedExpression(hqlExp, AsAliasNone())) = typeOfHqlExpression(s, hqlExp).
  typeOfHqlAliasedExpression(_, AliasedExpression(_, a@AsAlias(_))) = t :-
    try { false } | warning $[Aliased expressions not yet implemented] @a.

  typeOfHqlExpression : scope * HQLExpression -> TYPE
  typeOfHqlExpression(s, e) = t :- try { false } | warning $[HQL Expression [e] not yet implemented] @e.
  typeOfHqlExpression(s, HQLAvg(e)) = float(s) :- { t } t == typeOfHqlExpression(s, e).
  typeOfHqlExpression(s, HQLSum(e)) = int(s) :- { t } t == typeOfHqlExpression(s, e). // TO-DO: possibly return float instead of int, based on selection
  typeOfHqlExpression(s, HQLMin(e)) = int(s) :- { t } t == typeOfHqlExpression(s, e). // TO-DO: possibly return float instead of int, based on selection
  typeOfHqlExpression(s, HQLMax(e)) = int(s) :- { t } t == typeOfHqlExpression(s, e). // TO-DO: possibly return float instead of int, based on selection
  typeOfHqlExpression(s, HQLCountStar()) = int(s).
  typeOfHqlExpression(s, HQLCount(e)) = int(s) :- { t } t == typeOfHqlExpression(s, e).
