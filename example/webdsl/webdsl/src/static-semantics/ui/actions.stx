module static-semantics/ui/actions

imports
  static-semantics/actions/functions

  static-semantics/types/built-ins

  static-semantics/ui/template-calls

  static-semantics/webdsl-types
  static-semantics/webdsl-ui
  static-semantics/webdsl

rules // var decls in templates and pages

  templateElementOk(s, s_decl, _, TEVarDecl(varDecl))            :- templateVarDeclOk(s, s_decl, varDecl).
  templateElementOk(s, s_decl, _, RequestScopeTemplate(varDecl)) :- templateVarDeclOk(s, s_decl, varDecl).
  templateElementOk(s, s_decl, _, LocalScopeTemplate(varDecl))   :- templateVarDeclOk(s, s_decl, varDecl).

  templateVarDeclOk: scope * scope * VarDecl
  templateVarDeclOk(s, s_decl, TemplateVarDecl(x, sort)) :- {t}
    t == typeOfSort(s, sort),
    inequalType(t, UNTYPED()) | error $[Unknown type [sort]] @sort,
    declareVar(s_decl, x, t),
    @x.type := t.

  templateVarDeclOk(s, s_decl, TemplateVarDeclInit(x, sort, exp)) :- {t}
    t == typeOfSort(s, sort),
    typeCompatible(typeOfExp(s, exp), t) | error $[Expression [exp] is not of type [sort]] @exp,
    declareVar(s_decl, x, t),
    @x.type := t.

  templateVarDeclOk(s, s_decl, TemplateVarDeclInitInferred(x, exp)) :- {t}
    t == typeOfExp(s, exp),
    inequalType(t, UNTYPED()) | error $[Unable to infer type of [exp]] @exp,
    declareVar(s_decl, x, t),
    @x.type := t.

rules // action definitions

  templateActionOk : scope * scope * string * list(FormalArg) * list(Statement) * BOOL
  templateActionOk(s, s_pha, a, args, stmts, declare) :- {s_fun s_fun_body argTypes}
    new s_fun, s_fun -P-> s, // TO-DO: possibly create different label for edges out of actions, abusing P label here
    argTypes == typesOfArgs(s, args),
    declareParameters(s_fun, zipArgTypes(args, argTypes)),
    new s_fun_body, s_fun_body -P-> s_fun,
    optionallyDeclareAction(s_pha, a, argTypes, declare),
    stmtsOk(s_fun_body, stmts, PAGE(_)).

  optionallyDeclareAction : scope * string * list(TYPE) * BOOL
  optionallyDeclareAction(_, _, _, FALSE()).
  optionallyDeclareAction(s, a, ts, TRUE()) :- declareAction(s, a, ts).

  defOk(_, Action2Definition(Action(_, a, _, _))) :- false | error $[Actions are only allowed in pages and templates] @a.

rules // action calls

  templateElementOk(s, _, s_pha, Action2TemplateElement(Action(_, a, FormalArgs(args), Block(stmts)))) :-
    templateActionOk(s, s_pha, a, args, stmts, TRUE()).

  actionCallOrInlineOrExpOk : scope * ActionCallOrInlineOrExp
  actionCallOrInlineOrExpOk(s, ActionCallOrInline(a)) :- actionCallOrInlineOk(s, a).
  actionCallOrInlineOrExpOk(s, ActionCallOrInlineExp(PropertySubmitExp(e))) :-
    typeCompatible(typeOfExp(s, e), string(s)) | error $[Expression must be compatible with type String].

  actionCallOrInlineOk : scope * ActionCallOrInline
  actionCallOrInlineOk(s, ActionCall(ThisCall(a, args))) :- {argTypes a' ts}
    argTypes == typesOfExps(s, args),
    resolveAction(s, a) == [(_, (a', ACTION(ts))) | _] | error $[Action [a] not defined] @a,
    typesCompatible(argTypes, ts) == TRUE() | error $[Given argument types not compatible with action definition. Got [argTypes] but expected [ts]] @args,
    @a.ref := a'.

  actionCallOrInlineOk(s, InlineAction(Block(stmts))) :-
    templateActionOk(s, s, "", [], stmts, FALSE()).

rules // action blocks in templates

  templateElementOk(s, _, _, Init(Block(stmts))) :-
    stmtsOk(s, stmts, PAGE(_)).

  templateElementOk(s, _, _, DataBindAction(Block(stmts))) :-
    stmtsOk(s, stmts, UNTYPED()).

  templateElementOk(s, _, _, RenderAction(Block(stmts))) :-
    stmtsOk(s, stmts, UNTYPED()).

  templateElementOk(s, _, _, AllPhasesAction(Block(stmts))) :-
    stmtsOk(s, stmts, UNTYPED()).

  templateElementOk(s, _, _, ValidateAction(Block(stmts))) :-
    stmtsOk(s, stmts, UNTYPED()).

rules // statements

  stmtOk(s, _, r@Return(_), PAGE(_)) :- false | error $[Expected page call in return statement].
  stmtOk(s, _, r@Return(ThisCall2Exp(ThisCall(p, exps))), PAGE(_)) :-
    pageCallOk_internal(s, p, exps).

rules // expressions

  // pass new scope as placeholder and action scope because passing `s`
  // would introduce a CloseLabel exception in the concurrent solver.
  // this causes any actions/placeholders references and declarations to fail
  // but this is not a big deal since there's no use case for working with
  // actions/placeholders in rendertemplate(...) and validatetemplate(...) calls

  typeOfExp(s, RenderTemplateFunctionCall(tc)) = string(s) :-
    templateCallOk(s, new, tc).

  typeOfExp(s, ValidateTemplateFunctionCall(tc)) = string(s) :-
    templateCallOk(s, new, tc).
