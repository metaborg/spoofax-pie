module static-semantics/actions/functions

imports
  static-semantics/types/built-ins

  static-semantics/webdsl-actions
  static-semantics/webdsl-entities
  static-semantics/webdsl-types
  static-semantics/webdsl

rules // functions calls

  typeOfExp(s, ThisCall2Exp(ThisCall(f, argExps))) = t :-
    t == typeOfFunctionCall(s, f, argExps).

  typeOfSimpleExp(s, SimpleThisCall(ThisCall(f, argExps))) = t :-
    t == typeOfFunctionCall(s, f, argExps).

  typeOfPlaceholderExp(s, PHThisCall(ThisCall(f, argExps))) = t :-
    t == typeOfFunctionCall(s, f, argExps).

  typeOfExp(s, Call(exp, f, argExps)) = t :- { expType s_eval }
    expType == typeOfExp(s, exp),
    new s_eval, s_eval -P-> s,
    t == typeOfCall(s_eval, expType, f, argExps).

  typeOfSimpleExp(s, SimpleCall(exp, f, argExps)) = t :- { expType s_eval }
    expType == typeOfSimpleExp(s, exp),
    new s_eval, s_eval -P-> s,
    t == typeOfCall(s_eval, expType, f, argExps).

  typeOfPlaceholderExp(s, PHCall(exp, f, argExps)) = t :- { expType s_eval }
    expType == typeOfExp(s, exp),
    new s_eval, s_eval -P-> s,
    t == typeOfCall(s_eval, expType, f, argExps).

  typeOfFunctionCall : scope * string * list(Exp)-> TYPE
  typeOfFunctionCall(s, f, args) = typeOfFunctionCallInternal(s, f, args, funSigs) :-
    funSigs == resolveFunction(s, f).

  typeOfCall : scope * TYPE * string * list(Exp)-> TYPE
  typeOfCall(s, ENTITY(s_ent), f, args) = typeOfFunctionCallInternal(s, f, args, funSigs) :-
    funSigs == resolveEntityFunction(s_ent, f).

  typeOfCall(s, STATICENTITY(s_ent), f, args) = typeOfFunctionCallInternal(s, f, args, funSigs) :-
    funSigs == resolveStaticEntityFunction(s_ent, f).

  typeOfCall(s, REF(t), f, args) = typeOfCall(s, t, f, args).
  typeOfCall(s, t, f, args) = UNTYPED() :- false | error $[First subexpression of a function call must be of type entity, [t] found].

  typeOfFunctionCallInternal : scope * string * list(Exp) * list((path * (string * TYPE))) -> TYPE
  typeOfFunctionCallInternal(s, f, args, funSigs) = t :- { argTypes f' result }
    argTypes == typesOfExps(s, args),
    result == mostSpecificSigs(argTypes, typeCompatibleSigs(funSigs, argTypes)),
    singleSignature(result, "function", f) | error $[Cannot resolve function [f] with compatible argument types] @f,
    [(f', FUNCTION(_, t, _)) | _] == result | error $[Cannot resolve function [f] with compatible argument types] @f,
    @f.ref := f',
    @f.type := t.

  singleSignature : list((string * TYPE)) * string * string
  singleSignature([], type, f) :- false | error $[Cannot resolve [type] [f] with compatible argument types] @f.
  singleSignature([_ | [_ | _]], type, f) :- false | error $[Found multiple definitions of [type] [f] with equally specific argument types] @f.
  singleSignature(_, _, _).

rules // invoke time interval

  defOk(s, InvokeEvery(exp, TimeInterval(parts))) :-
    typed(s, exp),
    timeIntervalPartsOk(s, parts).

  timeIntervalPartsOk maps timeIntervalPartOk(*, list(*))
  timeIntervalPartOk : scope * TimeIntervalPart
  timeIntervalPartOk(s, Weeks(exp))        :- typeOfExp(s, exp) == int(s).
  timeIntervalPartOk(s, Days(exp))         :- typeOfExp(s, exp) == int(s).
  timeIntervalPartOk(s, Hours(exp))        :- typeOfExp(s, exp) == int(s).
  timeIntervalPartOk(s, Minutes(exp))      :- typeOfExp(s, exp) == int(s).
  timeIntervalPartOk(s, Seconds(exp))      :- typeOfExp(s, exp) == int(s).
  timeIntervalPartOk(s, Milliseconds(exp)) :- typeOfExp(s, exp) == int(s).

rules // function definitions

  // global functions
  defOk(s, GlobalFunction(f)) :- globalFunctionOk(s, f).
  defOk(s, CachedGlobalFunction(f)) :-
    canBeCached(s, f),
    globalFunctionOk(s, f).

  // defOk(s, ExtendGlobalFunction(f)) :- functionOk(s, f). TO-DO: support function extensions

  // analyze a function:
  // - argument types and return type must be defined
  // - declare arguments as variables in function scope
  // - analyze function body
  // - declare function in given scope
  globalFunctionOk : scope * Function
  globalFunctionOk(s_outer, Function(name, FormalArgs(args), OptSortSome(returnSort), Block(stmts))) :- {argTypes returnType s_function s_body}
    returnType == typeOfSort(s_outer, returnSort),
    new s_function, s_function -F-> s_outer,
    argTypes == typesOfArgs(s_outer, args),
    declareParameters(s_function, zipArgTypes(args, argTypes)),
    new s_body, s_body -P-> s_function,
    stmtsOk(s_body, stmts, returnType),
    declFunctionGlobal(s_outer, name, argTypes, returnType).

  entityFunctionOk : scope * Function * BOOL
  entityFunctionOk(s_ent, Function(name, FormalArgs(args), OptSortSome(returnSort), Block(stmts)), static) :- {argTypes returnType s_function s_body}
    returnType == typeOfSort(s_ent, returnSort),
    new s_function, s_function -F-> s_ent,
    argTypes == typesOfArgs(s_ent, args),
    declareParameters(s_function, zipArgTypes(args, argTypes)),
    new s_body, s_body -P-> s_function,
    stmtsOk(s_body, stmts, returnType),
    declFunctionEntity(s_ent, name, argTypes, returnType, static),
    noDuplicateFunDefsEntity(s_ent, name, argTypes).

  // predicate that defines when a function can be cached
  canBeCached : scope * Function
  canBeCached(s, Function(function_name, FormalArgs([]), OptSortSome(returnSort), _)) :- inequalType(typeOfSort(s, returnSort), VOID()) | error $[Only functions that have a return type can be cached] @function_name.
  canBeCached(s, Function(function_name, FormalArgs([_|_]), _, _)) :- false | error $[Only functions without arguments can be cached] @function_name.

  // declare a function in a given scope
  // and define the relation typeOfFunDecl with signature (argument types  * return type)
  declFunctionGlobal : scope * string * list(TYPE) * TYPE
  declFunctionGlobal(s, f, args, return) :-
    declareFunction(s, f, args, return),
    noDuplicateFunDefsGlobal(s, f, args).

  declFunctionEntity : scope * string * list(TYPE) * TYPE * BOOL
  declFunctionEntity(s, f, args, return, TRUE()) :- declareStaticFunction(s, f, args, return).
  declFunctionEntity(s, f, args, return, FALSE()) :- declareFunction(s, f, args, return).

  // map syntactic types to semantic types
  typesOfArgs maps typeOfArg(*, list(*)) = list(*)
  typeOfArg : scope * FormalArg -> TYPE
  typeOfArg(s, Arg(_, sort)) = t :-
    t == typeOfSort(s, sort),
    inequalType(t, UNTYPED()) | error $[Unknown type [sort]] @sort.

  // create tuples of (arg_name * arg_type)
  zipArgTypes maps zipArgType(list(*), list(*)) = list(*)
  zipArgType : FormalArg * TYPE -> (string * TYPE)
  zipArgType(Arg(x, _), t) = (x, t).

  // predicate that defines when there are overlapping function signatures
  noDuplicateFunDefsGlobal : scope * string * list(TYPE)
  noDuplicateFunDefsGlobal(s, f, ts) :- {ps}
    resolveFunction(s, f) == ps,
    amountOfFunDeclsWithArgs(ps, ts, 0) == 1
        | error $[Duplicate definition of function [f] with argument types [ts]] @f.

  noDuplicateFunDefsEntity : scope * string * list(TYPE)
  noDuplicateFunDefsEntity(s, f, types) :- {ps}
    query function filter EXTEND?
                   and { f' :- f' == (f, _) }
                   in s |-> ps,
    amountOfFunDeclsWithArgs(filterFunctionResults(typesOf(ps), FALSE()), types, 0) == 1
        | error $[Duplicate definition of function [f] with argument types [types]] @f.

  // helper function for noDuplicateFunDefs that counts the amount of function with a given name and argument types
  amountOfFunDeclsWithArgs : list((path * (string * TYPE))) * list(TYPE) * int -> int
  amountOfFunDeclsWithArgs([], _, n) = n.
  amountOfFunDeclsWithArgs([(_, (_, FUNCTION(types, _, _))) | tail], types, n) = amountOfFunDeclsWithArgs(tail, types, i) :- i #= n + 1.
  amountOfFunDeclsWithArgs([_ | tail], types, n) = amountOfFunDeclsWithArgs(tail, types, n).

rules  // rules and functions for function overloading

  // function that gets all functions/templates with matching name and compatible argument types
  typeCompatibleSigs : list((path * (string * TYPE))) * list(TYPE) -> list((string * TYPE))
  typeCompatibleSigs(nameCompatibleSigs, args) = result :- {sigsZippedWithTypeCompatibility}
    sigsZippedWithTypeCompatibility == zipSigsWithTypesCompatible(args, dropPaths(nameCompatibleSigs)),
    result == filterCompatibleArgTypes(sigsZippedWithTypeCompatibility).

  // helper function for typeCompatibleSigs that prunes the list
  // of functions/templates based on the zipped BOOL with the signature
  filterCompatibleArgTypes : list((BOOL * (string * TYPE))) -> list((string * TYPE))
  filterCompatibleArgTypes([]) = [].
  filterCompatibleArgTypes([(TRUE() , f) | fs]) = [f | filterCompatibleArgTypes(fs)].
  filterCompatibleArgTypes([(FALSE(), _) | fs]) = filterCompatibleArgTypes(fs).

  // helper function for typeCompatibleSigs that zips the
  // signatures with whether the types are compatible with given argument types
  zipSigsWithTypesCompatible maps zipSigWithTypesCompatible(*, list(*)) = list(*)
  zipSigWithTypesCompatible : list(TYPE) * (string * TYPE) -> (BOOL * (string * TYPE))
  zipSigWithTypesCompatible(args, f@(_, FUNCTION(funArgs, _, _))) = (typesCompatible(args, funArgs), f).
  zipSigWithTypesCompatible(args, f@(_, TEMPLATE(templArgs, _))) = (typesCompatible(args, templArgs), f).

  // function that prunes the list of compatible signatures
  // to a list of most specific signatures
  mostSpecificSigs : list(TYPE) * list((string * TYPE)) -> list((string * TYPE))
  mostSpecificSigs(args, []) = [].     // In case no functions are compatible, return empty list
  mostSpecificSigs(args, fs@[_]) = fs. // In case of only one compatible signature, return that
  mostSpecificSigs(args, sigs) = mostSpecificSigs_helper(args, sigs, matchingSigs(stripRefTypes(args), sigs)).

  // helper function for mostSpecificFunSigs that returns
  // the exactly matching signatures if they exists,
  // else return the most specific (least inheritance) signatures
  mostSpecificSigs_helper : list(TYPE) * list((string * TYPE)) * list((string * TYPE)) -> list((string * TYPE))
  mostSpecificSigs_helper(args, sigs, matching) = matching.
  mostSpecificSigs_helper(args, sigs, [])       = filterLeastInheritanceAmount(minOfList(inheritanceAmounts), zipInheritanceAmountWithSig(inheritanceAmounts, sigs)) :-
    inheritanceAmounts == inheritanceAmounts(args, sigs).

  // helper function for mostSpecificFunSigs that returns the exactly matching signatures
  matchingSigs : list(TYPE) * list((string * TYPE)) -> list((string * TYPE))
  matchingSigs(_, []) = [].
  matchingSigs(args, [(x, FUNCTION(params, rt, static)) | fs]) = matchingSigs_helper(args, (x, FUNCTION(stripRefTypes(params), rt, static)), fs).
  matchingSigs(args, [(x, TEMPLATE(params, ajax))       | fs]) = matchingSigs_helper(args, (x, TEMPLATE(stripRefTypes(params), ajax)), fs).

  // helper function for matchingSigs that compares the argument types after stripping the Ref<> sorts
  matchingSigs_helper : list(TYPE) * (string * TYPE) * list((string * TYPE)) -> list((string * TYPE))
  matchingSigs_helper(args, f@(_, FUNCTION(args, _, _)), fs) = [f | matchingSigs(args, fs)].
  matchingSigs_helper(args, f@(_, TEMPLATE(args, _))   , fs) = [f | matchingSigs(args, fs)].
  matchingSigs_helper(args, _, fs) = matchingSigs(args, fs).

  // function that computes the total amount of inheritance edges from caller arguments to defined arguments
  inheritanceAmounts maps inheritanceAmount(*, list(*)) = list(*)
  inheritanceAmount : list(TYPE) * (string * TYPE) -> int
  inheritanceAmount(args, (_, FUNCTION(sigTypes, _, _))) = inheritanceAmount_helper(args, sigTypes).
  inheritanceAmount(args, (_, TEMPLATE(sigTypes, _)))    = inheritanceAmount_helper(args, sigTypes).

  // helper function for getInheritanceAmount that computers the total amount of inheritance edges
  inheritanceAmount_helper : list(TYPE) * list(TYPE) -> int
  inheritanceAmount_helper([], []) = 0.
  inheritanceAmount_helper([argT | argtl], [sigT | sigtl]) = x :- { s_arg s_sig y z }
    s_arg == scopeFromType(argT),
    s_sig == scopeFromType(sigT),
    y == inheritEdgesAmount(s_arg, s_sig),
    z == inheritanceAmount_helper(argtl, sigtl),
    x #= y + z.

  // in case of two built-in types, the same built-in type is +0, two compatible (but not equal) types is +1
  inheritanceAmount_helper([arg@BUILTINTYPE(t, _) | argtl], [sig@BUILTINTYPE(t, _) | sigtl]) = x :-
    x == inheritanceAmount_helper(argtl, sigtl).

  inheritanceAmount_helper([arg@BUILTINTYPE(_, _) | argtl], [sig@BUILTINTYPE(_, _) | sigtl]) = x :- { y }
    typeCompatible(arg, sig) | error $[Argument type [arg] is not compatible with signature type [sig]],
    y == inheritanceAmount_helper(argtl, sigtl),
    x #= y + 1.

  scopeFromType : TYPE -> scope
  scopeFromType(REF(t)) = scopeFromType(t).
  scopeFromType(LIST(t)) = scopeFromType(t).
  scopeFromType(SET(t)) = scopeFromType(t).
  scopeFromType(ENTITY(s)) = s.
  scopeFromType(NATIVECLASS(s)) = s.
  scopeFromType(BUILTINTYPE(_, s)) = s.

  // function that zips the inheritance amount with the signature
  zipInheritanceAmountWithSig : list(int) * list((string * TYPE)) -> list((int * (string * TYPE)))
  zipInheritanceAmountWithSig([], []) = [].
  zipInheritanceAmountWithSig([x|xs], [y|ys]) = [(x, y) | zipInheritanceAmountWithSig(xs, ys)].

  // function that prunes the signatures to only keep the lowest inheritance amount
  filterLeastInheritanceAmount : int * list((int * (string * TYPE))) -> list((string * TYPE))
  filterLeastInheritanceAmount(_, []) = [].
  filterLeastInheritanceAmount(x, [(x, sig) | sigtl]) = [sig | filterLeastInheritanceAmount(x, sigtl)].
  filterLeastInheritanceAmount(x, [_        | sigtl]) = filterLeastInheritanceAmount(x, sigtl).

  dropPaths maps dropPath(list(*)) = list(*)
  dropPath : (path * (string * TYPE)) -> (string * TYPE)
  dropPath((_, x)) = x.
