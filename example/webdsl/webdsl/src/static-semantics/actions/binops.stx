module static-semantics/actions/binops

imports
  static-semantics/types/built-ins

  static-semantics/webdsl-types
  static-semantics/webdsl

rules // binary operators
  // (e1 + e2)
  typeOfExp(s, exp@Add(e1, e2)) = T :-
    typeOfAdd(s, e1, e2) == T,
    @exp.type := T.

  typeOfPlaceholderExp(s, exp@PHAdd(e1, e2)) = T :-
    typeOfAdd(s, e1, e2) == T,
    @exp.type := T.

  typeOfAdd : scope * Exp * Exp -> TYPE
  typeOfAdd(s, e1, e2) = t :- {t1 t2}
    typeOfExp(s, e1) == t1,
    typeOfExp(s, e2) == t2,
    lubForAdd(t1, t2) == t,
    inequalType(t, UNTYPED()) | error $[Wrong types for addition: [e1] has type [t1], [e2] has type [t2]].

  // (e1 - e2)
  typeOfExp(s, exp@Sub(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong types for subtraction: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := T.

  // (e1 * e2)
  typeOfExp(s, exp@Mul(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong types for multiplication: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := T.

  // (e1 / e2)
  typeOfExp(s, exp@Div(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong types for dividing: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := T.

  // (e1 % e2)
  typeOfExp(s, exp@Mod(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong types for mod: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := T.

  // (e1 > e2)
  typeOfExp(s, exp@LargerThan(e1, e2)) = t :- {T1 T2}
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong types for larger than: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := t.

  // (e1 >= e2)
  typeOfExp(s, exp@LargerThanOrEqual(e1, e2)) = t :- {T1 T2}
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong types for larger than or equals: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := t.

  // (e1 < e2)
  typeOfExp(s, exp@SmallerThan(e1, e2)) = t :- {T1 T2}
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong types for smaller than: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := t.

  // (e1 <= e2)
  typeOfExp(s, exp@SmallerThanOrEqual(e1, e2)) = t :- {T1 T2}
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong operand types for smaller than or equal: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := t.

  // (e1 && e2)
  typeOfExp(s, exp@And(e1, e2)) = b :- {T1 T2}
    b == bool(s),
    typeOfExp(s, e1) == T1, typeCompatible(T1, b) | error $[Wrong types for and: [e1] has type [T1], expected Bool],
    typeOfExp(s, e2) == T2, typeCompatible(T2, b) | error $[Wrong types for and: [e2] has type [T2], expected Bool],
    @exp.type := b.

  // (e1 || e2)
  typeOfExp(s, exp@Or(e1, e2)) = b :- {T1 T2}
    b == bool(s),
    typeOfExp(s, e1) == T1, typeCompatible(T1, b) | error $[Wrong types for or: [e1] has type [T1], expected Bool],
    typeOfExp(s, e2) == T2, typeCompatible(T2, b) | error $[Wrong types for or: [e2] has type [T2], expected Bool],
    @exp.type := b.

  // (e1 == e2)
  typeOfExp(s, exp@Eq(e1, e2)) = t :- {T1 T2}
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    orB(
      typeCompatibleB(T1, T2),
      typeCompatibleB(T2, T1)
    ) == TRUE() | error $[Wrong types for equality: [e1] has type [T1], [e2] has type [T2]],
    @exp.type := t.

  // (e1 != e2)
  typeOfExp(s, exp@NotEq(e1, e2)) = t :- {T1 T2}
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    orB(
      typeCompatibleB(T1, T2),
      typeCompatibleB(T2, T1)
    ) == TRUE() | error $[Wrong types for inequality: [e1] has type [T1], [e2] has type [T2]],
    @exp.type :=t.

  // e1 in e2
  typeOfExp(s, exp@InColl(e1, e2)) = bool(s) :- {T1 T2}
    typeOfExp(s, e1) == T1,
    stripGenericType(typeOfExp(s, e2)) == T2,
    typeCompatible(T1, T2) | error $[Wrong types for in collection check: [e1] has type [T1], [e2] has type [T2]].

rules // unary operators

  // (!e)
  typeOfExp(s, exp@Not(e)) = t :- {T}
    t == bool(s),
    typeOfExp(s, e) == T,
    T == t | error $[Wrong types for not: [e] has type [T], expected Bool],
    @exp.type := t.

rules // utils

  lubForAdd : TYPE * TYPE -> TYPE
  lubForAdd(T1, T2) = equalNumericType(T1, T2).
  lubForAdd(t@BUILTINTYPE("String", _), _) = t.
  lubForAdd(_, t@BUILTINTYPE("String", _)) = t.

  equalNumericType : TYPE * TYPE -> TYPE
  equalNumericType(_, _) = UNTYPED().
  equalNumericType(t@BUILTINTYPE("Int", _), BUILTINTYPE("Int", _)) = t.
  equalNumericType(BUILTINTYPE("Int", _), t@BUILTINTYPE("Long", _)) = t.
  equalNumericType(t@BUILTINTYPE("Long", _), BUILTINTYPE("Int", _)) = t.
  equalNumericType(t@BUILTINTYPE("Long", _), BUILTINTYPE("Long", _)) = t.
  equalNumericType(t@BUILTINTYPE("Float", _), BUILTINTYPE("Float", _)) = t.
