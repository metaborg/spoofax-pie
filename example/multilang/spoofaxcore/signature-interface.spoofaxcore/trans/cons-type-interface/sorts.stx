module cons-type-interface/sorts

imports
  cons-type-interface/types
  cons-type-interface/labels

signature
  namespaces

    Sort : string

  relations

    sort: occurrence -> TYPE // Map sort declaration to its type

  name-resolution

    resolve Sort
      filter P* I* // Transitive imports. If not: sort of imported cons might not be found
      min $ < P, $ < I, P < I

rules

  // Rule validating if sorts match (e.g. when adding injections)
  // signature: expected sort at position * actual sort at position
  typeEq: TYPE * TYPE

  // Equal sorts match
  typeEq(T, T).

rules

  declareSort: scope * string

  declareSort(s, n) :- {stag}
    new stag,
    s -> Sort{n} with sort TSORT(stag, n),
    // Check for srts with same name in same scope
    query sort
      filter e and { t :- t == Sort{n} }
      in s |-> [_] | error $[Duplicate declaration of sort [n]],
    // Check for sorts with same name in imported modules
    query sort
      filter resolveMatch[Sort{n}] & ~e and { t :- t == Sort{n} }
      in s |-> [] | error $[Shadowing imported sort [n]].

rules

  typeOfSort: scope * string -> TYPE
  typeOfSort(s, n) = T :-
    sort of Sort{n} in s |-> [(_, (_, T)) | _]
        | error $[Sort [n] not declared].
