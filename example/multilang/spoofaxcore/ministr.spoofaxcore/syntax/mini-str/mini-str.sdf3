module mini-str/mini-str

imports
  ministr-common

lexical sorts
  MOD
  SMBL

context-free sorts
  MSTRStart MSTRSection SignatureSection
  ConstructorDef ArgSort
  RuleDef With Pattern Strategy

lexical syntax
  MOD 				= [a-zA-Z0-9\-\/]+
  SMBL				= [a-zA-Z] [a-zA-Z0-9\-\']*

  MOD			 	= "rules" 				{reject}
  MOD 				= "context-free" 		{reject}
  SMBL				= "rules" 				{reject}
  SMBL				= "imports" 			{reject}
  SMBL				= "constructors" 		{reject}

lexical restrictions
  MOD				-/- [a-zA-Z0-9\-\/]
  SMBL				-/- [a-zA-Z0-9\-\']

context-free syntax

  MSTRStart.MSTRModule = <
    module <MOD>
      <{MSTRSection "\n"}*>
    >

  MSTRSection.Imports = <
    imports
        <{MOD "\n"}*>
  >

  MSTRSection.Rules = <
    rules
        <{RuleDef "\n"}*>
  >

  MSTRSection.Signatures = <
    signatures
        <{SignatureSection "\n"}*>
  >

  SignatureSection.Sorts = <
  	sorts
  		<{SMBL " "}*>
  >

  SignatureSection.Constructors = <
  	constructors
  		<{ConstructorDef "\n"}*>
  	>

  ConstructorDef.NoArgs = <<SMBL> : <SMBL>>
  ConstructorDef.WithArgs = [[SMBL] : [{ArgSort "*"}+] -> [SMBL]]

  ArgSort.Sort		= <<SMBL>>
  ArgSort.Opt 		= <<SMBL>?>
  ArgSort.Iter 		= <<SMBL>+>
  ArgSort.Star 		= <<SMBL>*>

  RuleDef.RewriteRuleDef = [
    [SMBL]: [Pattern] -> [Pattern] [With]
  ]

  With.NoWith =
  With.With = <
    with
      <Strategy>
  >

  Pattern.Constr 		= <<SMBL>(<{Pattern ","}*>)>
  Pattern.Var	 		= <<SMBL>>
  Pattern.List	 		= <[<{Pattern "|"}*>]>
  Pattern.RuleCall		= [<[SMBL]> [Pattern]]

  Strategy.Assign		= <<SMBL> := <Pattern>>
  Strategy.Seq			= <
  	<Strategy>;
  	<Strategy>
  > {right}
