module mini-str/rules/list-sorts

imports
  abstract-sig/sorts
  signatures/ministr-sig
  mini-str/rules/resolution

signature

  constructors // Create exact types for list build patterns
    EMPTY 		: TYPE
    SINGLETON	: SORT -> TYPE
    MULTI		: SORT -> TYPE

rules

  // Rule validating if sorts match
  // signature: expected sort at position * actual sort at position
  typeEq: TYPE * TYPE

  // Equal sorts match
  typeEq(T, T).

  typeEq(EMPTY(), STAR(_)).
  typeEq(EMPTY(), OPT(_)).

  typeEq(SINGLETON(T), OPT(T)).
  typeEq(SINGLETON(T), STAR(T)).
  typeEq(SINGLETON(T), ITER(T)).

  typeEq(MULTI(T), STAR(T)).
  typeEq(MULTI(T), ITER(T)).

rules

  typeEq(OPT(T), STAR(T)).
  typeEq(ITER(T), STAR(T)).

rules

  typeOfList : Pattern * SORT -> TYPE

  typeOfList(List([]), _) = EMPTY().
  typeOfList(List([_]), T) = SINGLETON(T).
  typeOfList(List([_ | _]), T) = MULTI(T).

rules

  // TODO: rename sortOfContent
  typeOfContent: TYPE -> SORT

  typeOfContent(SINGLE(T)) 		= T.
  typeOfContent(STAR(T)) 		= T.
  typeOfContent(ITER(T)) 		= T.
  typeOfContent(OPT(T)) 		= T.
  typeOfContent(SINGLETON(T))	= T.
  typeOfContent(MULTI(T)) 		= T.
  typeOfContent(EMPTY()) 		= _.
