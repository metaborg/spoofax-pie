module mini-str/rules/list-sorts

imports
  cons-type-interface/sorts
  signatures/mini-str/mini-str-sig
  mini-str/rules/resolution

signature

  constructors // Create exact types for list build patterns
    EMPTY 		: TYPE
    SINGLETON	: TYPE -> TYPE
    MULTI		: TYPE -> TYPE

rules

  typeEq(EMPTY(), TSTAR(_)).
  typeEq(EMPTY(), TOPT(_)).

  typeEq(SINGLETON(T1), TOPT(T2)) :- typeEq(T1, T2).
  typeEq(SINGLETON(T1), TSTAR(T2)) :- typeEq(T1, T2).
  typeEq(SINGLETON(T1), TITER(T2)) :- typeEq(T1, T2).

  typeEq(MULTI(T1), TSTAR(T2)) :- typeEq(T1, T2).
  typeEq(MULTI(T1), TITER(T2)) :- typeEq(T1, T2).

rules

  typeEq(TOPT(T1), TSTAR(T2)) :- typeEq(T1, T2).
  typeEq(TITER(T1), TSTAR(T2)) :- typeEq(T1, T2).

  typeEq(T1, T2) :- {n1 n2}
    nameOfSort(T1) == n1,
    nameOfSort(T2) == n2,
    false | error $[Type [n1] cannot be assigned to [n2]].

rules

  typeOfList : Pattern -> TYPE

  typeOfList(List([])) = EMPTY().
  typeOfList(List([_])) = SINGLETON(_).
  typeOfList(List([_ | _])) = MULTI(_).

rules

  typeOfContent: TYPE -> TYPE

  typeOfContent(TSTAR(T)) 		= T.
  typeOfContent(TITER(T)) 		= T.
  typeOfContent(TOPT(T)) 		= T.
  typeOfContent(SINGLETON(T))	= T.
  typeOfContent(MULTI(T)) 		= T.
  typeOfContent(EMPTY()) 		= _.
