module mini-str/rules/patterns/match

imports
  cons-type-interface/types
  cons-type-interface/constructors

  signatures/mini-str/mini-str-sig
  mini-str/rules/list-sorts
  mini-str/rules/variables
  mini-str/rules/patterns/base
  mini-str/pattern-type

rules

  typeOfMatch : scope * Pattern -> TYPE

  typeOfMatch(s, c@Constr(n, p)) = T :-
    typeOfCons(s, arityOfCons(p), n) == CONS(T, _, _, _),
    ptrnOk(s, MATCH(), c, T).

  typeOfMatch(s, v@Var(n)) = T :-
    typeOfVar(s, n) == T,
    ptrnOk(s, MATCH(), v, T).

  typeOfMatch(s, l@List(_)) = T :-
    typeOfList(l, T) == T,
    ptrnOk(s, MATCH(), l, T).
