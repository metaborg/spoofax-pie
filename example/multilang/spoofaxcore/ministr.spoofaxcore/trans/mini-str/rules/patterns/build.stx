module mini-str/rules/patterns/build

imports
  abstract-sig/types
  abstract-sig/constructors

  signatures/mini-str/mini-str-sig
  mini-str/rules/list-sorts
  mini-str/rules/resolution
  mini-str/rules/variables
  mini-str/rules/patterns/base
  mini-str/pattern-type

rules

  typeOfBuild : scope * Pattern -> TYPE

  typeOfBuild(s, P) = T :- ptrnOk(s, BUILD(), P, T).

  /* typeOfBuild(s, c@Constr(n, p)) = SINGLE(T) :-
    typeOfCons(s, arityOfCons(p), n) == CONS(T, _, _),
    ptrnOk(s, BUILD(), c, SINGLE(T)).

  typeOfBuild(s, v@Var(n)) = T :-
    typeOfVar(s, n) == T,
    ptrnOk(s, BUILD(), v, T).

  typeOfBuild(s, l@List(_)) = T :-
    typeOfList(l, _) == T,
    ptrnOk(s, BUILD(), l, T).

  typeOfBuild(s, c@RuleCall(n, _)) = T :-
    typeOfRules(s, n) == RULE(_, T),
    ptrnOk(s, BUILD(), c, T). */
