module mini-str/rules/resolution

imports
  abstract-sig/sorts
  abstract-sig/labels
  mini-str/rules/list-sorts

signature

  sorts RTDECL = (path * (string * RULE))
  sorts RULE constructors
    // Rule type: input sort -> output sort
    RULE : TYPE * TYPE -> RULE

  name-resolution
    labels S

  relations
    // Declaration of single rewrite rule
    ruleInstType: string -> RULE
    // Module-unique declaration of rule
    ruleType: string -> RULE

  // Sort used for prettyfying names
  sorts TNAME constructors
    Single    : string -> TNAME // single
    Opt  	  : string -> TNAME // optional
    Iter      : string -> TNAME // iter
    Star      : string -> TNAME // star
    Singleton : string -> TNAME // singleton list
    Multi     : string -> TNAME // list with multiple elements
    Empty     : TNAME 			// empty list

rules

  // Declares a single rule instance in a scope
  declareRule : scope * scope * string * TYPE * TYPE

  declareRule(s, s_seq, n, T1, T2) :- {rls rts rits}
    query ruleType
      filter P* I* & ~e and { n' :- n' == n }
      in s |-> rts,
    query ruleInstType
      filter S+ and { n' :- n' == n }
      in s_seq |-> rits,
    declRule(s, s_seq, rts, rits, n, RULE(T1, T2)).

rules

  declRule: scope * scope * list(RTDECL) * list(RTDECL) * string * RULE

  // Rule definition is valid when no parent rule specified
  declRule(s_mod, s_seq, [], [], n, T) :-
    !ruleType[n, T] in s_mod,
    !ruleInstType[n, T] in s_seq.

  declRule(s_mod, s_seq, [(_, (_, T_decl)) | _], _, n, T) :-
    equitype(T_decl, T).

  // Rule definition is valid when it complies with parent
  declRule(s_mod, s_seq, [], [(_, (_, T_decl)) | _], n, T) :-
    equitype(T_decl, T).

rules
  equitype : RULE * RULE

  equitype(RULE(T1, T2), RULE(T3, T4)) :- {n1 n2 n3 n4}
    nameOfType(T1) == n1,
    nameOfType(T2) == n2,
    nameOfType(T3) == n3,
    nameOfType(T4) == n4,
    T1 == T3 | error $[Input type [n3] does not match with specified type [n1]],
    T2 == T4 | error $[Output type [n4] does not match with specified type [n2]].

rules

  namesOfRules maps nameOfRule(list(*)) = list(*)

  nameOfRule : (path * (string * RULE)) -> string
  nameOfRule((_, (n, _))) = n.

rules

  typesOfRules maps typeOfRule(list(*)) = (list(*), list(*))

  typeOfRule: (path * (string * RULE)) -> (TYPE * TYPE)
  typeOfRule((_, (_, RULE(T1, T2)))) = (T1, T2).

rules

  uniqType: list(TYPE) -> list(TYPE)

  uniqType([]) = [].
  uniqType([h | t]) = [h | uniqType(removeType(h, t))].

rules

  removeType: TYPE * list(TYPE) -> list(TYPE)

  removeType(_, []) = [].
  removeType(s, [s | l]) = removeType(s, l).
  removeType(s1, [s2 | l]) = [s2 | removeType(s1, l)] :-
    s1 != s2.

rules

  resolveRule : scope * string -> RULE

  resolveRule(s, n) = R :-
  	query ruleType
  	   filter P* I* and { n' :- n' == n }
  	      min $ < P, $ < I, P < I
  	       in s |-> [(_, (_, R)) | _].

rules

  nameOfType: TYPE -> TNAME

  nameOfType(SINGLE(T)) = Single(nameOfSort(T)).
  nameOfType(STAR(T)) = Star(nameOfSort(T)).
  nameOfType(ITER(T)) = Iter(nameOfSort(T)).
  nameOfType(SINGLETON(T)) = Singleton(nameOfSort(T)).
  nameOfType(MULTI(T)) = Multi(nameOfSort(T)).
  nameOfType(EMPTY()) = Empty().

  nameOfSorts maps nameOfSort(list(*)) = list(*)
  nameOfSort: SORT -> string

  nameOfSort(SORT(_, n)) = n.
