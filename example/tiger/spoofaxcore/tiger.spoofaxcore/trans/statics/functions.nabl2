module statics/functions

imports signatures/-
imports statics/nabl-lib
imports statics/base

rules // function declarations

  // Parameters: In [function id(... id1: id2 ...) = exp] the
  // scope of the parameter id1 lasts throughout the function
  // body exp
        
  Dec[[ FunDecs(fdecs) ^ (s, s_outer) ]] :=
     Map2[[ fdecs ^ (s, s_outer) ]].
     
  [[ d@ProcDec(f, args, e) ^ (s, s_outer) ]] :=
//     Args[[ args ^ (s_fun, s_outer) : tys ]], 
     new s_fun,
     @d.bodyScope := s_fun,
     s_fun -P-> s,   
     distinct/name D(s_fun) | error $[duplicate argument] @ NAMES, 
     MapTs2[[ args ^ (s_fun, s_outer) : tys ]],
//
     Var{f} <- s, 
     Var{f} : FUN(tys, UNIT()) !, 
     [[ e ^ (s_fun) : UNIT() ]].
        
  [[ d@FunDec(f, args, t, e) ^ (s, s_outer) ]] :=
//     Args[[ args ^ (s_fun, s_outer) : tys ]], 
     new s_fun, s_fun -P-> s,
     @d.bodyScope := s_fun,
     distinct/name D(s_fun) | error $[duplicate argument] @ NAMES, 
     MapTs2[[ args ^ (s_fun, s_outer) : tys ]],
     [[ t ^ (s_outer) : ty ]],
     Var{f} <- s, 
//     Var{x} =I=> s_fun,
     Var{f} : FUN(tys, ty) !, 
     [[ e ^ (s_fun) : ty_body ]],
     ty_body <? ty | error $[return type does not match body] @ t.
//     ty == ty_body| error $[return type does not match body] @ t.
     
//  Args[[ args ^ (s_fun, s_outer) : tys ]] := 
//     new s_fun,      
//     s_fun -P-> s,   
//     distinct/name D(s_fun) | error $[duplicate argument] @ NAMES, 
//     MapTs2[[ args ^ (s_fun, s_outer) : tys ]].
     
  [[ FArg(x, t) ^ (s_fun, s_outer) : ty ]] :=
     Var{x} <- s_fun, 
     Var{x} : ty !,
     [[ t ^ (s_outer) : ty ]].
     
rules // function calls
    
  [[ Call(f, exps) ^ (s) : ty ]] :=
     Var{f} -> s,  
     Var{f} |-> d | error $[Function [f] not declared], 
     d : FUN(tys, ty) | error $[Function expected] ,
     MapSTs[[ exps ^ (s) : tys ]].
     
     // todo: error messages per argument