module statics/types

imports signatures/-
imports statics/nabl-lib
imports statics/base

rules // type declarations

  // Types: In the expression [let ... typedecs ... in exps end] the
  // scope of a type identifier starts at the beginning of the 
  // consecutive sequence of type declarations defining it and lasts
  // until the end. The includes the headers and bodies of any functions
  // with the scope.
  
  // Name spaces: There are two different name spaces: one for types,
  // and one for functions and variables. A type [a] can be "in scope"
  // at the same time as a variable [a] or a function [a], but 
  // variables and functions of the same name cannot both be in 
  // scope simultaneously (one will hide the other).
    
  Dec[[ TypeDecs(tdecs) ^ (s, s_outer) ]] := 
     Map[[ tdecs ^ (s) ]].
     
  [[ TypeDec(x, t) ^ (s) ]] :=
     [[ t ^ (s) : ty ]],
     Type{x} <- s, 
     Type{x} : ty !.
     
   // type declarations in a sequence are mutually recursive

rules // types

  [[ Tid(x) ^ (s) : ty ]] :=
     Type{x} -> s, 
     Type{x} |-> d | error $[Type [x] not declared],
     d : ty.
     