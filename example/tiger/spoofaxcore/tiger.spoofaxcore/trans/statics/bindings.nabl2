module statics/bindings

imports signatures/-
imports statics/nabl-lib
imports statics/base
imports statics/control-flow
imports statics/variables

rules // let

  // Nested scopes: The scope of a variable or parameter includes the
  // bodies of any function definitions in that scope. That is, access
  // to variables in outer scopes is permitted, as in Pascal and Algol
  
  /* Local redeclarations: A variable or function declaration may be 
    hidden by the redeclaration of the same name (as a variable or
    function) in a smaller scope; for example, this function prints
     "6 7 6 8 6" when applied to 5:
     
    let 
      function f(v : int) =
        let var v := 6
         in print(v);
            let  var v := 7 in print(v) end;
            print(v);
            let var v := 8 in print(v) end;
            print(v)
        end
     in f(4)
    end
  */

  [[ l@Let(blocks, exps) ^ (s) : ty ]] :=
     new s_body,
     @l.bodyScope := s_body,
     Decs[[ blocks ^ (s, s_body) ]], // ~1
     Seq[[ exps ^ (s_body) : ty ]],  // ~2
     distinct D(s_body).
     
  Decs[[ [] ^ (s_outer, s_body) ]] :=
    s_body -P-> s_outer.
    
  Decs[[ [block] ^ (s_outer, s_body) ]] :=
    s_body -P-> s_outer, // ~0
    Dec[[ block ^ (s_body, s_outer) ]]. //~1
    
  Decs[[ [block | blocks@[_|_]] ^ (s_outer, s_body) ]] :=
    new s_dec,
    s_dec -P-> s_outer, 
    @block.bodyScope := s_dec,
    Dec[[ block ^ (s_dec, s_outer) ]],
    Decs[[ blocks ^ (s_dec, s_body) ]],
    distinct/name D(s_dec) | error $[duplicate declaration] @NAMES.
    