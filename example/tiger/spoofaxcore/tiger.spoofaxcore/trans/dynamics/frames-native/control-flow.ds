module dynamics/frames-native/control-flow

imports
  dynamics/frames-native/nabl2/nabl2-link
  dynamics/frames-native/base
  dynamics/frames-native/numbers
  dynamics/stdlib/native/loop // native implementation
  
signature
  arrows
    Seq-Exps(List(Exp)) --> V
  
rules

  Seq(es) --> Seq-Exps(es)
  
  Seq-Exps([]) --> UnitV()
  
  Seq-Exps([e]) --> e
  
  Seq-Exps([e | es@[_|_]]) --> Seq-Exps(es)
  where
    e --> _
  
  IfThen(e1, e2) --> If(e1, e2, Seq([]))
  
  If(IntV(i), e1, e2) --> vv
  where
    case i of {
      0 ->
        e2 --> vv
      otherwise ->
        e1 --> vv
    }
    
signature
  constructors
    IsInt1: Exp -> Condition 
    AddrLte: Addr * Int -> Condition
    WhileBody: Exp -> Evaluatable
    IncAddr: Addr -> Evaluatable
    __Exp2Evaluatable__ : Exp -> Evaluatable {implicit}
    
rules

  default(UNIT()) --> UnitV()

  Break() --> UnitV()
  where
    doBreak(UnitV()) --> _

  w@While(e1, e2) --> UnitV()
  where
    whileLoop(IsInt1(e1), w, UnitV()) --> _
  
  IsInt1(e) --> bv
  where
    e --> IntV(i);
    case i of {
      1 -> true => bv
      otherwise -> false => bv
    }
  
  F |- __Exp2Evaluatable__(w@While(_, e2)) --> v
  where
    framed(w, [L(P(), F)]) --> F';
    F' |- e2 --> v
  
  F |- stm@For(Var(x : Occurrence), e1, e2, e3) --> UnitV()
  where
    F |- e1 --> v1@IntV(_);
    F |- e2 --> IntV(i2);
    framed(stm, [L(P(), F)]) --> F_for;
    Addr(F_for, x) => x_addr;
    set(x_addr, v1) => _;
    F_for |- whileLoop(AddrLte(x_addr, i2), EvSeq(e3, IncAddr(x_addr)), UnitV()) --> _
  
  AddrLte(addr, i2) --> bv
  where
    get(addr) => IntV(i1);
    case leqI(i1, i2) of {
      1 ->
        true => bv
      otherwise ->
        false => bv
    }
  
  IncAddr(addr) --> UnitV()
  where
    get(addr) => IntV(i);
    set(addr, IntV(addI(i, 1))) => _

  __Exp2Evaluatable__(e) --> e
