module dynamics/frames-native/nabl2/scopegraph-native

signature
  native datatypes
    
    "org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.ScopeIdentifier" as Scope! {}
    
    "org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.Occurrence" as Occurrence! {}
    "org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.TermIndex"  as TermIndex! {}
    
  sorts Type

  native operators
    topLevelIdx : AST                         -> TermIndex        {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.GetTopLevelTermIndex")}
    Occurrence  : String * String * TermIndex -> Occurrence       {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.MakeOccurrence")}
    Occurrence  : String * String             -> Occurrence       {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.MakeFreshOccurrence")}
    Scope       : String * String             -> Scope            {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.mkScopeIdentifier")}
    scopeOfTerm : AST                         -> Scope            {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.GetScopeOfTerm")}
    declsOf     : Scope                       -> List(Occurrence) {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.DeclsOfScope")}
    resolve     : Occurrence                  -> Occurrence       {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.DecOfRef")}
    typeOf      : Occurrence                  -> Type             {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.TypeOfDec")}
    assocScopeOf: Occurrence * Label          -> Scope            {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.AssocScopeOf")}
    scope       : Scope * List(Occurrence) * List(Type) * List(Occurrence) * Map(Label, List(Scope)) * Map(Label, List(Occurrence)) -> Scope {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.CreateScope")}
    scopesOverLabel: Scope * Label            -> List(Scope)      {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.LinkedScopesOverLabel")}
    eqScopes    : Scope * Scope               -> Bool             {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.nodes.ScopesEqual")}
  
  sorts
    Label {value, class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.ALabel")}
  
  constructors
    P:               Label {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.P")}
    I:               Label {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.I")}
    D:               Label {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.D")}
    Label: String -> Label {class("org.metaborg.meta.lang.dynsem.interpreter.nabl2.sg.Label")}
