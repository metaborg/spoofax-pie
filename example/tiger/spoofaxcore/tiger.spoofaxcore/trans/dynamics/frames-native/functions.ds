module dynamics/frames-native/functions


imports
  dynamics/frames-native/nabl2/nabl2-link
  dynamics/frames-native/base
  dynamics/frames-native/bindings
  
signature
  arrows
    Frames1 |- Map2-FunDecs(List(FunDec)) --> U
    Frames1 |- FunDec --> U
    unpackArgs(List(FArg)) --> List(Occurrence)
    Frames1 |- Zip-Params(List(Exp), List(Occurrence)) --> U
//    F |- Map-Exps(List(Exp)) --> List(Val)
    
  constructors
    FunV: Frame * Scope * List(Occurrence) * Exp -> V

rules
  
  default(FUN(_, _)) --> UndefV()

rules // function declarations

  Frames1 (F, F_outer) |- Dec(FunDecs(fdecs)) --> U()
  where
    Frames1 (F, F_outer) |- Map2-FunDecs(fdecs) --> _
  
  Frames1 (F, F') |- Map2-FunDecs([]) --> U()
  
  Frames1 (F, F') |- Map2-FunDecs([x|xs]) --> U()
  where
    Frames1 (F, F') |- x --> _;
    Frames1 (F, F') |- Map2-FunDecs(xs) --> _  
  
  Frames1 (F, F_outer) |- d@ProcDec(f : Occurrence, args, e) --> U()
  where
//    framed(d, [L(P(), F)]) --> F_fun;
    set(F, f, FunV(F, scopeOfTerm(d), unpackArgs(args), e)) => _
  
  Frames1 (F, F_outer) |- d@FunDec(f : Occurrence, args, t, e) --> U()
  where
//    framed(d, [L(P(), F)]) --> F_fun;
    set(F, f, FunV(F, scopeOfTerm(d), unpackArgs(args), e)) => _
  
  F F |- Call(f : Occurrence, exps) --> v
  where
    get(lookup(F, f)) => FunV(F_parent, s_fun, args, e);
    frame(s_fun, [L(P(), F_parent)]) --> F_call;
    Frames1 (F, F_call) |- Zip-Params(exps, args) --> _;
    F_call |- e --> v
    
  unpackArgs([]) --> []
  
  unpackArgs([FArg(x : Occurrence, _) | args]) --> [x |occs]
  where
    unpackArgs(args) --> occs

  Zip-Params([], []) --> U()
  
  Frames1 (F, F_call) |- Zip-Params([e|es], [p|ps]) --> Zip-Params(es, ps)
  where
    F |- e --> v;
    set(F_call, p, v) => _

