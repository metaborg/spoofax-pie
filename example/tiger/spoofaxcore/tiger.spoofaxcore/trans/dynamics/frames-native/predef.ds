module dynamics/frames-native/predef

imports
  dynamics/frames-native/nabl2/nabl2-link
  dynamics/frames-native/functions
  dynamics/frames-native/numbers
  dynamics/frames-native/strings

signature

  constructors
    nativePrintV      : Exp
    nativePrintIV     : Exp
    nativeOrdV        : Exp
    nativeChrV        : Exp
    nativeNotV        : Exp
    nativeExitV       : Exp
    nativeSizeV       : Exp
    nativeSubstringV  : Exp
    nativeConcatV     : Exp
    nativeGetcharV    : Exp
    nativeFlushV      : Exp
    nativeStartTiming : Exp
    nativeStopTiming  : Exp
  
  arrows
    stdLib(Module) --> U
    registerBuiltin(String, List(FArg), Exp) --> U
  
  components
    T : TermIndex
  
rules

  // predefined functions  
  stdLib(m) --> U()
  where
      topLevelIdx(m) => T;
      T |- registerBuiltin("print", [FArg(__Id2Occ__("s"), mkType("string"))], nativePrintV()) --> _;
      T |- registerBuiltin("printi", [FArg(__Id2Occ__("i"), mkType("int"))], nativePrintIV()) --> _;
      T |- registerBuiltin("flush", [], nativeFlushV()) --> _;
      T |- registerBuiltin("ord", [FArg(__Id2Occ__("s"), mkType("string"))], nativeOrdV()) --> _;
      T |- registerBuiltin("chr", [FArg(__Id2Occ__("i"), mkType("int"))], nativeChrV()) --> _;
      T |- registerBuiltin("not", [FArg(__Id2Occ__("i"), mkType("int"))], nativeNotV()) --> _;
      T |- registerBuiltin("exit", [FArg(__Id2Occ__("i"), mkType("int"))], nativeExitV()) --> _;
      T |- registerBuiltin("size", [FArg(__Id2Occ__("s"), mkType("string"))], nativeSizeV()) --> _;
      T |- registerBuiltin("substring", [FArg(__Id2Occ__("s"), mkType("string")), FArg(__Id2Occ__("i1"), mkType("int")), FArg(__Id2Occ__("i2"), mkType("int"))], nativeSubstringV()) --> _;
      T |- registerBuiltin("concat", [FArg(__Id2Occ__("s1"), mkType("string")), FArg(__Id2Occ__("s2"), mkType("string"))], nativeConcatV()) --> _;
      T |- registerBuiltin("getchar", [], nativeGetcharV()) --> _;
      T |- registerBuiltin("timeGo", [], nativeStartTiming()) --> _;
      T |- registerBuiltin("timeStop", [], nativeStopTiming()) --> _;
      T |- registerBuiltin("flush", [], nativeFlushV()) --> _
  
  
  F, T |- registerBuiltin(name, args, e) --> U()
  where
    Occurrence("Var", name, T) => dec;
    T |- fargs2occs(args) --> decs;
    typeOf(dec) => FUN(types, _);
    scope(Scope("<:implicit:fun:>", name), decs, types, [], { P() |--> [scopeOfFrame(F)]}, {}) => s_fun;
//    frame(s_fun, [L(P(), F)]) --> F_fun;
    set(F, dec, FunV(F, s_fun, decs, e)) => _
  
  // predefined function reductions
  F |- nativePrintV() --> UnitV()
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => StringV(s);
    printS(s) => _
  
  F |- nativePrintIV() --> UnitV()
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => IntV(i);
    printI(i) => _

  F |- nativeOrdV() --> IntV(result)
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => StringV(s);
    ordS(s) => result

  F |- nativeChrV() --> StringV(result)
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => IntV(i);
    chrI(i) => result
    
  F |- nativeNotV() --> IntV(result)
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => IntV(i);
    notI(i) => result
  
  F |- nativeExitV() --> UnitV()
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => IntV(i);
    notI(i) => _
    
  F |- nativeSizeV() --> IntV(result)
  where
    declsOf(scopeOfFrame(F)) => [arg];
    get(F, arg) => StringV(s);
    sizeS(s) => result
  
  F |- nativeSubstringV() --> StringV(result)
  where
    declsOf(scopeOfFrame(F)) => [arg1, arg2, arg3];
    get(F, arg1) => StringV(s);
    get(F, arg2) => IntV(i1);
    get(F, arg3) => IntV(i2);
    substringSII(s, i1, i2) => result
  
  F |- nativeConcatV() --> StringV(result)
  where
    declsOf(scopeOfFrame(F)) => [arg1, arg2];
    get(Addr(F, arg1)) => StringV(s1);
    get(Addr(F, arg2)) => StringV(s2);
    concatS(s1, s2) => result
  
  nativeGetcharV() --> StringV(result)
  where
    getcharS("") => result
    
  nativeStartTiming() --> UnitV()
  where
    _startTiming() => _
  
  nativeStopTiming() --> UnitV()
  where
    _stopTiming() => _
  
  nativeFlushV() --> UnitV()
  where
    flushS("") => _

signature arrows // utils
  fargs2occs(List(FArg)) --> List(Occurrence)
  mkType(String) --> Type

rules

  mkType(s) --> __TypeId2Type__(Tid(__Id2Occ__(s)))
  
  fargs2occs([]) --> []
  
  fargs2occs([FArg(name : Id, _) | args]) --> [Occurrence("Var", name) | decls]
  where
    fargs2occs(args) --> decls

  