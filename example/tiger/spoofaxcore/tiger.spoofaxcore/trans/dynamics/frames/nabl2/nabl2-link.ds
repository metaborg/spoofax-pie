module dynamics/frames/nabl2/nabl2-link

imports
  ds-signatures/Tiger-sig
  nabl2/runtime/interpreter/util
  nabl2/runtime/interpreter/scopegraph-impl
  nabl2/runtime/interpreter/frame-impl
  dynamics/frames/natives
  dynamics/frames/values
  utils
  
signature
  sort aliases
    Val = V
    Name = Id

  constructors
    __Ty2Type__: Ty -> Type {implicit}
    __Occurrence2Occ__: Occurrence -> Occ {implicit}
  
  components
    T : TermIndex
    FS: (Frame * Frame)

  native operators
    nabl2_bodyScopeOfAST: AST -> Scope
    nabl2_topIndexOf: AST -> TermIndex
    nabl2_phantomIndex: TermIndex -> TermIndex
    
//  arrows
//    bodyScope(AST) --> Scope

rules

//  bodyScope(ast) --> nabl2_bodyScopeOfAST(ast)
  scopeOfTerm(ast) --> nabl2_bodyScopeOfAST(ast)

/* DEBUGGING HELPERS */

signature 
  sorts PrintWrapper
  constructors
    Decls: List(Occurrence) -> PrintWrapper
    Edges: Map(Label, List(Scope)) -> PrintWrapper
    Imports: Map(Label, List(Occurrence)) -> PrintWrapper
    Links: Map(Label, Map(Scope, Frame)) -> PrintWrapper
    Slots: Map(Occurrence, Val) -> PrintWrapper

  arrows
    printScope(Scope) --> Scope
    printFrame(Frame) --> Frame
    printPath(Path) --> Path
    H |- printHeap() --> Heap
rules

  printScope(s) --> s
  where
    printTerm(s) --> _;
    printTerm(Decls(declsOf(s))) --> _;
    printTerm(Edges(edgesOf(s))) --> _;
    printTerm(Imports(importsOf(s))) --> _
  
//  printFrame(f) --> f
//  where
//    printTerm(f) --> _;
//    printScope(scopeOf(f)) --> _;
//    printTerm(Links(linksOfF(f))) --> _;
//    printTerm(Slots(slotsOfF(f))) --> _
  printFrame(f) :: H H_(x) --> f
  where
    printTerm(x[f]) --> _
  
  printPath([p]) --> [p]
  where
    printTerm(p) --> _

  printPath([p1 | p2@[_|_]]) --> [p1 | p2]
  where
    printTerm(p1) --> _;
    printPath(p2) --> _
  
  H |- printHeap() --> H
  where
    printTerm(H) --> _
  
       
  
