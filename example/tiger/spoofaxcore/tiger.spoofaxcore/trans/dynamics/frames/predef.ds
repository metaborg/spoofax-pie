module dynamics/frames/predef

imports
  dynamics/frames/nabl2/nabl2-link
  dynamics/frames/functions
  dynamics/frames/numbers
  dynamics/frames/strings

signature

  constructors
    nativePrintV      : Exp
    nativePrintIV     : Exp
    nativeOrdV        : Exp
    nativeChrV        : Exp
    nativeNotV        : Exp
    nativeExitV       : Exp
    nativeSizeV       : Exp
    nativeSubstringV  : Exp
    nativeConcatV     : Exp
    nativeGetcharV    : Exp
    nativeFlushV      : Exp
    nativeStartTiming : Exp
    nativeStopTiming  : Exp
  
  arrows
    stdLib() --> U
    registerBuiltin(Name, List(FArg), Exp) --> U
    
rules

  // predefined functions  
  stdLib() --> U()
  where
      registerBuiltin("print", [FArg(__Id2Occ__("s"), mkType("string"))], nativePrintV()) --> _;
      registerBuiltin("printi", [FArg(__Id2Occ__("i"), mkType("int"))], nativePrintIV()) --> _;
      registerBuiltin("flush", [], nativeFlushV()) --> _;
      registerBuiltin("ord", [FArg(__Id2Occ__("s"), mkType("string"))], nativeOrdV()) --> _;
      registerBuiltin("chr", [FArg(__Id2Occ__("i"), mkType("int"))], nativeChrV()) --> _;
      registerBuiltin("not", [FArg(__Id2Occ__("i"), mkType("int"))], nativeNotV()) --> _;
      registerBuiltin("exit", [FArg(__Id2Occ__("i"), mkType("int"))], nativeExitV()) --> _;
      registerBuiltin("size", [FArg(__Id2Occ__("s"), mkType("string"))], nativeSizeV()) --> _;
      registerBuiltin("substring", [FArg(__Id2Occ__("s"), mkType("string")), FArg(__Id2Occ__("i1"), mkType("int")), FArg(__Id2Occ__("i2"), mkType("int"))], nativeSubstringV()) --> _;
      registerBuiltin("concat", [FArg(__Id2Occ__("s1"), mkType("string")), FArg(__Id2Occ__("s2"), mkType("string"))], nativeConcatV()) --> _;
      registerBuiltin("getchar", [], nativeGetcharV()) --> _;
      registerBuiltin("timeGo", [], nativeStartTiming()) --> _;
      registerBuiltin("timeStop", [], nativeStopTiming()) --> _;
      registerBuiltin("flush", [], nativeFlushV()) --> _
  
  F_parent, T |- registerBuiltin(name, args, e) --> U()
  where
    // create an occurrence for the declaration
    mkOccurrenceHavingIndex("Var", name, T) --> occ_decl;
    // create occurrences for arguments
    fargs2occs(args) --> decls;
    // create a scope identifier
    Scope("<:implicit:fun:>", name) => s_fun;
    // init a scope
    newScope(s_fun, decls, [], { P() |--> [scopeOf(F_parent):Scope]}, {}) --> _;
//    initVirtualFrame(s_fun, [P(F_parent)], decls) --> F_fun;
    // store
    set(Addr(F_parent, occ_decl), FunV(F_parent, s_fun, decls, e))  --> _
  
  // predefined function reductions
  F |- nativePrintV() --> UnitV()
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> StringV(s);
    printS(s) => _
  
  F |- nativePrintIV() --> UnitV()
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> IntV(i);
    printI(i) => _

  F |- nativeOrdV() --> IntV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> StringV(s);
    ordS(s) => result

  F |- nativeChrV() --> StringV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> IntV(i);
    chrI(i) => result
    
  F |- nativeNotV() --> IntV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> IntV(i);
    notI(i) => result
  
  F |- nativeExitV() --> UnitV()
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> IntV(i);
    notI(i) => _
    
  F |- nativeSizeV() --> IntV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(Addr(F, arg)) --> StringV(s);
    sizeS(s) => result
  
  F |- nativeSubstringV() --> StringV(result)
  where
    declsOf(scopeOf(F)) --> [arg1, arg2, arg3];
    get(Addr(F, arg1)) --> StringV(s);
    get(Addr(F, arg2)) --> IntV(i1);
    get(Addr(F, arg3)) --> IntV(i2);
    substringSII(s, i1, i2) => result
  
  F |- nativeConcatV() --> StringV(result)
  where
    declsOf(scopeOf(F)) --> [arg1, arg2];
    get(Addr(F, arg1)) --> StringV(s1);
    get(Addr(F, arg2)) --> StringV(s2);
    concatS(s1, s2) => result
  
  nativeGetcharV() --> StringV(result)
  where
    getcharS("") => result
    
  nativeStartTiming() --> UnitV()
  where
    _startTiming() => _
  
  nativeStopTiming() --> UnitV()
  where
    _stopTiming() => _
  
  nativeFlushV() --> UnitV()
  where
    flushS("") => _

signature arrows // utils
  fargs2occs(List(FArg)) --> List(Occurrence)
  mkType(String) --> Type

rules

  mkType(s) --> __TypeId2Type__(Tid(__Id2Occ__(s)))
  
  fargs2occs([]) --> []
  
  T |- fargs2occs([FArg(name : Id, _) | args]) --> [occ_decl | decls]
  where
    mkOccurrenceHavingIndex("Var", name, nabl2_phantomIndex(T)) --> occ_decl;
    fargs2occs(args) --> decls

  