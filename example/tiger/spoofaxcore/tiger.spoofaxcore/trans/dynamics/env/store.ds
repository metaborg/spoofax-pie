module dynamics/env/store

imports dynamics/env/values 

signature // lvalue 
  sorts LValue
  arrows  
    LValue -lval-> Int
  variables
    lv : LValue
    
signature // environment
  sorts Id
  sort aliases 
    // Address = Int
    Env = Map(Id, Int)
  variables
    a : Int
  components 
    E : Env
  arrows
    lookup(Id) --> Int
    bind(Id, Int) --> Env

    
rules

  E |- lookup(x) --> E[x]
  
  E |- bind(x, a) --> {x |--> a, E}
  
signature // heap
  sort aliases
    Heap = Map(Int, V)
  components
    H : Heap   
  arrows
    read(Int) --> V
    allocate(V) --> Int
    write(Int, V) --> V
    
rules

  read(a) :: H --> H[a]
  
  write(a, v) :: H --> v :: H {a |--> v, H}

  allocate(v) --> a
  where
    fresh => a;
    write(a, v) --> _
    