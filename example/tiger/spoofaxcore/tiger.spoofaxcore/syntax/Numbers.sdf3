module Numbers

lexical syntax

  IntConst = [0-9]+ 
  
lexical syntax

  RealConst.RealConstNoExp = IntConst "." IntConst 
  RealConst.RealConst = IntConst "." IntConst "e" Sign IntConst 
  Sign = "+" 
  Sign = "-" 
  
context-free syntax

  Exp.Int     = IntConst  

  Exp.Uminus  = [- [Exp]] 
  Exp.Times   = [[Exp] * [Exp]]   {left}
  Exp.Divide  = [[Exp] / [Exp]]   {left}
  Exp.Plus    = [[Exp] + [Exp]]   {left}
  Exp.Minus   = [[Exp] - [Exp]]   {left}
  
  Exp.Eq      = [[Exp] = [Exp]]   {non-assoc}
  Exp.Neq     = [[Exp] <> [Exp]]  {non-assoc}
  Exp.Gt      = [[Exp] > [Exp]]   {non-assoc}
  Exp.Lt      = [[Exp] < [Exp]]   {non-assoc}
  Exp.Geq     = [[Exp] >= [Exp]]  {non-assoc}
  Exp.Leq     = [[Exp] <= [Exp]]  {non-assoc}
  
  Exp.And     = [[Exp] & [Exp]]   {left}
  Exp.Or      = [[Exp] | [Exp]]   {left}

  //Exp = [([Exp])] {bracket, avoid}

context-free priorities

  // Precedence of operators: Unary minus has the highest
  // precedence. The operators *, / have the next highest
  // (tightest binding) precedence, followed by +, -, then
  // by =, <>, >, <, >=, <=, then by &, then by |.
  
  // Associativity of operators: The operators *, /, +, -
  // are all left associative. The comparison operators do
  // not associate, so a = b = c is not a legal expression,
  // a = (b = c) is legal.

  {Exp.Uminus} 
  > {left :
    Exp.Times
    Exp.Divide} 
  > {left :
    Exp.Plus
    Exp.Minus} 
  > {non-assoc :
    Exp.Eq
    Exp.Neq
    Exp.Gt
    Exp.Lt
    Exp.Geq
    Exp.Leq} 
  > Exp.And 
  > Exp.Or 
