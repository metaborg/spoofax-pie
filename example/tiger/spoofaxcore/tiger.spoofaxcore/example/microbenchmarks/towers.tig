//https://github.com/smarr/are-we-fast-yet/blob/master/benchmarks/Java/src/Towers.java
for i := 0 to 30
do
  (
  timeGo();
  let 
    type TowersDisk = {size: int, next: TowersDisk}
    
    type arrayOfTowersDisk = array of TowersDisk
    
    var piles : arrayOfTowersDisk := arrayOfTowersDisk[3] of nil
    var movesDone : int := 0
    
    function pushDisk(disk : TowersDisk, pile : int) =
      let
        var top : TowersDisk := piles[pile]
      in
        disk.next := top;
        piles[pile] := disk
      end
    
    function popDiskFrom(pile: int): TowersDisk =
      let
        var top : TowersDisk := piles[pile]
      in
        piles[pile] := top.next;
        top.next := nil;
        top
      end
    
    function moveTopDisk(fromPile: int, toPile: int) =
      (
        pushDisk(popDiskFrom(fromPile), toPile);
        movesDone := movesDone + 1
      )
    
    function buildTowerAt(pile: int, disks: int) =
      // might be wrong here. the iteration in the reference implementation is in reverse
      for i := 0 to disks
      do pushDisk(TowersDisk{size = i, next = nil}, pile)
    
    function moveDisks(disks: int, fromPile: int, toPile: int) =
      if disks = 1
      then
        moveTopDisk(fromPile, toPile)
      else
        let
          var otherPile : int := (3 - fromPile) - toPile
        in
          moveDisks(disks - 1, fromPile, otherPile);
          moveTopDisk(fromPile, toPile);
          moveDisks(disks - 1, otherPile, toPile)
        end
  in
    buildTowerAt(0, 13)
    ;movesDone := 0
    ;moveDisks(13, 0, 1)
    ;movesDone // 8191
  end;
  timeStop()
)