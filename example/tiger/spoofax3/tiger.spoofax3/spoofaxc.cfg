id = "tiger.spoofax3"
name = "tiger"
java-class-id-prefix = java Tiger
file-extension = "tig"

sdf3 {}
esv {}
statix {
  source = files {
    sdf3-statix-signature-generation = true
  }
}
stratego {
  source = files {
    sdf3-statix-explication-generation = true
  }
}

parser {
  default-start-symbol = sort Module
}
styler {}
constraint-analyzer {}
stratego-runtime {
  with-primitive-library = java mb.statix.referenceretention.stratego.RRPrimitiveLibrary
}
tego-runtime {}
code-completion {}
reference-resolution {
  variant = stratego {
    strategy = strategy editor-resolve
  }
}
hover {
  variant = stratego {
    strategy = strategy editor-hover
  }
}

build-dependencies [
  org.metaborg:strategolib:*
  org.metaborg:gpp:*
  org.metaborg:libspoofax2:*
  org.metaborg:libstatix:*
]

let inlineMethodTaskDef = task-def mb.tiger.task.TigerInlineMethodCallTaskDef
let inlineMethodCommand = command-def {
  task-def = inlineMethodTaskDef
  type = java mb.tiger.command.TigerInlineMethodCallCommand
  display-name = "Inline method call"
  description = "Inline a method call."
  parameters = [
    project {
      type = java mb.resource.hierarchical.ResourcePath
      required = true
      argument-providers = [ EnclosingContext(Project) ]
    }
    resource {
      type = java mb.resource.ResourceKey
      required = true
      argument-providers = [ Context(ReadableResource) ]
    }
    region {
      type = java mb.common.region.Region
      required = false
      argument-providers = [ Context(Region) ]
    }
  ]
}
editor-context-menu [
  menu "Debug" [
    command-action {
      command-def = inlineMethodCommand
      execution-type = Once
      required-enclosing-resource-types = [Project]
    }
  ]
]

resource-context-menu [
  menu "Debug" [
    command-action {
      command-def = inlineMethodCommand
      execution-type = Once
      required-resource-types = [File]
      required-enclosing-resource-types = [Project]
    }
  ]
]
