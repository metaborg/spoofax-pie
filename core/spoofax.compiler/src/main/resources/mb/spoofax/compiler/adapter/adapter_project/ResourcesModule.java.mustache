package {{baseResourcesModule.packageId}};

import dagger.Module;
import dagger.Provides;
import dagger.multibindings.IntoSet;
import mb.resource.ResourceRegistry;
import mb.resource.classloader.ClassLoaderResourceRegistry;
import mb.resource.classloader.ClassLoaderResource;
import mb.resource.classloader.ClassLoaderUrlResolver;
import mb.resource.classloader.ClassLoaderToNativeResolver;
import mb.resource.hierarchical.HierarchicalResource;

@Module
public class {{baseResourcesModule.id}} {
    private final ClassLoaderUrlResolver urlResolver;
    private final ClassLoaderToNativeResolver toNativeResolver;


    public {{baseResourcesModule.id}}(ClassLoaderUrlResolver urlResolver, ClassLoaderToNativeResolver toNativeResolver) {
        this.urlResolver = urlResolver;
        this.toNativeResolver = toNativeResolver;
    }

    public {{baseResourcesModule.id}}() {
        this(ClassLoaderResourceRegistry.defaultUrlResolver, ClassLoaderResourceRegistry.defaultToNativeResolver);
    }


    @Provides @{{resourcesScope.qualifiedId}}
    {{classLoaderResources.classLoaderResources.qualifiedId}} provideClassLoaderResources() {
        return new {{classLoaderResources.classLoaderResources.qualifiedId}}(urlResolver, toNativeResolver);
    }

    @Provides @{{resourcesScope.qualifiedId}} @{{qualifier.qualifiedId}}
    static ClassLoaderResourceRegistry provideClassLoaderResourceRegistry({{classLoaderResources.classLoaderResources.qualifiedId}} classLoaderResources) {
        return classLoaderResources.resourceRegistry;
    }

    @Provides @{{resourcesScope.qualifiedId}} @{{qualifier.qualifiedId}}("definition-directory")
    static ClassLoaderResource provideDefinitionDirectory({{classLoaderResources.classLoaderResources.qualifiedId}} classLoaderResources) {
        return classLoaderResources.definitionDirectory;
    }

    @Provides @{{resourcesScope.qualifiedId}} @{{qualifier.qualifiedId}}("definition-directory")
    static HierarchicalResource provideDefinitionDirectoryAsHierarchicalResource(@{{qualifier.qualifiedId}}("definition-directory") ClassLoaderResource definitionDirectory) {
        return definitionDirectory;
    }

    @Provides @{{resourcesScope.qualifiedId}} @{{qualifier.qualifiedId}} @IntoSet
    static ResourceRegistry provideClassLoaderResourceRegistryIntoSet(@{{qualifier.qualifiedId}} ClassLoaderResourceRegistry registry) {
        return registry;
    }
}
