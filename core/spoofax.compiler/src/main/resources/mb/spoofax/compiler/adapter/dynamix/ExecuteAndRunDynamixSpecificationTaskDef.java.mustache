package {{baseExecuteAndRunDynamixSpecification.packageId}};

import mb.common.result.Result;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;

import org.checkerframework.checker.nullness.qual.Nullable;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;

import java.io.Serializable;

@{{adapterProject.scope.qualifiedId}}
public class {{baseExecuteAndRunDynamixSpecification.id}} implements TaskDef<{{baseExecuteAndRunDynamixSpecification.id}}.Input, Result<String, ? extends Exception>> {
    public static final class Input implements Serializable {
        public final ResourcePath rootDirectory;
        public final ResourceKey file;

        public Input(ResourcePath rootDirectory, ResourceKey file) {
            this.rootDirectory = rootDirectory;
            this.file = file;
        }

        @Override public boolean equals(@Nullable Object o) {
            if(this == o) return true;
            if(o == null || getClass() != o.getClass()) return false;
            Input input = (Input)o;
            if(!rootDirectory.equals(input.rootDirectory)) return false;
            return file.equals(input.file);
        }

        @Override public int hashCode() {
            int result = rootDirectory.hashCode();
            result = 31 * result + file.hashCode();
            return result;
        }

        @Override public String toString() {
            return "{{baseExecuteAndRunDynamixSpecification.id}}.Input{" +
                "rootDirectory=" + rootDirectory +
                ", file=" + file +
                '}';
        }
    }

    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{executeDynamixSpecificationTaskDef.qualifiedId}} executeDynamixSpecification;
    private final mb.tim_runtime.task.TimRuntimeExecuteProgram timRuntimeExecuteProgram;

    @Inject public {{baseExecuteAndRunDynamixSpecification.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        {{executeDynamixSpecificationTaskDef.qualifiedId}} executeDynamixSpecification,
        mb.tim_runtime.task.TimRuntimeExecuteProgram timRuntimeExecuteProgram
    ) {
        this.classLoaderResources = classLoaderResources;
        this.executeDynamixSpecification = executeDynamixSpecification;
        this.timRuntimeExecuteProgram = timRuntimeExecuteProgram;
    }

    @Override public String getId() {
        return "{{baseExecuteAndRunDynamixSpecification.qualifiedId}}";
    }

    @Override
    public Result<String, ? extends Exception> exec(ExecContext context, Input input) throws Exception {
    	context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());

    	final Result<IStrategoTerm, ?> evaluationResult = context.require(
			executeDynamixSpecification,
			new {{executeDynamixSpecificationTaskDef.qualifiedId}}.Input(input.rootDirectory, input.file)
		);

    	if(!evaluationResult.isOk()) {
    		return Result.ofErr(evaluationResult.getErr());
    	}

    	return context.require(
    		timRuntimeExecuteProgram,
    		evaluationResult.get()
		);
    }
}

