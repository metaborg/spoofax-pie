package {{baseParseTable.packageId}};

import mb.resource.hierarchical.HierarchicalResource;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

public class {{baseParseTable.id}} implements Serializable {
    final {{parseTableType.qualifiedId}} parseTable;

    private {{baseParseTable.id}}({{parseTableType.qualifiedId}} parseTable) {
        this.parseTable = parseTable;
    }

    public static {{baseParseTable.id}} fromDefinitionDir(HierarchicalResource definitionDir) {
        final HierarchicalResource atermFile = definitionDir.appendRelativePath("{{parseTableAtermFileRelativePath}}");
{{#isJsglr2}}
    final HierarchicalResource persistedFile = definitionDir.appendRelativePath("{{parseTablePersistedFileRelativePath}}");
{{/isJsglr2}}
        try(final InputStream atermInputStream = atermFile.openRead(){{#isJsglr2}}; final InputStream persistedInputStream = persistedFile.openRead(){{/isJsglr2}}) {
            final {{parseTableType.qualifiedId}} parseTable = {{parseTableType.qualifiedId}}.fromStream(atermInputStream{{#isJsglr2}}, persistedInputStream{{/isJsglr2}});
            return new {{baseParseTable.id}}(parseTable);
        } catch({{parseTableExceptionType.qualifiedId}} | IOException e) {
            throw new RuntimeException("Cannot create parse table; cannot read parse table from resource '" + atermFile + "'{{#isJsglr2}} or '" + persistedFile + "'{{/isJsglr2}} in classloader resources", e);
        }
    }
}
