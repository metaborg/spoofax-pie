package {{baseAnalyzeTaskDef.packageId}};

import mb.constraint.common.ConstraintAnalyzer.SingleFileResult;
import mb.constraint.common.ConstraintAnalyzerContext;
import mb.constraint.pie.ConstraintAnalyzeTaskDef;
import mb.pie.api.ExecContext;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.HierarchicalResource;
import mb.resource.hierarchical.match.AllResourceMatcher;
import mb.resource.hierarchical.match.FileResourceMatcher;
import mb.resource.hierarchical.match.PathResourceMatcher;
import mb.resource.hierarchical.match.path.ExtensionPathMatcher;
import mb.stratego.common.StrategoRuntime;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;
import javax.inject.Provider;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.stream.Stream;

@{{adapterProject.scope.qualifiedId}}
public class {{baseAnalyzeTaskDef.id}} extends ConstraintAnalyzeTaskDef {
    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer;
    private final Provider<StrategoRuntime> strategoRuntimeProvider;

    @Inject
    public {{baseAnalyzeTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        {{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer,
        Provider<StrategoRuntime> strategoRuntimeProvider
    ) {
        this.classLoaderResources = classLoaderResources;
        this.constraintAnalyzer = constraintAnalyzer;
        this.strategoRuntimeProvider = strategoRuntimeProvider;
    }

    @Override
    public String getId() {
        return "{{baseAnalyzeTaskDef.qualifiedId}}";
    }

    @Override
    protected SingleFileResult analyze(ExecContext context, ResourceKey resource, IStrategoTerm ast, ConstraintAnalyzerContext constraintAnalyzerContext) throws Exception {
        {{#languageProjectInput.enableStatix}}
        try {
            classLoaderResources.performWithDefinitionResourceLocations(
                "src-gen/statix",
                directory -> {
                    try(final Stream<? extends HierarchicalResource> stream = directory.walk(
                        new AllResourceMatcher(new FileResourceMatcher(), new PathResourceMatcher(new ExtensionPathMatcher("aterm")))
                    )) {
                        stream.forEach(statixSpecResource -> {
                            try {
                                context.require(statixSpecResource, ResourceStampers.hashFile());
                            } catch(IOException e) {
                                throw new UncheckedIOException(e);
                            }
                        });
                    }
                },
                jarFileWithPath -> context.require(jarFileWithPath.file)
            );
        } catch(UncheckedIOException e) {
            throw e.getCause();
        }
        {{/languageProjectInput.enableStatix}}
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsLocalResource({{languageProjectInput.constraintAnalyzer.qualifiedId}}.class), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsLocalResource({{languageProjectInput.constraintAnalyzerFactory.qualifiedId}}.class), ResourceStampers.hashFile());
        return constraintAnalyzer.analyze(resource, ast, constraintAnalyzerContext, strategoRuntimeProvider.get());
    }
}
