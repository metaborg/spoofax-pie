package {{baseAnalyzeTaskDef.packageId}};

import mb.constraint.common.ConstraintAnalyzer.SingleFileResult;
import mb.constraint.common.ConstraintAnalyzerContext;
import mb.constraint.common.ConstraintAnalyzerException;
import mb.constraint.pie.ConstraintAnalyzeTaskDef;
import mb.resource.ResourceKey;
import mb.stratego.common.StrategoRuntime;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;
import javax.inject.Provider;

@{{adapterProject.scope.qualifiedId}}
public class {{baseAnalyzeTaskDef.id}} extends ConstraintAnalyzeTaskDef {
    private final {{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer;
    private final Provider<StrategoRuntime> strategoRuntimeProvider;

    @Inject
    public {{baseAnalyzeTaskDef.id}}({{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer, Provider<StrategoRuntime> strategoRuntimeProvider) {
        this.constraintAnalyzer = constraintAnalyzer;
        this.strategoRuntimeProvider = strategoRuntimeProvider;
    }

    @Override
    public String getId() {
        return "{{baseAnalyzeTaskDef.qualifiedId}}";
    }

    @Override
    protected SingleFileResult analyze(ResourceKey resource, IStrategoTerm ast, ConstraintAnalyzerContext context) throws ConstraintAnalyzerException {
        return constraintAnalyzer.analyze(resource, ast, context, strategoRuntimeProvider.get());
    }
}
