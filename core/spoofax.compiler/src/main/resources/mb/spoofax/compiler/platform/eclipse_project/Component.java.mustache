package {{baseEclipseComponent.packageId}};

import dagger.Component;
import mb.resource.dagger.ResourceServiceComponent;
import mb.spoofax.eclipse.EclipseIdentifiers;
import mb.spoofax.eclipse.EclipseLanguageComponent;
import mb.spoofax.eclipse.EclipsePlatformComponent;
import mb.spoofax.eclipse.editor.EditorCloseJob;
import mb.spoofax.eclipse.editor.EditorUpdateJob;
import mb.spoofax.eclipse.job.LockRule;
import mb.spoofax.eclipse.job.ReadLockRule;
import mb.spoofax.eclipse.log.EclipseLoggerComponent;

@{{adapterProjectCompilerInput.scope.qualifiedId}}
@Component(
    modules = {
        {{adapterProjectCompilerInput.module.qualifiedId}}.class,
        {{eclipseModule.qualifiedId}}.class{{#adapterProjectCompilerInput.additionalModules}}{{#-first}}, {{/-first}}
        {{qualifiedId}}.class{{^-last}},
{{/-last}}{{/adapterProjectCompilerInput.additionalModules}}
    },
    dependencies = {
        EclipseLoggerComponent.class,
        {{adapterProjectCompilerInput.resourcesComponent.qualifiedId}}.class,
        ResourceServiceComponent.class,
        EclipsePlatformComponent.class{{#adapterProjectCompilerInput.isMultiLang}},
        mb.statix.multilang.eclipse.MultiLangEclipseComponent.class{{/adapterProjectCompilerInput.isMultiLang}}{{#adapterProjectCompilerInput.dependOnRv32Im}},
        mb.rv32im.eclipse.Rv32ImEclipseComponent.class{{/adapterProjectCompilerInput.dependOnRv32Im}}
    }
)
public interface {{baseEclipseComponent.id}} extends EclipseLanguageComponent, {{adapterProjectCompilerInput.component.qualifiedId}} {
    {{editorTracker.qualifiedId}} getEditorTracker();

    @Override {{checkCallback.qualifiedId}}.Factory getCheckCallbackFactory();


    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} EclipseIdentifiers getEclipseIdentifiers();


    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}}("StartupWriteLock") LockRule startupWriteLockRule();

    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} ReadLockRule startupReadLockRule();


    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} EditorUpdateJob.Factory editorUpdateJobFactory();

    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} EditorCloseJob.Factory editorCloseJobFactory();


    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} {{mainMenu.qualifiedId}} getMainMenu();

    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} {{resourceContextMenu.qualifiedId}} getResourceContextMenu();

    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} {{editorContextMenu.qualifiedId}} getEditorContextMenu();


    @Override @{{adapterProjectCompilerInput.qualifier.qualifiedId}} {{runCommandHandler.qualifiedId}} getRunCommandHandler();
}
