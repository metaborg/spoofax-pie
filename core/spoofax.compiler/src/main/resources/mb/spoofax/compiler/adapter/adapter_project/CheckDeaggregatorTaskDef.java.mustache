package {{baseCheckDeaggregatorTaskDef.packageId}};

import mb.common.message.KeyedMessages;
import mb.common.message.KeyedMessagesBuilder;
import mb.common.message.Message;
import mb.common.util.ListView;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.Serializable;

@{{scope.qualifiedId}}
public class {{baseCheckDeaggregatorTaskDef.id}} implements TaskDef<{{baseCheckDeaggregatorTaskDef.id}}.Input, @Nullable KeyedMessages> {
    public static class Input implements Serializable {
        public final ResourceKey file;
        public final @Nullable ResourcePath rootDirectoryHint;

        public Input(ResourceKey file, @Nullable ResourcePath rootDirectoryHint) {
            this.file = file;
            this.rootDirectoryHint = rootDirectoryHint;
        }

        @Override public boolean equals(@Nullable Object o) {
            if(this == o) return true;
            if(o == null || getClass() != o.getClass()) return false;
            final Input input = (Input)o;
            if(!file.equals(input.file)) return false;
            return rootDirectoryHint != null ? rootDirectoryHint.equals(input.rootDirectoryHint) : input.rootDirectoryHint == null;
        }

        @Override public int hashCode() {
            int result = file.hashCode();
            result = 31 * result + (rootDirectoryHint != null ? rootDirectoryHint.hashCode() : 0);
            return result;
        }

        @Override public String toString() {
            return "{{baseCheckDeaggregatorTaskDef.id}}$Input{" +
                "file=" + file +
                ", rootDirectoryHint=" + rootDirectoryHint +
                '}';
        }
    }

    private final {{classLoaderResources.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{checkTaskDef.qualifiedId}} check;
    private final {{checkMultiTaskDef.qualifiedId}} checkMulti;

    @Inject public {{baseCheckDeaggregatorTaskDef.id}}(
        {{classLoaderResources.classLoaderResources.qualifiedId}} classLoaderResources,
        {{checkTaskDef.qualifiedId}} check,
        {{checkMultiTaskDef.qualifiedId}} checkMulti
    ){
        this.classLoaderResources = classLoaderResources;
        this.check = check;
        this.checkMulti = checkMulti;
    }

    @Override public String getId() {
        return "{{baseCheckDeaggregatorTaskDef.qualifiedId}}";
    }

    @Override public @Nullable KeyedMessages exec(ExecContext context, Input input) throws Exception {
        context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());
        if(input.rootDirectoryHint != null) {
            return context.require(checkMulti, input.rootDirectoryHint);
        } else {
            return context.require(check, new {{checkTaskDef.qualifiedId}}.Input(input.file, input.rootDirectoryHint));
        }
    }
}
