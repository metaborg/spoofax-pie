package {{baseParseTaskDef.packageId}};

import mb.common.result.Result;
import mb.jsglr1.common.JSGLR1ParseException;
import mb.jsglr1.common.JSGLR1ParseOutput;
import mb.jsglr1.pie.JSGLR1ParseTaskDef;
import mb.pie.api.ExecContext;
import mb.pie.api.stamp.resource.ResourceStampers;

import javax.inject.Inject;
import javax.inject.Provider;

@{{adapterProject.scope.qualifiedId}}
public class {{baseParseTaskDef.id}} extends JSGLR1ParseTaskDef {
    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final Provider<{{languageProjectInput.parser.qualifiedId}}> parserProvider;

    @Inject
    public {{baseParseTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        Provider<{{languageProjectInput.parser.qualifiedId}}> parserProvider
    ) {
        this.classLoaderResources = classLoaderResources;
        this.parserProvider = parserProvider;
    }

    @Override public String getId() {
        return "{{baseParseTaskDef.qualifiedId}}";
    }

    @Override protected Result<JSGLR1ParseOutput, JSGLR1ParseException> parse(ExecContext context, String text) throws Exception {
        context.require(classLoaderResources.tryGetAsLocalDefinitionResource("{{languageProjectInput.parseTableRelativePath}}"));
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsLocalResource({{languageProjectInput.parser.qualifiedId}}.class), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsLocalResource({{languageProjectInput.parserFactory.qualifiedId}}.class), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsLocalResource({{languageProjectInput.parseTable.qualifiedId}}.class), ResourceStampers.hashFile());
        final {{languageProjectInput.parser.qualifiedId}} parser = parserProvider.get();
        try {
            return Result.ofOk(parser.parse(text, "{{languageProjectInput.startSymbol}}"));
        } catch(JSGLR1ParseException e) {
            return Result.ofErr(e);
        }
    }
}
