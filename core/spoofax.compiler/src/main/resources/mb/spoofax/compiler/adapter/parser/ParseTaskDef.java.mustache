package {{baseParseTaskDef.packageId}};

import mb.common.text.Text;
import mb.common.result.Result;
import mb.jsglr.common.JsglrParseException;
import mb.jsglr.common.JsglrParseInput;
import mb.jsglr.common.JsglrParseOutput;
import mb.jsglr.pie.JsglrParseTaskDef;
import mb.pie.api.ExecContext;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import javax.inject.Provider;

@{{adapterProject.scope.qualifiedId}}
public class {{baseParseTaskDef.id}} extends JsglrParseTaskDef {
    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final Provider<{{languageProjectInput.parser.qualifiedId}}> parserProvider;

    @Inject public {{baseParseTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        Provider<{{languageProjectInput.parser.qualifiedId}}> parserProvider
    ) {
        this.classLoaderResources = classLoaderResources;
        this.parserProvider = parserProvider;
    }

    @Override public String getId() {
        return "{{baseParseTaskDef.qualifiedId}}";
    }

    @Override protected Result<JsglrParseOutput, JsglrParseException> parse(
        ExecContext context,
        Text text,
        @Nullable String startSymbol,
        @Nullable ResourceKey fileHint,
        @Nullable ResourcePath rootDirectoryHint
    ) throws Exception {
        context.require(classLoaderResources.tryGetAsNativeDefinitionResource("{{languageProjectInput.parseTableAtermFileRelativePath}}"));
{{#languageProjectInput.isJsglr2}}
        context.require(classLoaderResources.tryGetAsNativeDefinitionResource("{{languageProjectInput.parseTablePersistedFileRelativePath}}"));
{{/languageProjectInput.isJsglr2}}
        context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsNativeResource({{languageProjectInput.parser.qualifiedId}}.class), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsNativeResource({{languageProjectInput.parserFactory.qualifiedId}}.class), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsNativeResource({{languageProjectInput.parseTable.qualifiedId}}.class), ResourceStampers.hashFile());
        final {{languageProjectInput.parser.qualifiedId}} parser = parserProvider.get();
        try {
            return Result.ofOk(parser.parse(new JsglrParseInput(text, startSymbol != null ? startSymbol : "{{languageProjectInput.startSymbol}}", fileHint, rootDirectoryHint)));
        } catch(JsglrParseException e) {
            return Result.ofErr(e);
        }
    }
}
