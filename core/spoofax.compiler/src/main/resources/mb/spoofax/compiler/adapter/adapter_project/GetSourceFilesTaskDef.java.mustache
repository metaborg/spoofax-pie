package {{baseGetSourceFilesTaskDef.packageId}};

import mb.common.util.ListView;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.hierarchical.HierarchicalResource;
import mb.resource.hierarchical.ResourcePath;
import mb.resource.hierarchical.match.ResourceMatcher;
import mb.resource.hierarchical.match.path.PathMatcher;
import mb.resource.hierarchical.walk.ResourceWalker;

import javax.inject.Inject;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@{{adapterProject.scope.qualifiedId}}
public class {{baseGetSourceFilesTaskDef.id}} implements TaskDef<ResourcePath, ListView<ResourcePath>> {
    private static final ResourceWalker WALKER = ResourceWalker.ofNoHidden();
    private static final ResourceMatcher MATCHER = ResourceMatcher.ofPath(
        PathMatcher.ofExtensions({{#shared.fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/shared.fileExtensions}})
    ).and(ResourceMatcher.ofFile());

    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;

    @Inject
    public {{baseGetSourceFilesTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources
    ) {
        this.classLoaderResources = classLoaderResources;
    }

    @Override public String getId() {
        return "{{baseGetSourceFilesTaskDef.qualifiedId}}";
    }

    @Override public ListView<ResourcePath> exec(ExecContext context, ResourcePath input) throws Exception {
        context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());

        final HierarchicalResource rootDirectory = context.getHierarchicalResource(input);
        // Require directories recursively, so we re-execute whenever a file is added/removed from a directory.
        rootDirectory.walkForEach(WALKER, ResourceMatcher.ofDirectory(), context::require);

        try(final Stream<? extends HierarchicalResource> files = rootDirectory.walk(WALKER, MATCHER)) {
            return ListView.of(files.map(HierarchicalResource::getPath).collect(Collectors.toList()));
        }
    }
}
