package {{baseExecuteDynamixSpecificationToFile.packageId}};

import java.io.IOException;
import java.io.Serializable;

import javax.inject.Inject;

import org.checkerframework.checker.nullness.qual.Nullable;
import org.spoofax.interpreter.terms.IStrategoTerm;

import mb.common.result.Result;
import mb.dynamix_runtime.DynamixSpecificationRunningException;
import mb.dynamix_runtime.task.DynamixRuntimePrettyPrint;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.WritableResource;
import mb.resource.hierarchical.ResourcePath;
import mb.spoofax.core.language.command.CommandFeedback;
import mb.spoofax.core.language.command.ShowFeedback;

@{{adapterProject.scope.qualifiedId}}
public class {{baseExecuteDynamixSpecificationToFile.id}} implements TaskDef<{{baseExecuteDynamixSpecificationToFile.id}}.Args, CommandFeedback> {
    public static final class Args implements Serializable {
        public final ResourcePath rootDirectory;
        public final ResourcePath file;

        public Args(ResourcePath rootDirectory, ResourcePath file) {
            this.rootDirectory = rootDirectory;
            this.file = file;
        }

        @Override public boolean equals(@Nullable Object o) {
            if(this == o) return true;
            if(o == null || getClass() != o.getClass()) return false;
            Args input = (Args)o;
            if(!rootDirectory.equals(input.rootDirectory)) return false;
            return file.equals(input.file);
        }

        @Override public int hashCode() {
            int result = rootDirectory.hashCode();
            result = 31 * result + file.hashCode();
            return result;
        }

        @Override public String toString() {
            return "{{baseExecuteDynamixSpecificationToFile.id}}.Args{" +
                "rootDirectory=" + rootDirectory +
                ", file=" + file +
                '}';
        }
    }

    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{executeDynamixSpecificationTaskDef.qualifiedId}} executeDynamixSpec;
    private final DynamixRuntimePrettyPrint prettyPrint;

    @Inject public {{baseExecuteDynamixSpecificationToFile.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        {{executeDynamixSpecificationTaskDef.qualifiedId}} executeDynamixSpec,
        DynamixRuntimePrettyPrint prettyPrint
    ) {
        this.classLoaderResources = classLoaderResources;
        this.executeDynamixSpec = executeDynamixSpec;
        this.prettyPrint = prettyPrint;
    }

    @Override public String getId() {
        return "{{baseExecuteDynamixSpecificationToFile.qualifiedId}}";
    }

    @Override
    public CommandFeedback exec(ExecContext context, Args args) throws IOException {
        context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());

        final Result<IStrategoTerm, DynamixSpecificationRunningException> res = context.require(executeDynamixSpec, new {{executeDynamixSpecificationTaskDef.qualifiedId}}.Input(args.rootDirectory, args.file));
        if(res.isErr()) {
            return CommandFeedback.ofTryExtractMessagesFrom(res.getErr(), args.file);
        }

        final Result<String, ?> printed = context.require(prettyPrint, res.get());
        if(printed.isErr()) {
            return CommandFeedback.ofTryExtractMessagesFrom(printed.getErr(), args.file);
        }

        final ResourcePath outputFilePath = args.file.appendToLeafExtension("tim");
        final WritableResource outputFile = context.getWritableResource(outputFilePath);
        outputFile.writeString(printed.get());
        context.provide(outputFile);

        return CommandFeedback.of(ShowFeedback.showFile(outputFilePath));
    }
}

