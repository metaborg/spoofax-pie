package {{baseGetTegoRuntimeProviderTaskDef.packageId}};

import mb.pie.api.ExecContext;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.hierarchical.HierarchicalResource;
import mb.resource.hierarchical.match.AllResourceMatcher;
import mb.resource.hierarchical.match.FileResourceMatcher;
import mb.resource.hierarchical.match.PathResourceMatcher;
import mb.resource.hierarchical.match.path.ExtensionPathMatcher;
import mb.tego.pie.GetTegoRuntimeProvider;
import mb.tego.strategies.runtime.TegoRuntime;

import javax.inject.Inject;
import javax.inject.Provider;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.stream.Stream;

@{{adapterProject.scope.qualifiedId}}
public class {{baseGetTegoRuntimeProviderTaskDef.id}} extends GetTegoRuntimeProvider {
    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final Provider<TegoRuntime> tegoRuntimeProvider;

    @Inject
    public {{baseGetTegoRuntimeProviderTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        Provider<TegoRuntime> tegoRuntimeProvider
    ) {
        this.classLoaderResources = classLoaderResources;
        this.tegoRuntimeProvider = tegoRuntimeProvider;
    }

    @Override public String getId() {
        return "{{baseGetTegoRuntimeProviderTaskDef.qualifiedId}}";
    }

    @Override protected Provider<TegoRuntime> getTegoRuntimeProvider(ExecContext context) throws Exception {
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());
        return tegoRuntimeProvider;
    }
}
