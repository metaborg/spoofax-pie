package {{baseCheckMultiTaskDef.packageId}};

import mb.common.message.KeyedMessages;
import mb.common.message.KeyedMessagesBuilder;
import mb.common.message.Messages;
import mb.common.message.Severity;
import mb.common.result.Result;
import mb.common.util.ListView;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;

import javax.inject.Inject;
import java.io.IOException;

@{{scope.qualifiedId}}
public class {{baseCheckMultiTaskDef.id}} implements TaskDef<ResourcePath, KeyedMessages> {
    {{#checkMultiInjections}}
    private final {{variable}};
    {{/checkMultiInjections}}

    @Inject public {{baseCheckMultiTaskDef.id}}(
        {{#checkMultiInjections}}
        {{variable}}{{^-last}},{{/-last}}
        {{/checkMultiInjections}}
    ) {
        {{#checkMultiInjections}}
        {{thisAssign}};
        {{/checkMultiInjections}}
    }

    @Override public String getId() {
        return "{{baseCheckMultiTaskDef.qualifiedId}}";
    }

    @Override public KeyedMessages exec(ExecContext context, ResourcePath input) throws IOException {
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());
        final KeyedMessagesBuilder messagesBuilder = new KeyedMessagesBuilder();

        final ListView<ResourceKey> sourceFiles = context.require(getSourceFiles, input);

        {{#parser}}
        for(final ResourceKey file : sourceFiles) {
            final Messages messages = context.require(parse.inputBuilder().withFile(file).rootDirectoryHint(input).buildMessagesSupplier());
            messagesBuilder.addMessages(file, messages);
        }
        {{/parser}}

        {{#constraintAnalyzer}}
        final {{this.analyzeMultiTaskDef.qualifiedId}}.Input analyzeInput = new {{this.analyzeMultiTaskDef.qualifiedId}}.Input(input, parse.createRecoverableMultiAstSupplierFunction(sourceFiles));
        final Result<{{this.analyzeMultiTaskDef.qualifiedId}}.Output, ?> analysisResult = context.require(analyze, analyzeInput);
        analysisResult
            .ifOk(output -> {
                messagesBuilder.addMessages(output.result.messages);
                messagesBuilder.addMessages(output.messagesFromAstProviders);
            })
            .ifErr(e -> messagesBuilder.addMessage("Project-wide analysis failed", e, Severity.Error, input));
        {{/constraintAnalyzer}}

        return messagesBuilder.build();
    }
}
