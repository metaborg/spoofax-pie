package {{baseComponent.packageId}};

import dagger.Component;
import mb.spoofax.core.language.LanguageComponent;
import mb.spoofax.core.platform.PlatformComponent;
import mb.resource.ResourceService;
import mb.resource.classloader.ClassLoaderResource;
import mb.pie.api.Pie;
import mb.pie.api.TaskDefs;
{{#isMultiLang}}
import mb.statix.multilang.MultiLangComponent;
import mb.statix.multilang.metadata.LanguageMetadataProvider;
{{/isMultiLang}}
import javax.inject.Provider;

import {{qualifier.qualifiedId}};

@{{scope.qualifiedId}}
@Component(
    modules = { {{module.qualifiedId}}.class{{#additionalModules}}{{#-first}}, {{/-first}}{{qualifiedId}}.class{{^-last}}, {{/-last}}{{/additionalModules}} },
    dependencies = { PlatformComponent.class{{#isMultiLang}}, MultiLangComponent.class{{/isMultiLang}} }
)
public interface {{baseComponent.id}} extends LanguageComponent{{#isMultiLang}}, LanguageMetadataProvider{{/isMultiLang}}  {
    @Override {{instance.qualifiedId}} getLanguageInstance();

    @Override @{{qualifier.id}} ResourceService getResourceService();

    @{{qualifier.id}}("definition-directory") ClassLoaderResource getDefinitionDir();

    @Override @{{qualifier.id}} Pie getPie();
{{#parser}}


    Provider<{{languageProjectInput.parser.qualifiedId}}> getParserProvider();
{{/parser}}
{{#styler}}


    {{languageProjectInput.styler.qualifiedId}} getStyler();
{{/styler}}
{{#constraintAnalyzer}}


    {{languageProjectInput.constraintAnalyzer.qualifiedId}} getConstraintAnalyzer();
{{/constraintAnalyzer}}
{{#strategoRuntime}}


    @{{qualifier.id}} mb.stratego.common.StrategoRuntimeBuilder getStrategoRuntimeBuilder();

    @{{qualifier.id}} Provider<mb.stratego.common.StrategoRuntime> getStrategoRuntimeProvider();
{{/strategoRuntime}}
{{#providedTaskDefs}}
{{#-first}}


    // Task definitions

{{/-first}}
    {{getter}}
{{/providedTaskDefs}}
{{#providedCommandDefs}}
{{#-first}}


    // Command definitions

{{/-first}}
    {{getter}}
{{/providedCommandDefs}}
}
