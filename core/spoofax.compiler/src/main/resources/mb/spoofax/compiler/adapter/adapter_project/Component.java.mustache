package {{baseComponent.packageId}};

import dagger.Component;
import mb.spoofax.core.language.LanguageComponent;
import mb.log.dagger.LoggerComponent;
import mb.spoofax.core.platform.PlatformComponent;
import mb.resource.dagger.ResourceServiceComponent;
import mb.resource.ResourceService;
import mb.resource.classloader.ClassLoaderResource;
import mb.pie.api.TaskDef;
{{#isMultiLang}}
import mb.statix.multilang.MultiLangComponent;
import mb.statix.multilang.metadata.LanguageMetadataProvider;
{{/isMultiLang}}
import javax.inject.Provider;

import {{qualifier.qualifiedId}};

import java.util.Set;

{{#addComponentAnnotationToBaseComponent}}
@{{scope.qualifiedId}}
@Component(
    modules = {
        {{module.qualifiedId}}.class{{#additionalModules}}{{#-first}}, {{/-first}}
        {{qualifiedId}}.class{{^-last}},{{/-last}}{{/additionalModules}}
    },
    dependencies = {
        LoggerComponent.class,
        {{resourcesComponent.qualifiedId}}.class,
        ResourceServiceComponent.class,
        PlatformComponent.class{{#isMultiLang}},
        MultiLangComponent.class{{/isMultiLang}}{{#dependOnRv32Im}},
        mb.rv32im.Rv32ImComponent.class{{/dependOnRv32Im}}{{#dynamix}},
        mb.dynamix_runtime.DynamixRuntimeComponent.class,
        mb.tim_runtime.TimRuntimeComponent.class{{/dynamix}}
    }
)
{{/addComponentAnnotationToBaseComponent}}
public interface {{baseComponent.id}} extends LanguageComponent{{#isMultiLang}}, LanguageMetadataProvider{{/isMultiLang}}  {
    @Override {{instance.qualifiedId}} getLanguageInstance();

    @Override @{{qualifier.id}} Set<TaskDef<?, ?>> getTaskDefs();


    {{exports.resourceExportsClass.qualifiedId}} get{{exports.resourceExportsClass.id}}();
{{#parser}}


    Provider<{{languageProjectInput.parser.qualifiedId}}> getParserProvider();
{{/parser}}
{{#styler}}


    {{languageProjectInput.styler.qualifiedId}} getStyler();
{{/styler}}
{{#constraintAnalyzer}}


    {{languageProjectInput.constraintAnalyzer.qualifiedId}} getConstraintAnalyzer();
{{/constraintAnalyzer}}
{{#strategoRuntime}}


    @{{qualifier.id}} mb.stratego.common.StrategoRuntimeBuilder getStrategoRuntimeBuilder();

    @{{qualifier.id}} Provider<mb.stratego.common.StrategoRuntime> getStrategoRuntimeProvider();
{{/strategoRuntime}}
{{#providedTaskDefs}}
{{#-first}}


    // Task definitions

{{/-first}}
    {{getter}}
{{/providedTaskDefs}}
{{#providedCommandDefs}}
{{#-first}}


    // Command definitions

{{/-first}}
    {{getter}}
{{/providedCommandDefs}}
}
