package {{baseCodeCompletionTaskDef.packageId}};

import mb.common.codecompletion.CodeCompletionResult;
import mb.constraint.pie.ConstraintAnalyzeFile;
import mb.jsglr.pie.JsglrParseTaskDef;
import mb.log.api.LoggerFactory;
import mb.nabl2.terms.stratego.StrategoTerms;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.stratego.pie.GetStrategoRuntimeProvider;
import mb.tego.pie.GetTegoRuntimeProvider;
import mb.statix.codecompletion.pie.CodeCompletionTaskDef;

import mb.completions.common.CompletionProposal;
import mb.completions.common.CompletionResult;

import mb.common.option.Option;
import mb.pie.api.ExecContext;
import mb.pie.api.Supplier;
import mb.pie.api.TaskDef;
import org.checkerframework.checker.nullness.qual.Nullable;
import javax.inject.Inject;
import java.io.Serializable;
import java.util.Objects;

@{{adapterProject.scope.qualifiedId}}
public class {{baseCodeCompletionTaskDef.id}} extends CodeCompletionTaskDef {

    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;

    @Inject
    public {{baseCodeCompletionTaskDef.id}}(
        {{parserInput.parseTaskDef.qualifiedId}} parseTask,
        {{constraintAnalyzerInput.analyzeFileTaskDef.qualifiedId}} analyzeFileTask,
        {{strategoRuntimeInput.getStrategoRuntimeProviderTaskDef.qualifiedId}} getStrategoRuntimeProviderTask,
        {{tegoRuntimeInput.getTegoRuntimeProviderTaskDef.qualifiedId}} getTegoRuntimeProviderTask,
        {{constraintAnalyzerInput.preAnalyzeStatixTaskDef.qualifiedId}} preAnalyzeStatixTask,
        {{constraintAnalyzerInput.postAnalyzeStatixTaskDef.qualifiedId}} postAnalyzeStatixTask,
        {{upgradePlaceholdersStatixTaskDef.qualifiedId}} upgradePlaceholdersTask,
        {{downgradePlaceholdersStatixTaskDef.qualifiedId}} downgradePlaceholdersTask,
        {{isInjectionStatixTaskDef.qualifiedId}} isInjPlaceholdersTask,
        {{ppPartialTaskDef.qualifiedId}} ppPartialTask,
        {{statixSpecTaskDef.qualifiedId}} statixSpec,
        StrategoTerms strategoTerms,
        LoggerFactory loggerFactory,
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources
    ) {
        super(
            parseTask,
            analyzeFileTask,
            getStrategoRuntimeProviderTask,
            getTegoRuntimeProviderTask,
            preAnalyzeStatixTask,
            postAnalyzeStatixTask,
            upgradePlaceholdersTask,
            downgradePlaceholdersTask,
            isInjPlaceholdersTask,
            ppPartialTask,
            statixSpec,
            strategoTerms,
            loggerFactory
        );

        this.classLoaderResources = classLoaderResources;
    }

    @Override
    public String getId() {
        return "{{baseCodeCompletionTaskDef.id}}";
    }

    @Override
    public @Nullable Option<CodeCompletionResult> exec(ExecContext context, CodeCompletionTaskDef.Args input) throws Exception {
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsLocalResource(CodeCompletionTaskDef.Args.class), ResourceStampers.hashFile());

        return super.exec(context, input);
    }

}
