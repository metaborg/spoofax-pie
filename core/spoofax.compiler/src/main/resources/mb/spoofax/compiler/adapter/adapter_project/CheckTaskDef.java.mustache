package {{baseCheckTaskDef.packageId}};

import mb.common.message.Messages;
import mb.common.message.MessagesBuilder;
import mb.common.message.Severity;
import mb.common.result.Result;
import mb.pie.api.ExecContext;
import mb.pie.api.ResourceStringSupplier;
import mb.pie.api.TaskDef;
import mb.resource.ResourceKey;
import javax.inject.Inject;
import java.io.IOException;

@{{scope.qualifiedId}}
public class {{baseCheckTaskDef.id}} implements TaskDef<ResourceKey, Messages> {

{{#checkInjections}}
    {{variable}};
{{/checkInjections}}

    @Inject public {{baseCheckTaskDef.id}}(
{{#checkInjections}}
    {{variable}}{{^-last}},{{/-last}}
{{/checkInjections}}
    ) {
{{#checkInjections}}
        {{thisAssign}};
{{/checkInjections}}
    }

    @Override public String getId() {
        return "{{baseCheckTaskDef.qualifiedId}}";
    }

    @Override public Messages exec(ExecContext context, ResourceKey key) throws IOException {
        final MessagesBuilder messagesBuilder = new MessagesBuilder();
        final ResourceStringSupplier stringSupplier = new ResourceStringSupplier(key);
{{#parser}}
        final Messages parseMessages = context.require(parse.createMessagesSupplier(stringSupplier));
        messagesBuilder.addMessages(parseMessages);
{{/parser}}
{{#constraintAnalyzer}}
        final Result<{{this.analyzeTaskDef.qualifiedId}}.Output, ?> analysisResult = context.require(analyze, new {{this.analyzeTaskDef.qualifiedId}}.Input(key, parse.createRecoverableAstSupplier(stringSupplier)));
        analysisResult
            .ifOk(output -> messagesBuilder.addMessages(output.result.messages))
            .ifErr(e -> messagesBuilder.addMessage("Analysis failed", e, Severity.Error));
{{/constraintAnalyzer}}
        return messagesBuilder.build();
    }
}
