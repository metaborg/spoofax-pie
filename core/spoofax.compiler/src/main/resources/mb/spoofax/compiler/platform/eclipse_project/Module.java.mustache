package {{baseEclipseModule.packageId}};

import dagger.Module;
import dagger.Provides;
import mb.spoofax.eclipse.EclipseIdentifiers;
import mb.spoofax.eclipse.job.LockRule;
import mb.spoofax.eclipse.job.ReadLockRule;
{{#adapterProjectCompilerInput.multilangAnalyzer}}
import mb.statix.multilang.MultiLang;
{{/adapterProjectCompilerInput.multilangAnalyzer}}

import {{adapterProjectCompilerInput.scope.qualifiedId}};

import javax.inject.Named;

@Module
public class {{baseEclipseModule.id}} {
    @Provides @{{adapterProjectCompilerInput.scope.id}}
    static EclipseIdentifiers provideEclipseIdentifiers() {
        return new {{eclipseIdentifiers.qualifiedId}}();
    }

{{#adapterProjectCompilerInput.multilangAnalyzer}}
    @Provides @Named("StartupWriteLock") @{{adapterProjectCompilerInput.scope.id}}
    static LockRule provideStartupWriteLockRule(@MultiLang LockRule startUpWriteLockRule) {
        return startUpWriteLockRule;
    }
{{/adapterProjectCompilerInput.multilangAnalyzer}}
{{^adapterProjectCompilerInput.multilangAnalyzer}}
    @Provides @Named("StartupWriteLock") @{{adapterProjectCompilerInput.scope.id}}
    static LockRule provideStartupWriteLockRule() {
        return new LockRule("Startup");
    }
{{/adapterProjectCompilerInput.multilangAnalyzer}}

    @Provides /* Unscoped: creates a new read lock every time, which is intended. */
    static ReadLockRule provideStartupReadLockRule(@Named("StartupWriteLock") LockRule writeLock) {
        return writeLock.createReadLock();
    }
}
