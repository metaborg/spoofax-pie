package {{baseAnalyzeFileTaskDef.packageId}};

import mb.common.result.Result;
import mb.common.util.ListView;
import mb.constraint.common.ConstraintAnalyzerContext;
import mb.constraint.pie.ConstraintAnalyzeMultiTaskDef;
import mb.constraint.pie.ConstraintAnalyzeTaskDef;
import mb.constraint.pie.ConstraintAnalyzeFile;
import mb.jsglr.common.JsglrParseException;
import mb.pie.api.ExecContext;
import mb.pie.api.Supplier;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;
import java.io.Serializable;
import java.util.Optional;

@{{adapterProject.scope.qualifiedId}}
public class {{baseAnalyzeFileTaskDef.id}} extends ConstraintAnalyzeFile {
    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{parseInput.parseTaskDef.qualifiedId}} parse;
    private final {{runtimeAnalyzeTaskDef.qualifiedId}} analyze;
    private final {{getSourceFilesInput.getSourceFilesTaskDef.qualifiedId}} getSourceFiles;

    @Inject
    public {{baseAnalyzeFileTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        {{parseInput.parseTaskDef.qualifiedId}} parse,
        {{runtimeAnalyzeTaskDef.qualifiedId}} analyze,
        {{getSourceFilesInput.getSourceFilesTaskDef.qualifiedId}} getSourceFiles
    ) {
        this.classLoaderResources = classLoaderResources;
        this.parse = parse;
        this.analyze = analyze;
        this.getSourceFiles = getSourceFiles;
    }

    @Override public String getId() {
        return "{{baseAnalyzeFileTaskDef.qualifiedId}}";
    }

    @Override public Result<ConstraintAnalyzeFile.Output, ?> exec(ExecContext context, ConstraintAnalyzeFile.Input input) throws Exception {
        context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());
{{#isMultiFile}}
        final Result<ConstraintAnalyzeMultiTaskDef.SingleFileOutput, ?> analysis = context.require(
            analyze.createSingleFileOutputSupplier(
                new ConstraintAnalyzeMultiTaskDef.Input(
                    input.rootDirectory,
                    parse.createRecoverableMultiAstSupplierFunction(getSourceFiles.createFunction())
                ),
                input.file
            )
        );
{{/isMultiFile}}
{{^isMultiFile}}
        final Supplier<Result<IStrategoTerm, JsglrParseException>> astSupplier = parse
            .inputBuilder()
            .withFile(input.file)
            .rootDirectoryHint(Optional.of(input.rootDirectory))
            .fileHint(input.file)
            .buildAstSupplier();
        final Result<ConstraintAnalyzeTaskDef.Output, ?> analysis = context.require(
            analyze,
            new ConstraintAnalyzeTaskDef.Input(input.file, astSupplier)
        );
{{/isMultiFile}}
        return analysis.map(output -> new ConstraintAnalyzeFile.Output(output.context, output.result.ast, output.result.analysis));
    }
}
