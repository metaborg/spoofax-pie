package {{baseInstance.packageId}};

import mb.common.message.KeyedMessages;
import mb.common.message.Messages;
import mb.common.option.Option;
import mb.common.result.Result;
import mb.common.style.Styling;
import mb.common.region.Region;
import mb.common.token.Tokens;
import mb.common.util.CollectionView;
import mb.common.util.EntryView;
import mb.common.util.ListView;
import mb.common.util.MapView;
import mb.common.util.SetView;
import mb.completions.common.CompletionResult;
import mb.jsglr.common.JSGLRTokens;
import mb.jsglr1.common.JSGLR1ParseException;
import mb.pie.api.StatelessSerializableFunction;
import mb.pie.api.Task;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import mb.resource.hierarchical.match.PathResourceMatcher;
import mb.resource.hierarchical.match.path.ExtensionsPathMatcher;
import mb.resource.hierarchical.match.path.NoHiddenPathMatcher;
import mb.resource.hierarchical.walk.PathResourceWalker;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.cli.CliCommand;
import mb.spoofax.core.language.cli.CliParam;
import mb.spoofax.core.language.command.AutoCommandRequest;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.CommandExecutionType;
import mb.spoofax.core.language.command.CommandRequest;
import mb.spoofax.core.language.command.EditorSelectionType;
import mb.spoofax.core.language.command.EditorFileType;
import mb.spoofax.core.language.command.EnclosingCommandContextType;
import mb.spoofax.core.language.command.HierarchicalResourceType;
import mb.spoofax.core.language.command.arg.RawArgs;
import mb.spoofax.core.language.menu.CommandAction;
import mb.spoofax.core.language.menu.MenuItem;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Set;


public class {{baseInstance.id}} implements LanguageInstance {
    private final static SetView<String> fileExtensions = SetView.of({{#shared.fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/shared.fileExtensions}});

{{#injected}}
    private final {{variable}};
{{/injected}}

    private final CollectionView<CommandDef<?>> commandDefs;
    private final CollectionView<AutoCommandRequest<?>> autoCommandDefs;

    @Inject public {{baseInstance.id}}(
{{#injected}}
        {{variable}},
{{/injected}}
        Set<CommandDef<?>> commandDefs,
        Set<AutoCommandRequest<?>> autoCommandDefs
    ) {
{{#injected}}
        {{thisAssign}};
{{/injected}}
        this.commandDefs = CollectionView.copyOf(commandDefs);
        this.autoCommandDefs = CollectionView.copyOf(autoCommandDefs);
    }


    @Override public String getDisplayName() {
        return "{{shared.name}}";
    }

    @Override public SetView<String> getFileExtensions() {
        return fileExtensions;
    }


    @Override public Task<? extends Option<? extends Tokens<?>>> createTokenizeTask(ResourceKey resourceKey) {
        return {{tokenizeInjection.name}}.createTask(resourceKey);
    }

    @Override public Task<Option<Styling>> createStyleTask(ResourceKey resourceKey) {
{{#parseInjection}}
        return {{styleInjection.name}}.createTask({{this.name}}.createRecoverableTokensSupplier(resourceKey).map(TokensResultToOkFunction.instance));
{{/parseInjection}}
{{^parseInjection}}
        return {{styleInjection.name}}.createTask((ctx) -> mb.pie.api.None.instance);
{{/parseInjection}}
    }

    @Override
    public Task<@Nullable CompletionResult> createCompletionTask(ResourceKey resourceKey, Region primarySelection) {
{{#parseInjection}}
        return {{completeInjection.name}}.createTask(new {{completeInjection.type.qualifiedId}}.Input({{this.name}}.createRecoverableAstSupplier(resourceKey).map(Result::get))); // TODO: use Result
{{/parseInjection}}
{{^parseInjection}}
        return {{completeInjection.name}}.createTask(new {{completeInjection.type.qualifiedId}}.Input((ctx) -> mb.pie.api.None.instance)); // TODO: use Result
{{/parseInjection}}
    }

    @Override public Task<KeyedMessages> createCheckTask(ResourcePath projectRoot) {
        {{#isMultiLang}}
        return {{checkInjection.name}}.createTask(projectRoot);
        {{/isMultiLang}}
        {{^isMultiLang}}
        return {{checkInjection.name}}.createTask(new {{checkInjection.type.qualifiedId}}.Input(
            projectRoot,
            new PathResourceWalker(new NoHiddenPathMatcher()),
            new PathResourceMatcher(new ExtensionsPathMatcher(getFileExtensions().asUnmodifiable()))));
        {{/isMultiLang}}
    }

    @Override public CollectionView<CommandDef<?>> getCommandDefs() {
        return commandDefs;
    }

    @Override public CollectionView<AutoCommandRequest<?>> getAutoCommandRequests() {
        return autoCommandDefs;
    }


    @Override public CliCommand getCliCommand() {
{{#cliCommand}}
        return {{>adapter_project/partial/CliCommand.mustache}};
{{/cliCommand}}
    }


    @Override public ListView<MenuItem> getMainMenuItems() {
        return ListView.of(
{{#mainMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/mainMenuItems}}
        );
    }

    @Override public ListView<MenuItem> getResourceContextMenuItems() {
        return ListView.of(
{{#resourceContextMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/resourceContextMenuItems}}
        );
    }

    @Override public ListView<MenuItem> getEditorContextMenuItems() {
        return ListView.of(
{{#editorContextMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/editorContextMenuItems}}
        );
    }
}

class TokensResultToOkFunction extends StatelessSerializableFunction<Result<JSGLRTokens, JSGLR1ParseException>, Option<JSGLRTokens>> {
    public static final TokensResultToOkFunction instance = new TokensResultToOkFunction();

    @Override public Option<JSGLRTokens> apply(Result<JSGLRTokens, JSGLR1ParseException> result) {
        return result.ok();
    }

    protected Object readResolve() { return instance; }

    private TokensResultToOkFunction() {}
}
