package {{baseInstance.packageId}};

import mb.common.editor.HoverResult;
import mb.common.editor.ReferenceResolutionResult;
import mb.common.message.KeyedMessages;
import mb.common.message.Messages;
import mb.common.option.Option;
import mb.common.result.Result;
import mb.common.style.Styling;
import mb.common.region.Region;
import mb.common.token.Tokens;
import mb.common.util.CollectionView;
import mb.common.util.EntryView;
import mb.common.util.ListView;
import mb.common.util.MapView;
import mb.common.util.SetView;
import mb.common.codecompletion.CodeCompletionResult;
import mb.jsglr.common.JSGLRTokens;
import mb.jsglr.common.JsglrParseException;
import mb.jsglr.common.JsglrParseOutput;
import mb.pie.api.StatelessSerializableFunction;
import mb.pie.api.ExecContext;
import mb.pie.api.ExecException;
import mb.pie.api.Session;
import mb.pie.api.Task;
import mb.pie.api.ValueSupplier;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import mb.resource.hierarchical.match.PathResourceMatcher;
import mb.resource.hierarchical.match.path.ExtensionsPathMatcher;
import mb.resource.hierarchical.match.path.NoHiddenPathMatcher;
import mb.resource.hierarchical.walk.PathResourceWalker;
import mb.spoofax.core.language.LanguageInstance;
import mb.spoofax.core.language.cli.CliCommand;
import mb.spoofax.core.language.cli.CliParam;
import mb.spoofax.core.language.command.AutoCommandRequest;
import mb.spoofax.core.language.command.CommandDef;
import mb.spoofax.core.language.command.CommandExecutionType;
import mb.spoofax.core.language.command.CommandRequest;
import mb.spoofax.core.language.command.EditorSelectionType;
import mb.spoofax.core.language.command.EditorFileType;
import mb.spoofax.core.language.command.EnclosingCommandContextType;
import mb.spoofax.core.language.command.HierarchicalResourceType;
import mb.spoofax.core.language.command.arg.RawArgs;
import mb.spoofax.core.language.menu.CommandAction;
import mb.spoofax.core.language.menu.MenuItem;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Optional;
import java.util.Set;

public class {{baseInstance.id}} implements LanguageInstance
    {{#parseInjection}}, mb.spt.api.parse.TestableParse{{/parseInjection}}
    {{#testStrategoInjection}}, mb.spt.api.stratego.TestableStratego{{/testStrategoInjection}}
    {{#analyzeInjection}}, mb.spt.api.analyze.TestableAnalysis{{/analyzeInjection}}
    {{#referenceResolution}}, mb.spt.api.resolve.TestableResolve{{/referenceResolution}} {
    private final static SetView<String> fileExtensions = SetView.of({{#shared.fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/shared.fileExtensions}});

{{#injected}}
    private final {{variable}};
{{/injected}}

    private final CollectionView<CommandDef<?>> commandDefs;
    private final CollectionView<AutoCommandRequest<?>> autoCommandDefs;

    @Inject public {{baseInstance.id}}(
{{#injected}}
        {{variable}},
{{/injected}}
        Set<CommandDef<?>> commandDefs,
        Set<AutoCommandRequest<?>> autoCommandDefs
    ) {
{{#injected}}
        {{thisAssign}};
{{/injected}}
        this.commandDefs = CollectionView.copyOf(commandDefs);
        this.autoCommandDefs = CollectionView.copyOf(autoCommandDefs);
    }


    @Override public String getId() {
        return "{{shared.defaultArtifactId}}";
    }

    @Override public String getDisplayName() {
        return "{{shared.name}}";
    }

    @Override public SetView<String> getFileExtensions() {
        return fileExtensions;
    }


    @Override public Task<? extends Option<? extends Tokens<?>>> createTokenizeTask(ResourceKey resourceKey) {
        return {{tokenizeInjection.name}}.createTask(resourceKey);
    }

    @Override public Task<Option<Styling>> createStyleTask(ResourceKey file, @Nullable ResourcePath rootDirectoryHint) {
{{#parseInjection}}
        return {{styleInjection.name}}.createTask({{this.name}}.inputBuilder().withFile(file).rootDirectoryHint(Optional.ofNullable(rootDirectoryHint)).buildRecoverableTokensSupplier().map(TokensResultToOkFunction.instance));
{{/parseInjection}}
{{^parseInjection}}
        return {{styleInjection.name}}.createTask((ctx) -> mb.pie.api.None.instance);
{{/parseInjection}}
    }

    @Override
    public Task<Result<CodeCompletionResult, ?>> createCodeCompletionTask(Region primarySelection, ResourceKey resourceKey, @Nullable ResourcePath rootDirectoryHint) {
        return {{codeCompletionInjection.name}}.createTask(new {{codeCompletionInjection.type.qualifiedId}}.Input(
            primarySelection,
            resourceKey,
            rootDirectoryHint
        ));
    }

    @Override public Task<KeyedMessages> createCheckOneTask(ResourceKey file, @Nullable ResourcePath rootDirectoryHint) {
        return {{checkOneInjection.name}}.createTask(new {{checkOneInjection.type.qualifiedId}}.Input(file, rootDirectoryHint));
    }

    @Override public Task<KeyedMessages> createCheckTask(ResourcePath rootDirectory) {
        return {{checkInjection.name}}.createTask(rootDirectory);
    }

    @Override public CollectionView<CommandDef<?>> getCommandDefs() {
        return commandDefs;
    }

    @Override public CollectionView<AutoCommandRequest<?>> getAutoCommandRequests() {
        return autoCommandDefs;
    }


    @Override public CliCommand getCliCommand() {
{{#cliCommand}}
        return {{>adapter_project/partial/CliCommand.mustache}};
{{/cliCommand}}
    }


    @Override public ListView<MenuItem> getMainMenuItems() {
        return ListView.of(
{{#allMainMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/allMainMenuItems}}
        );
    }

    @Override public ListView<MenuItem> getResourceContextMenuItems() {
        return ListView.of(
{{#allResourceContextMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/allResourceContextMenuItems}}
        );
    }

    @Override public ListView<MenuItem> getEditorContextMenuItems() {
        return ListView.of(
{{#allEditorContextMenuItems}}
            {{>adapter_project/partial/MenuItem.mustache}}{{^-last}},{{/-last}}
{{/allEditorContextMenuItems}}
        );
    }

    @Override
    public Task<Option<ReferenceResolutionResult>> createResolveTask(ResourcePath rootDirectory, ResourceKey file, Region region) {
{{#hasResolveInjection}}
        return {{resolveInjection.name}}.createTask(new {{resolveInjection.type.qualifiedId}}.Args(file, rootDirectory, region));
{{/hasResolveInjection}}
{{^hasResolveInjection}}
        return {{resolveInjection.name}}.createTask({{resolveInjection.type.qualifiedId}}.Args.Empty);
{{/hasResolveInjection}}
    }

    @Override
    public Task<Option<HoverResult>> createHoverTask(ResourcePath rootDirectory, ResourceKey file, Region region) {
{{#hasHoverInjection}}
        return {{hoverInjection.name}}.createTask(new {{hoverInjection.type.qualifiedId}}.Args(file, rootDirectory, region));
{{/hasHoverInjection}}
{{^hasHoverInjection}}
        return {{hoverInjection.name}}.createTask({{hoverInjection.type.qualifiedId}}.Args.Empty);
{{/hasHoverInjection}}
    }

{{#parseInjection}}

    @Override
    public Result<mb.spt.api.parse.ParseResult, ?> testParse(Session session, ResourceKey resource, @Nullable ResourcePath rootDirectoryHint) throws InterruptedException {
        final Result<JsglrParseOutput, JsglrParseException> result;
        try {
            result = session.requireWithoutObserving({{this.name}}.createTask(mb.jsglr.pie.JsglrParseTaskInput.builder()
                .withFile(resource)
                .rootDirectoryHint(Optional.ofNullable(rootDirectoryHint))
                .build()
            ));
            return result.mapOrElse(
                o -> Result.ofOk(new mb.spt.api.parse.ParseResult(true, o.recovered, o.ambiguous, o.messages)),
                e -> e.caseOf()
                    .parseFail_(Result.ofOk(new mb.spt.api.parse.ParseResult()))
                    .otherwise_(Result.ofErr(e))
            );
        } catch(ExecException e) {
            return Result.ofErr(e);
        }
    }

    @Override
    public Result<org.spoofax.interpreter.terms.IStrategoTerm, ?> testParseToAterm(Session session, ResourceKey resource, @Nullable ResourcePath rootDirectoryHint) throws InterruptedException {
        try {
            return session.requireWithoutObserving({{this.name}}.createTask(mb.jsglr.pie.JsglrParseTaskInput.builder()
                .withFile(resource)
                .rootDirectoryHint(Optional.ofNullable(rootDirectoryHint))
                .build()
            )).map(r -> r.ast);
        } catch(ExecException e) {
            return Result.ofErr(e);
        }
    }
{{/parseInjection}}
{{#testStrategoInjection}}
    @Override
    public Result<org.spoofax.interpreter.terms.IStrategoTerm, ?> testRunStrategy(Session session, ResourceKey resource, String strategy, ListView<mb.spt.api.analyze.StrategoRunArgument> termArguments, mb.common.option.Option<Region> region, @Nullable ResourcePath rootDirectoryHint) throws InterruptedException {
        try {
            return session.requireWithoutObserving(
                {{testStrategoInjection.name}}.createTask(
        {{#analyzeInjection}}
                    {{analyzeInjection.name}}.createSupplier(
                        new mb.constraint.pie.ConstraintAnalyzeTaskDef.Input(resource,{{parseInjection.name}}.inputBuilder()
                            .withFile(resource)
                            .rootDirectoryHint(Optional.ofNullable(rootDirectoryHint))
                            .buildAstSupplier()
                        )
                    )
        {{/analyzeInjection}}
        {{^analyzeInjection}}
                    {{parseInjection.name}}.inputBuilder()
                    .withFile(resource)
                    .rootDirectoryHint(Optional.ofNullable(rootDirectoryHint))
                    .buildAstSupplier()
        {{/analyzeInjection}}
                    .map(
                        (output) ->
                            output.mapOrElse(
                                (output2) -> Result.ofOk(new {{testStrategoTaskDef.qualifiedId}}.Input(output2, strategy, termArguments, region)),
                                Result::ofErr
                            )
                    )
                )
            );
        } catch(ExecException e) {
            return Result.ofErr(e);
        }
    }
{{/testStrategoInjection}}
{{#referenceResolution}}
    @Override
    public Result<mb.common.editor.ReferenceResolutionResult, ?> testResolve(Session session, ResourceKey resource, Region region, @Nullable ResourcePath rootDirectoryHint) throws InterruptedException {
        try {
            return session.requireWithoutObserving(
                createResolveTask(rootDirectoryHint, resource, region)
            ).mapOrElse(
                (result) -> Result.ofOk(result),
                () -> Result.ofErr(new Exception("Reference resolution failed"))
            );
        } catch(ExecException e) {
            return Result.ofErr(e);
        }
    }
{{/referenceResolution}}
{{#analyzeInjection}}
    @Override
    public Result<org.spoofax.interpreter.terms.IStrategoTerm, ?> testAnalyze(Session session, ResourceKey resource, @Nullable ResourcePath rootDirectoryHint) throws InterruptedException {
        try {
            return session.requireWithoutObserving(
                {{analyzeInjection.name}}.createTask(
                    new mb.constraint.pie.ConstraintAnalyzeTaskDef.Input(resource, {{parseInjection.name}}.inputBuilder()
                        .withFile(resource)
                        .rootDirectoryHint(rootDirectoryHint)
                        .buildAstSupplier()
                    )
                )
            ).map((output) -> output.result.analyzedAst);
        } catch(ExecException e) {
            return Result.ofErr(e);
        }
    }
{{/analyzeInjection}}
}

class TokensResultToOkFunction extends StatelessSerializableFunction<Result<JSGLRTokens, JsglrParseException>, Option<JSGLRTokens>> {
    public static final TokensResultToOkFunction instance = new TokensResultToOkFunction();

    @Override public Option<JSGLRTokens> apply(Result<JSGLRTokens, JsglrParseException> result) {
        return result.ok();
    }

    protected Object readResolve() { return instance; }

    private TokensResultToOkFunction() {}
}
