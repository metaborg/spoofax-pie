package {{baseMetadataProvider.packageId}};

import mb.statix.multilang.metadata.ContextId;
import mb.statix.multilang.metadata.LanguageId;
import mb.statix.multilang.metadata.LanguageMetadata;
import mb.statix.multilang.eclipse.LanguageMetadataProvider;
import mb.statix.multilang.metadata.SpecFragmentId;
import mb.statix.multilang.metadata.spec.SpecConfig;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;

public class {{baseMetadataProvider.id}} implements LanguageMetadataProvider {
    // Don't inline this method into getLanguageMetadataSuppliers
    // Because call to getComponent should be delayed for concurrency reasons
    private LanguageMetadata getLanguageMetadata() {
        return {{plugin.id}}.getComponent().getLanguageMetadata();
    }

    {{#adapterProjectCompilerInput.multilangAnalyzer}}
    @Override public Map<LanguageId, Supplier<LanguageMetadata>> getLanguageMetadataSuppliers() {
        Map<LanguageId, Supplier<LanguageMetadata>> result = new HashMap<>();
        result.put(new LanguageId("{{languageId}}"), this::getLanguageMetadata);
        return result;
    }

    @Override
    public Map<SpecFragmentId, SpecConfig> getSpecConfigs() {
        return {{plugin.id}}.getComponent().getSpecConfigs();
    }

    @Override public Map<LanguageId, ContextId> getDefaultLanguageContexts() {
        Map<LanguageId, ContextId> result = new HashMap<>();
        result.put(new LanguageId("{{languageId}}"), new ContextId("{{contextId}}"));
        return result;
    }
    {{/adapterProjectCompilerInput.multilangAnalyzer}}
}
