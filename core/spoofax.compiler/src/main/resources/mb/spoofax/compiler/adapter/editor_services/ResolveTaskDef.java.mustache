package {{baseResolveTaskDef.packageId}};

import mb.aterm.common.TermToString;
import mb.common.editor.ReferenceResolutionResult;
import mb.common.option.Option;
import mb.common.region.Region;
import mb.common.result.Result;
import mb.common.util.ListView;
import mb.jsglr.common.TermTracer;
import mb.pie.api.ExecContext;
import mb.pie.api.None;
import mb.pie.api.OutTransient;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.ResourcePath;
import mb.stratego.common.StrategoException;
import mb.stratego.common.StrategoRuntime;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.spoofax.interpreter.terms.IStrategoList;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;
import javax.inject.Provider;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@{{adapterProject.scope.qualifiedId}}
public class {{baseResolveTaskDef.id}} implements TaskDef<{{baseResolveTaskDef.id}}.Args, Option<ReferenceResolutionResult>> {
    public static class Args implements Serializable {
        private static final long serialVersionUID = 1L;

        public final ResourceKey file;
        public final ResourcePath rootDirectory;
        public final Region position;

        public Args(ResourceKey file, ResourcePath rootDirectory, Region position) {
            this.file = file;
            this.rootDirectory = rootDirectory;
            this.position = position;
        }

        @Override public boolean equals(Object o) {
            if(this == o) return true;
            if(o == null || getClass() != o.getClass()) return false;

            Args args = (Args)o;

            if(!file.equals(args.file)) return false;
            if(!rootDirectory.equals(args.rootDirectory)) return false;
            if(!position.equals(args.position)) return false;

            return true;
        }

        @Override public int hashCode() {
            int result = file.hashCode();
            result = 31 * result + rootDirectory.hashCode();
            result = 31 * result + position.hashCode();
            return result;
        }

        @Override public String toString() {
            return "Args{" +
                "file=" + file +
                ", rootDirectory=" + rootDirectory +
                ", offset=" + position +
                '}';
        }
    }

    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{constraintAnalyzerInput.analyzeFileTaskDef.qualifiedId}} analyzeFile;
    private final {{strategoRuntimeInput.getStrategoRuntimeProviderTaskDef.qualifiedId}} getStrategoRuntimeProvider;

    @Inject
    public {{baseResolveTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        {{constraintAnalyzerInput.analyzeFileTaskDef.qualifiedId}} analyzeFile,
        {{strategoRuntimeInput.getStrategoRuntimeProviderTaskDef.qualifiedId}} getStrategoRuntimeProvider
    ) {
        this.classLoaderResources = classLoaderResources;
        this.analyzeFile = analyzeFile;
        this.getStrategoRuntimeProvider = getStrategoRuntimeProvider;
    }

    @Override public String getId() {
        return "{{baseResolveTaskDef.qualifiedId}}";
    }

    @Override public Option<ReferenceResolutionResult> exec(ExecContext context, Args args) throws Exception {
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());

        final Result<{{constraintAnalyzerInput.analyzeFileTaskDef.qualifiedId}}.Output, ?> analysis = context.require(
            analyzeFile,
            new {{constraintAnalyzerInput.analyzeFileTaskDef.qualifiedId}}.Input(args.rootDirectory, args.file)
        );

        if(!analysis.isOk()) {
            return Option.ofNone();
        }

        final OutTransient<Provider<StrategoRuntime>> strategoProvider = context.require(getStrategoRuntimeProvider, None.instance);
        final StrategoRuntime strategoRuntime = strategoProvider.getValue().get().addContextObject(analysis.get().analyzerContext);

        // find the AST nodes for the relevant offset (innermost first)
        final Collection<IStrategoTerm> terms = TermTracer.getTermsEncompassingRegion(analysis.get().inputAst, args.position);

        // attempt to run stratego strategy on every ast in turn
        for(IStrategoTerm term : terms) {
            try {
                final IStrategoTerm input = strategoRuntime.getTermFactory().makeTuple(
                    term,
                    strategoRuntime.getTermFactory().makeList(),
                    term,
                    strategoRuntime.getTermFactory().makeString("."),
                    strategoRuntime.getTermFactory().makeString(args.file.asString())
                );
                final IStrategoTerm result = strategoRuntime.invoke("{{resolveStrategy}}", input);

                // Resolve strategy can either return a single AST or a list of
                // results. Convert both to a list, then map them to resolve results.
                final List<IStrategoTerm> results;
                if(result instanceof IStrategoList) {
                    results = ((IStrategoList)result).getSubterms();
                } else {
                    results = Collections.singletonList(result);
                }

                final List<ReferenceResolutionResult.ResolvedEntry> entries = results.stream().map(matchedTerm -> {
                    final @Nullable ResourceKey termFile = TermTracer.getResourceKey(matchedTerm);
                    final @Nullable Region termRegion = TermTracer.getRegion(matchedTerm);

                    if(termFile == null || termRegion == null) {
                        // Ignore results that don't have a location.
                        return null;
                    }

                    return new ReferenceResolutionResult.ResolvedEntry(termFile, termRegion, TermToString.toString(matchedTerm));
                }).filter(Objects::nonNull).collect(Collectors.toList());

                if(entries.isEmpty()) {
                    return Option.ofNone();
                }

                return Option.ofSome(new ReferenceResolutionResult(TermTracer.getRegion(term), ListView.of(entries)));
            } catch(StrategoException ex) {
                // ignored
            }
        }

        return Option.ofNone();
    }
}
